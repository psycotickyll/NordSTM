
NordSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081bc  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08008300  08008300  00009300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008734  08008734  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008734  08008734  00009734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800873c  0800873c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800873c  0800873c  0000973c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008740  08008740  00009740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008744  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c0  200001d4  08008918  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a94  08008918  0000aa94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bc2  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002502  00000000  00000000  0001bdbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0001e2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e26  00000000  00000000  0001f4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165d0  00000000  00000000  0002031e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132ce  00000000  00000000  000368ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000945ea  00000000  00000000  00049bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de1a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f2c  00000000  00000000  000de1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e4118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	080082e4 	.word	0x080082e4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	080082e4 	.word	0x080082e4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	@ 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d26:	2afd      	cmp	r2, #253	@ 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	@ 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__aeabi_uldivmod>:
 8000f74:	b953      	cbnz	r3, 8000f8c <__aeabi_uldivmod+0x18>
 8000f76:	b94a      	cbnz	r2, 8000f8c <__aeabi_uldivmod+0x18>
 8000f78:	2900      	cmp	r1, #0
 8000f7a:	bf08      	it	eq
 8000f7c:	2800      	cmpeq	r0, #0
 8000f7e:	bf1c      	itt	ne
 8000f80:	f04f 31ff 	movne.w	r1, #4294967295
 8000f84:	f04f 30ff 	movne.w	r0, #4294967295
 8000f88:	f000 b98c 	b.w	80012a4 <__aeabi_idiv0>
 8000f8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f94:	f000 f806 	bl	8000fa4 <__udivmoddi4>
 8000f98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fa0:	b004      	add	sp, #16
 8000fa2:	4770      	bx	lr

08000fa4 <__udivmoddi4>:
 8000fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fa8:	9d08      	ldr	r5, [sp, #32]
 8000faa:	468e      	mov	lr, r1
 8000fac:	4604      	mov	r4, r0
 8000fae:	4688      	mov	r8, r1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d14a      	bne.n	800104a <__udivmoddi4+0xa6>
 8000fb4:	428a      	cmp	r2, r1
 8000fb6:	4617      	mov	r7, r2
 8000fb8:	d962      	bls.n	8001080 <__udivmoddi4+0xdc>
 8000fba:	fab2 f682 	clz	r6, r2
 8000fbe:	b14e      	cbz	r6, 8000fd4 <__udivmoddi4+0x30>
 8000fc0:	f1c6 0320 	rsb	r3, r6, #32
 8000fc4:	fa01 f806 	lsl.w	r8, r1, r6
 8000fc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000fcc:	40b7      	lsls	r7, r6
 8000fce:	ea43 0808 	orr.w	r8, r3, r8
 8000fd2:	40b4      	lsls	r4, r6
 8000fd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fd8:	fbb8 f1fe 	udiv	r1, r8, lr
 8000fdc:	fa1f fc87 	uxth.w	ip, r7
 8000fe0:	fb0e 8811 	mls	r8, lr, r1, r8
 8000fe4:	fb01 f20c 	mul.w	r2, r1, ip
 8000fe8:	0c23      	lsrs	r3, r4, #16
 8000fea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d909      	bls.n	8001006 <__udivmoddi4+0x62>
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ff8:	f080 80eb 	bcs.w	80011d2 <__udivmoddi4+0x22e>
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	f240 80e8 	bls.w	80011d2 <__udivmoddi4+0x22e>
 8001002:	3902      	subs	r1, #2
 8001004:	443b      	add	r3, r7
 8001006:	1a9a      	subs	r2, r3, r2
 8001008:	fbb2 f0fe 	udiv	r0, r2, lr
 800100c:	fb0e 2210 	mls	r2, lr, r0, r2
 8001010:	fb00 fc0c 	mul.w	ip, r0, ip
 8001014:	b2a3      	uxth	r3, r4
 8001016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800101a:	459c      	cmp	ip, r3
 800101c:	d909      	bls.n	8001032 <__udivmoddi4+0x8e>
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	f100 32ff 	add.w	r2, r0, #4294967295
 8001024:	f080 80d7 	bcs.w	80011d6 <__udivmoddi4+0x232>
 8001028:	459c      	cmp	ip, r3
 800102a:	f240 80d4 	bls.w	80011d6 <__udivmoddi4+0x232>
 800102e:	443b      	add	r3, r7
 8001030:	3802      	subs	r0, #2
 8001032:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001036:	2100      	movs	r1, #0
 8001038:	eba3 030c 	sub.w	r3, r3, ip
 800103c:	b11d      	cbz	r5, 8001046 <__udivmoddi4+0xa2>
 800103e:	2200      	movs	r2, #0
 8001040:	40f3      	lsrs	r3, r6
 8001042:	e9c5 3200 	strd	r3, r2, [r5]
 8001046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800104a:	428b      	cmp	r3, r1
 800104c:	d905      	bls.n	800105a <__udivmoddi4+0xb6>
 800104e:	b10d      	cbz	r5, 8001054 <__udivmoddi4+0xb0>
 8001050:	e9c5 0100 	strd	r0, r1, [r5]
 8001054:	2100      	movs	r1, #0
 8001056:	4608      	mov	r0, r1
 8001058:	e7f5      	b.n	8001046 <__udivmoddi4+0xa2>
 800105a:	fab3 f183 	clz	r1, r3
 800105e:	2900      	cmp	r1, #0
 8001060:	d146      	bne.n	80010f0 <__udivmoddi4+0x14c>
 8001062:	4573      	cmp	r3, lr
 8001064:	d302      	bcc.n	800106c <__udivmoddi4+0xc8>
 8001066:	4282      	cmp	r2, r0
 8001068:	f200 8108 	bhi.w	800127c <__udivmoddi4+0x2d8>
 800106c:	1a84      	subs	r4, r0, r2
 800106e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001072:	2001      	movs	r0, #1
 8001074:	4690      	mov	r8, r2
 8001076:	2d00      	cmp	r5, #0
 8001078:	d0e5      	beq.n	8001046 <__udivmoddi4+0xa2>
 800107a:	e9c5 4800 	strd	r4, r8, [r5]
 800107e:	e7e2      	b.n	8001046 <__udivmoddi4+0xa2>
 8001080:	2a00      	cmp	r2, #0
 8001082:	f000 8091 	beq.w	80011a8 <__udivmoddi4+0x204>
 8001086:	fab2 f682 	clz	r6, r2
 800108a:	2e00      	cmp	r6, #0
 800108c:	f040 80a5 	bne.w	80011da <__udivmoddi4+0x236>
 8001090:	1a8a      	subs	r2, r1, r2
 8001092:	2101      	movs	r1, #1
 8001094:	0c03      	lsrs	r3, r0, #16
 8001096:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800109a:	b280      	uxth	r0, r0
 800109c:	b2bc      	uxth	r4, r7
 800109e:	fbb2 fcfe 	udiv	ip, r2, lr
 80010a2:	fb0e 221c 	mls	r2, lr, ip, r2
 80010a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010aa:	fb04 f20c 	mul.w	r2, r4, ip
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d907      	bls.n	80010c2 <__udivmoddi4+0x11e>
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80010b8:	d202      	bcs.n	80010c0 <__udivmoddi4+0x11c>
 80010ba:	429a      	cmp	r2, r3
 80010bc:	f200 80e3 	bhi.w	8001286 <__udivmoddi4+0x2e2>
 80010c0:	46c4      	mov	ip, r8
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	fbb3 f2fe 	udiv	r2, r3, lr
 80010c8:	fb0e 3312 	mls	r3, lr, r2, r3
 80010cc:	fb02 f404 	mul.w	r4, r2, r4
 80010d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80010d4:	429c      	cmp	r4, r3
 80010d6:	d907      	bls.n	80010e8 <__udivmoddi4+0x144>
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	f102 30ff 	add.w	r0, r2, #4294967295
 80010de:	d202      	bcs.n	80010e6 <__udivmoddi4+0x142>
 80010e0:	429c      	cmp	r4, r3
 80010e2:	f200 80cd 	bhi.w	8001280 <__udivmoddi4+0x2dc>
 80010e6:	4602      	mov	r2, r0
 80010e8:	1b1b      	subs	r3, r3, r4
 80010ea:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80010ee:	e7a5      	b.n	800103c <__udivmoddi4+0x98>
 80010f0:	f1c1 0620 	rsb	r6, r1, #32
 80010f4:	408b      	lsls	r3, r1
 80010f6:	fa22 f706 	lsr.w	r7, r2, r6
 80010fa:	431f      	orrs	r7, r3
 80010fc:	fa2e fa06 	lsr.w	sl, lr, r6
 8001100:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001104:	fbba f8f9 	udiv	r8, sl, r9
 8001108:	fa0e fe01 	lsl.w	lr, lr, r1
 800110c:	fa20 f306 	lsr.w	r3, r0, r6
 8001110:	fb09 aa18 	mls	sl, r9, r8, sl
 8001114:	fa1f fc87 	uxth.w	ip, r7
 8001118:	ea43 030e 	orr.w	r3, r3, lr
 800111c:	fa00 fe01 	lsl.w	lr, r0, r1
 8001120:	fb08 f00c 	mul.w	r0, r8, ip
 8001124:	0c1c      	lsrs	r4, r3, #16
 8001126:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800112a:	42a0      	cmp	r0, r4
 800112c:	fa02 f201 	lsl.w	r2, r2, r1
 8001130:	d90a      	bls.n	8001148 <__udivmoddi4+0x1a4>
 8001132:	193c      	adds	r4, r7, r4
 8001134:	f108 3aff 	add.w	sl, r8, #4294967295
 8001138:	f080 809e 	bcs.w	8001278 <__udivmoddi4+0x2d4>
 800113c:	42a0      	cmp	r0, r4
 800113e:	f240 809b 	bls.w	8001278 <__udivmoddi4+0x2d4>
 8001142:	f1a8 0802 	sub.w	r8, r8, #2
 8001146:	443c      	add	r4, r7
 8001148:	1a24      	subs	r4, r4, r0
 800114a:	b298      	uxth	r0, r3
 800114c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001150:	fb09 4413 	mls	r4, r9, r3, r4
 8001154:	fb03 fc0c 	mul.w	ip, r3, ip
 8001158:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800115c:	45a4      	cmp	ip, r4
 800115e:	d909      	bls.n	8001174 <__udivmoddi4+0x1d0>
 8001160:	193c      	adds	r4, r7, r4
 8001162:	f103 30ff 	add.w	r0, r3, #4294967295
 8001166:	f080 8085 	bcs.w	8001274 <__udivmoddi4+0x2d0>
 800116a:	45a4      	cmp	ip, r4
 800116c:	f240 8082 	bls.w	8001274 <__udivmoddi4+0x2d0>
 8001170:	3b02      	subs	r3, #2
 8001172:	443c      	add	r4, r7
 8001174:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001178:	eba4 040c 	sub.w	r4, r4, ip
 800117c:	fba0 8c02 	umull	r8, ip, r0, r2
 8001180:	4564      	cmp	r4, ip
 8001182:	4643      	mov	r3, r8
 8001184:	46e1      	mov	r9, ip
 8001186:	d364      	bcc.n	8001252 <__udivmoddi4+0x2ae>
 8001188:	d061      	beq.n	800124e <__udivmoddi4+0x2aa>
 800118a:	b15d      	cbz	r5, 80011a4 <__udivmoddi4+0x200>
 800118c:	ebbe 0203 	subs.w	r2, lr, r3
 8001190:	eb64 0409 	sbc.w	r4, r4, r9
 8001194:	fa04 f606 	lsl.w	r6, r4, r6
 8001198:	fa22 f301 	lsr.w	r3, r2, r1
 800119c:	431e      	orrs	r6, r3
 800119e:	40cc      	lsrs	r4, r1
 80011a0:	e9c5 6400 	strd	r6, r4, [r5]
 80011a4:	2100      	movs	r1, #0
 80011a6:	e74e      	b.n	8001046 <__udivmoddi4+0xa2>
 80011a8:	fbb1 fcf2 	udiv	ip, r1, r2
 80011ac:	0c01      	lsrs	r1, r0, #16
 80011ae:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80011b2:	b280      	uxth	r0, r0
 80011b4:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80011b8:	463b      	mov	r3, r7
 80011ba:	fbb1 f1f7 	udiv	r1, r1, r7
 80011be:	4638      	mov	r0, r7
 80011c0:	463c      	mov	r4, r7
 80011c2:	46b8      	mov	r8, r7
 80011c4:	46be      	mov	lr, r7
 80011c6:	2620      	movs	r6, #32
 80011c8:	eba2 0208 	sub.w	r2, r2, r8
 80011cc:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80011d0:	e765      	b.n	800109e <__udivmoddi4+0xfa>
 80011d2:	4601      	mov	r1, r0
 80011d4:	e717      	b.n	8001006 <__udivmoddi4+0x62>
 80011d6:	4610      	mov	r0, r2
 80011d8:	e72b      	b.n	8001032 <__udivmoddi4+0x8e>
 80011da:	f1c6 0120 	rsb	r1, r6, #32
 80011de:	fa2e fc01 	lsr.w	ip, lr, r1
 80011e2:	40b7      	lsls	r7, r6
 80011e4:	fa0e fe06 	lsl.w	lr, lr, r6
 80011e8:	fa20 f101 	lsr.w	r1, r0, r1
 80011ec:	ea41 010e 	orr.w	r1, r1, lr
 80011f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011f4:	fbbc f8fe 	udiv	r8, ip, lr
 80011f8:	b2bc      	uxth	r4, r7
 80011fa:	fb0e cc18 	mls	ip, lr, r8, ip
 80011fe:	fb08 f904 	mul.w	r9, r8, r4
 8001202:	0c0a      	lsrs	r2, r1, #16
 8001204:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001208:	40b0      	lsls	r0, r6
 800120a:	4591      	cmp	r9, r2
 800120c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001210:	b280      	uxth	r0, r0
 8001212:	d93e      	bls.n	8001292 <__udivmoddi4+0x2ee>
 8001214:	18ba      	adds	r2, r7, r2
 8001216:	f108 3cff 	add.w	ip, r8, #4294967295
 800121a:	d201      	bcs.n	8001220 <__udivmoddi4+0x27c>
 800121c:	4591      	cmp	r9, r2
 800121e:	d81f      	bhi.n	8001260 <__udivmoddi4+0x2bc>
 8001220:	eba2 0209 	sub.w	r2, r2, r9
 8001224:	fbb2 f9fe 	udiv	r9, r2, lr
 8001228:	fb09 f804 	mul.w	r8, r9, r4
 800122c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001230:	b28a      	uxth	r2, r1
 8001232:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001236:	4542      	cmp	r2, r8
 8001238:	d229      	bcs.n	800128e <__udivmoddi4+0x2ea>
 800123a:	18ba      	adds	r2, r7, r2
 800123c:	f109 31ff 	add.w	r1, r9, #4294967295
 8001240:	d2c2      	bcs.n	80011c8 <__udivmoddi4+0x224>
 8001242:	4542      	cmp	r2, r8
 8001244:	d2c0      	bcs.n	80011c8 <__udivmoddi4+0x224>
 8001246:	f1a9 0102 	sub.w	r1, r9, #2
 800124a:	443a      	add	r2, r7
 800124c:	e7bc      	b.n	80011c8 <__udivmoddi4+0x224>
 800124e:	45c6      	cmp	lr, r8
 8001250:	d29b      	bcs.n	800118a <__udivmoddi4+0x1e6>
 8001252:	ebb8 0302 	subs.w	r3, r8, r2
 8001256:	eb6c 0c07 	sbc.w	ip, ip, r7
 800125a:	3801      	subs	r0, #1
 800125c:	46e1      	mov	r9, ip
 800125e:	e794      	b.n	800118a <__udivmoddi4+0x1e6>
 8001260:	eba7 0909 	sub.w	r9, r7, r9
 8001264:	444a      	add	r2, r9
 8001266:	fbb2 f9fe 	udiv	r9, r2, lr
 800126a:	f1a8 0c02 	sub.w	ip, r8, #2
 800126e:	fb09 f804 	mul.w	r8, r9, r4
 8001272:	e7db      	b.n	800122c <__udivmoddi4+0x288>
 8001274:	4603      	mov	r3, r0
 8001276:	e77d      	b.n	8001174 <__udivmoddi4+0x1d0>
 8001278:	46d0      	mov	r8, sl
 800127a:	e765      	b.n	8001148 <__udivmoddi4+0x1a4>
 800127c:	4608      	mov	r0, r1
 800127e:	e6fa      	b.n	8001076 <__udivmoddi4+0xd2>
 8001280:	443b      	add	r3, r7
 8001282:	3a02      	subs	r2, #2
 8001284:	e730      	b.n	80010e8 <__udivmoddi4+0x144>
 8001286:	f1ac 0c02 	sub.w	ip, ip, #2
 800128a:	443b      	add	r3, r7
 800128c:	e719      	b.n	80010c2 <__udivmoddi4+0x11e>
 800128e:	4649      	mov	r1, r9
 8001290:	e79a      	b.n	80011c8 <__udivmoddi4+0x224>
 8001292:	eba2 0209 	sub.w	r2, r2, r9
 8001296:	fbb2 f9fe 	udiv	r9, r2, lr
 800129a:	46c4      	mov	ip, r8
 800129c:	fb09 f804 	mul.w	r8, r9, r4
 80012a0:	e7c4      	b.n	800122c <__udivmoddi4+0x288>
 80012a2:	bf00      	nop

080012a4 <__aeabi_idiv0>:
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	  /* Initialize mems driver interface */
	  dev_ctx.write_reg = platform_write;
 80012ae:	4b4b      	ldr	r3, [pc, #300]	@ (80013dc <main+0x134>)
 80012b0:	4a4b      	ldr	r2, [pc, #300]	@ (80013e0 <main+0x138>)
 80012b2:	601a      	str	r2, [r3, #0]
	  dev_ctx.read_reg = platform_read;
 80012b4:	4b49      	ldr	r3, [pc, #292]	@ (80013dc <main+0x134>)
 80012b6:	4a4b      	ldr	r2, [pc, #300]	@ (80013e4 <main+0x13c>)
 80012b8:	605a      	str	r2, [r3, #4]
	  dev_ctx.handle = &hi2c1;
 80012ba:	4b48      	ldr	r3, [pc, #288]	@ (80013dc <main+0x134>)
 80012bc:	4a4a      	ldr	r2, [pc, #296]	@ (80013e8 <main+0x140>)
 80012be:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c0:	f000 fe1d 	bl	8001efe <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c4:	f000 f8a4 	bl	8001410 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  iks01a3_i2c_stuck_quirk();
 80012c8:	f000 fb18 	bl	80018fc <iks01a3_i2c_stuck_quirk>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012cc:	f000 f9e2 	bl	8001694 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012d0:	f000 f9b6 	bl	8001640 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012d4:	f000 f8ea 	bl	80014ac <MX_I2C1_Init>
  MX_TIM3_Init();
 80012d8:	f000 f94c 	bl	8001574 <MX_TIM3_Init>
  MX_SPI1_Init();
 80012dc:	f000 f914 	bl	8001508 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("Init SPI \n");
 80012e0:	4842      	ldr	r0, [pc, #264]	@ (80013ec <main+0x144>)
 80012e2:	f005 f84f 	bl	8006384 <puts>
  MAX7219_Init();
 80012e6:	f004 fa47 	bl	8005778 <MAX7219_Init>
  printf("Clear \n");
 80012ea:	4841      	ldr	r0, [pc, #260]	@ (80013f0 <main+0x148>)
 80012ec:	f005 f84a 	bl	8006384 <puts>
  MAX7219_Clear();
 80012f0:	f004 fa79 	bl	80057e6 <MAX7219_Clear>

  KIN1_InitCycleCounter();
 80012f4:	4b3f      	ldr	r3, [pc, #252]	@ (80013f4 <main+0x14c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a3e      	ldr	r2, [pc, #248]	@ (80013f4 <main+0x14c>)
 80012fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012fe:	6013      	str	r3, [r2, #0]
  KIN1_EnableCycleCounter();
 8001300:	4b3d      	ldr	r3, [pc, #244]	@ (80013f8 <main+0x150>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a3c      	ldr	r2, [pc, #240]	@ (80013f8 <main+0x150>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6013      	str	r3, [r2, #0]
  lis2mdl_initialize();
 800130c:	f000 faba 	bl	8001884 <lis2mdl_initialize>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (drdy) {
 8001310:	4b3a      	ldr	r3, [pc, #232]	@ (80013fc <main+0x154>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0fa      	beq.n	8001310 <main+0x68>
      /* Reset data ready condition */
      drdy = 0;
 800131a:	4b38      	ldr	r3, [pc, #224]	@ (80013fc <main+0x154>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
      /* Read magnetic field data */
      memset(data_raw_magnetic, 0x00, 3 * sizeof(int16_t));
 8001320:	2206      	movs	r2, #6
 8001322:	2100      	movs	r1, #0
 8001324:	4836      	ldr	r0, [pc, #216]	@ (8001400 <main+0x158>)
 8001326:	f005 f90d 	bl	8006544 <memset>
      lis2mdl_magnetic_raw_get(&dev_ctx, data_raw_magnetic);
 800132a:	4935      	ldr	r1, [pc, #212]	@ (8001400 <main+0x158>)
 800132c:	482b      	ldr	r0, [pc, #172]	@ (80013dc <main+0x134>)
 800132e:	f004 f94c 	bl	80055ca <lis2mdl_magnetic_raw_get>
      for (uint8_t i = 0; i < AXIS; i++) {
 8001332:	2300      	movs	r3, #0
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	e015      	b.n	8001364 <main+0xbc>
        neai_buffer[(AXIS * drdy_counter) + i] = lis2mdl_from_lsb_to_mgauss(data_raw_magnetic[i]);
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	4a31      	ldr	r2, [pc, #196]	@ (8001400 <main+0x158>)
 800133c:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001340:	4b30      	ldr	r3, [pc, #192]	@ (8001404 <main+0x15c>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	441a      	add	r2, r3
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	18d4      	adds	r4, r2, r3
 8001350:	4608      	mov	r0, r1
 8001352:	f004 f867 	bl	8005424 <lis2mdl_from_lsb_to_mgauss>
 8001356:	4603      	mov	r3, r0
 8001358:	4a2b      	ldr	r2, [pc, #172]	@ (8001408 <main+0x160>)
 800135a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
      for (uint8_t i = 0; i < AXIS; i++) {
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	3301      	adds	r3, #1
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d9e6      	bls.n	8001338 <main+0x90>
      }
      drdy_counter++;
 800136a:	4b26      	ldr	r3, [pc, #152]	@ (8001404 <main+0x15c>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	3301      	adds	r3, #1
 8001370:	b29a      	uxth	r2, r3
 8001372:	4b24      	ldr	r3, [pc, #144]	@ (8001404 <main+0x15c>)
 8001374:	801a      	strh	r2, [r3, #0]
      if (drdy_counter >= SAMPLES) {
 8001376:	4b23      	ldr	r3, [pc, #140]	@ (8001404 <main+0x15c>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	2b7f      	cmp	r3, #127	@ 0x7f
 800137c:	d9c8      	bls.n	8001310 <main+0x68>
        /* Set device in power down mode */
        lis2mdl_operating_mode_set(&dev_ctx, LIS2MDL_POWER_DOWN);
 800137e:	2102      	movs	r1, #2
 8001380:	4816      	ldr	r0, [pc, #88]	@ (80013dc <main+0x134>)
 8001382:	f004 f864 	bl	800544e <lis2mdl_operating_mode_set>
        }-*/
        neai_state = neai_classification(neai_buffer, class_output_buffer, &id_class);
        printf("Class: %s. NEAI classification return: %d.\r\n", id2class[id_class], neai_state);
        //Direction(id2class[id_class]);
#else
        for (uint16_t i = 0; i < AXIS * SAMPLES; i++) {
 8001386:	2300      	movs	r3, #0
 8001388:	80bb      	strh	r3, [r7, #4]
 800138a:	e00e      	b.n	80013aa <main+0x102>
          printf("%.3f ", neai_buffer[i]);
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	4a1e      	ldr	r2, [pc, #120]	@ (8001408 <main+0x160>)
 8001390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f85f 	bl	8000458 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	481b      	ldr	r0, [pc, #108]	@ (800140c <main+0x164>)
 80013a0:	f004 ff80 	bl	80062a4 <iprintf>
        for (uint16_t i = 0; i < AXIS * SAMPLES; i++) {
 80013a4:	88bb      	ldrh	r3, [r7, #4]
 80013a6:	3301      	adds	r3, #1
 80013a8:	80bb      	strh	r3, [r7, #4]
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80013b0:	d3ec      	bcc.n	800138c <main+0xe4>
        }
        printf("\n");
 80013b2:	200a      	movs	r0, #10
 80013b4:	f004 ff88 	bl	80062c8 <putchar>
#endif
        /* Reset drdy_counter in order to get a new buffer */
        drdy_counter = 0;
 80013b8:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <main+0x15c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	801a      	strh	r2, [r3, #0]
        /* Clean neai buffer */
        memset(neai_buffer, 0x00, AXIS * SAMPLES * sizeof(float));
 80013be:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80013c2:	2100      	movs	r1, #0
 80013c4:	4810      	ldr	r0, [pc, #64]	@ (8001408 <main+0x160>)
 80013c6:	f005 f8bd 	bl	8006544 <memset>
        /* Set device in continuous mode */
        lis2mdl_operating_mode_set(&dev_ctx, LIS2MDL_CONTINUOUS_MODE);
 80013ca:	2100      	movs	r1, #0
 80013cc:	4803      	ldr	r0, [pc, #12]	@ (80013dc <main+0x134>)
 80013ce:	f004 f83e 	bl	800544e <lis2mdl_operating_mode_set>
        HAL_Delay(20);
 80013d2:	2014      	movs	r0, #20
 80013d4:	f000 fe02 	bl	8001fdc <HAL_Delay>
    if (drdy) {
 80013d8:	e79a      	b.n	8001310 <main+0x68>
 80013da:	bf00      	nop
 80013dc:	20000930 	.word	0x20000930
 80013e0:	08001811 	.word	0x08001811
 80013e4:	0800184b 	.word	0x0800184b
 80013e8:	200001f0 	.word	0x200001f0
 80013ec:	08008300 	.word	0x08008300
 80013f0:	0800830c 	.word	0x0800830c
 80013f4:	e000edfc 	.word	0xe000edfc
 80013f8:	e0001000 	.word	0xe0001000
 80013fc:	2000032c 	.word	0x2000032c
 8001400:	20000324 	.word	0x20000324
 8001404:	2000032e 	.word	0x2000032e
 8001408:	20000330 	.word	0x20000330
 800140c:	08008314 	.word	0x08008314

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b092      	sub	sp, #72	@ 0x48
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	2234      	movs	r2, #52	@ 0x34
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f005 f890 	bl	8006544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001432:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <SystemClock_Config+0x98>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800143a:	4a1b      	ldr	r2, [pc, #108]	@ (80014a8 <SystemClock_Config+0x98>)
 800143c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001440:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001442:	2302      	movs	r3, #2
 8001444:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001446:	2301      	movs	r3, #1
 8001448:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144a:	2310      	movs	r3, #16
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144e:	2302      	movs	r3, #2
 8001450:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001452:	2300      	movs	r3, #0
 8001454:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001456:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800145a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800145c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001460:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4618      	mov	r0, r3
 8001468:	f002 f8cc 	bl	8003604 <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001472:	f000 fa93 	bl	800199c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147a:	2303      	movs	r3, #3
 800147c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	2101      	movs	r1, #1
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fbe8 	bl	8003c64 <HAL_RCC_ClockConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800149a:	f000 fa7f 	bl	800199c <Error_Handler>
  }
}
 800149e:	bf00      	nop
 80014a0:	3748      	adds	r7, #72	@ 0x48
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40007000 	.word	0x40007000

080014ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014b2:	4a13      	ldr	r2, [pc, #76]	@ (8001500 <MX_I2C1_Init+0x54>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014b6:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014b8:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <MX_I2C1_Init+0x58>)
 80014ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014dc:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014ea:	f001 f867 	bl	80025bc <HAL_I2C_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014f4:	f000 fa52 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200001f0 	.word	0x200001f0
 8001500:	40005400 	.word	0x40005400
 8001504:	00061a80 	.word	0x00061a80

08001508 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800150c:	4b17      	ldr	r3, [pc, #92]	@ (800156c <MX_SPI1_Init+0x64>)
 800150e:	4a18      	ldr	r2, [pc, #96]	@ (8001570 <MX_SPI1_Init+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001512:	4b16      	ldr	r3, [pc, #88]	@ (800156c <MX_SPI1_Init+0x64>)
 8001514:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001518:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800151a:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_SPI1_Init+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <MX_SPI1_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_SPI1_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_SPI1_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_SPI1_Init+0x64>)
 8001534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001538:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_SPI1_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <MX_SPI1_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_SPI1_Init+0x64>)
 8001548:	2200      	movs	r2, #0
 800154a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <MX_SPI1_Init+0x64>)
 800154e:	2200      	movs	r2, #0
 8001550:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_SPI1_Init+0x64>)
 8001554:	220a      	movs	r2, #10
 8001556:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	@ (800156c <MX_SPI1_Init+0x64>)
 800155a:	f002 fe49 	bl	80041f0 <HAL_SPI_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001564:	f000 fa1a 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000244 	.word	0x20000244
 8001570:	40013000 	.word	0x40013000

08001574 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001590:	4b29      	ldr	r3, [pc, #164]	@ (8001638 <MX_TIM3_Init+0xc4>)
 8001592:	4a2a      	ldr	r2, [pc, #168]	@ (800163c <MX_TIM3_Init+0xc8>)
 8001594:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8001596:	4b28      	ldr	r3, [pc, #160]	@ (8001638 <MX_TIM3_Init+0xc4>)
 8001598:	221f      	movs	r2, #31
 800159a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159c:	4b26      	ldr	r3, [pc, #152]	@ (8001638 <MX_TIM3_Init+0xc4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2278;
 80015a2:	4b25      	ldr	r3, [pc, #148]	@ (8001638 <MX_TIM3_Init+0xc4>)
 80015a4:	f640 02e6 	movw	r2, #2278	@ 0x8e6
 80015a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015aa:	4b23      	ldr	r3, [pc, #140]	@ (8001638 <MX_TIM3_Init+0xc4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b0:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <MX_TIM3_Init+0xc4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015b6:	4820      	ldr	r0, [pc, #128]	@ (8001638 <MX_TIM3_Init+0xc4>)
 80015b8:	f003 f8c4 	bl	8004744 <HAL_TIM_PWM_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80015c2:	f000 f9eb 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	4619      	mov	r1, r3
 80015d4:	4818      	ldr	r0, [pc, #96]	@ (8001638 <MX_TIM3_Init+0xc4>)
 80015d6:	f003 fc1d 	bl	8004e14 <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80015e0:	f000 f9dc 	bl	800199c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e4:	2360      	movs	r3, #96	@ 0x60
 80015e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80015e8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80015ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f6:	463b      	mov	r3, r7
 80015f8:	2200      	movs	r2, #0
 80015fa:	4619      	mov	r1, r3
 80015fc:	480e      	ldr	r0, [pc, #56]	@ (8001638 <MX_TIM3_Init+0xc4>)
 80015fe:	f003 f9ad 	bl	800495c <HAL_TIM_PWM_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001608:	f000 f9c8 	bl	800199c <Error_Handler>
  }
  sConfigOC.Pulse = 1139;
 800160c:	f240 4373 	movw	r3, #1139	@ 0x473
 8001610:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001612:	463b      	mov	r3, r7
 8001614:	2204      	movs	r2, #4
 8001616:	4619      	mov	r1, r3
 8001618:	4807      	ldr	r0, [pc, #28]	@ (8001638 <MX_TIM3_Init+0xc4>)
 800161a:	f003 f99f 	bl	800495c <HAL_TIM_PWM_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001624:	f000 f9ba 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001628:	4803      	ldr	r0, [pc, #12]	@ (8001638 <MX_TIM3_Init+0xc4>)
 800162a:	f000 fa9b 	bl	8001b64 <HAL_TIM_MspPostInit>

}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000029c 	.word	0x2000029c
 800163c:	40000400 	.word	0x40000400

08001640 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 8001646:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <MX_USART2_UART_Init+0x50>)
 8001648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800164a:	4b10      	ldr	r3, [pc, #64]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 800164c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800165e:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b09      	ldr	r3, [pc, #36]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b08      	ldr	r3, [pc, #32]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 8001678:	f003 fc2a 	bl	8004ed0 <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001682:	f000 f98b 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200002dc 	.word	0x200002dc
 8001690:	40004400 	.word	0x40004400

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	@ 0x28
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b40      	ldr	r3, [pc, #256]	@ (80017ac <MX_GPIO_Init+0x118>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a3f      	ldr	r2, [pc, #252]	@ (80017ac <MX_GPIO_Init+0x118>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	61d3      	str	r3, [r2, #28]
 80016b6:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <MX_GPIO_Init+0x118>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016c2:	4b3a      	ldr	r3, [pc, #232]	@ (80017ac <MX_GPIO_Init+0x118>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a39      	ldr	r2, [pc, #228]	@ (80017ac <MX_GPIO_Init+0x118>)
 80016c8:	f043 0320 	orr.w	r3, r3, #32
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b37      	ldr	r3, [pc, #220]	@ (80017ac <MX_GPIO_Init+0x118>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 0320 	and.w	r3, r3, #32
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b34      	ldr	r3, [pc, #208]	@ (80017ac <MX_GPIO_Init+0x118>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a33      	ldr	r2, [pc, #204]	@ (80017ac <MX_GPIO_Init+0x118>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b31      	ldr	r3, [pc, #196]	@ (80017ac <MX_GPIO_Init+0x118>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4b2e      	ldr	r3, [pc, #184]	@ (80017ac <MX_GPIO_Init+0x118>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a2d      	ldr	r2, [pc, #180]	@ (80017ac <MX_GPIO_Init+0x118>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <MX_GPIO_Init+0x118>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001710:	4827      	ldr	r0, [pc, #156]	@ (80017b0 <MX_GPIO_Init+0x11c>)
 8001712:	f000 ff23 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001716:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800171c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4821      	ldr	r0, [pc, #132]	@ (80017b4 <MX_GPIO_Init+0x120>)
 800172e:	f000 fd85 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS2MDL_INT_Pin */
  GPIO_InitStruct.Pin = LIS2MDL_INT_Pin;
 8001732:	2310      	movs	r3, #16
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001736:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIS2MDL_INT_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	481a      	ldr	r0, [pc, #104]	@ (80017b0 <MX_GPIO_Init+0x11c>)
 8001748:	f000 fd78 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS2DW12_INT_Pin */
  GPIO_InitStruct.Pin = LIS2DW12_INT_Pin;
 800174c:	2301      	movs	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001750:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIS2DW12_INT_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4815      	ldr	r0, [pc, #84]	@ (80017b8 <MX_GPIO_Init+0x124>)
 8001762:	f000 fd6b 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001766:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <MX_GPIO_Init+0x11c>)
 8001780:	f000 fd5c 	bl	800223c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	200a      	movs	r0, #10
 800178a:	f000 fd20 	bl	80021ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800178e:	200a      	movs	r0, #10
 8001790:	f000 fd39 	bl	8002206 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	2028      	movs	r0, #40	@ 0x28
 800179a:	f000 fd18 	bl	80021ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800179e:	2028      	movs	r0, #40	@ 0x28
 80017a0:	f000 fd31 	bl	8002206 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	@ 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000
 80017b4:	40020800 	.word	0x40020800
 80017b8:	40020400 	.word	0x40020400

080017bc <__io_putchar>:
  * @brief  Redirecting stdout to USART2 which is connected on the STLINK port
  * @retval
  * @param
  */
int __io_putchar(int ch)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80017ca:	f107 010c 	add.w	r1, r7, #12
 80017ce:	230a      	movs	r3, #10
 80017d0:	2201      	movs	r2, #1
 80017d2:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <__io_putchar+0x28>)
 80017d4:	f003 fbcc 	bl	8004f70 <HAL_UART_Transmit>
 return ch;
 80017d8:	687b      	ldr	r3, [r7, #4]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200002dc 	.word	0x200002dc

080017e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin) {
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d103      	bne.n	8001800 <HAL_GPIO_EXTI_Callback+0x18>
  case LIS2MDL_INT_Pin:
    drdy = 1;
 80017f8:	4b04      	ldr	r3, [pc, #16]	@ (800180c <HAL_GPIO_EXTI_Callback+0x24>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
    break;
 80017fe:	bf00      	nop
  }
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000032c 	.word	0x2000032c

08001810 <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af04      	add	r7, sp, #16
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	461a      	mov	r2, r3
 800181c:	460b      	mov	r3, r1
 800181e:	72fb      	strb	r3, [r7, #11]
 8001820:	4613      	mov	r3, r2
 8001822:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LIS2MDL_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001824:	7afb      	ldrb	r3, [r7, #11]
 8001826:	b29a      	uxth	r2, r3
 8001828:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	893b      	ldrh	r3, [r7, #8]
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2301      	movs	r3, #1
 8001838:	213d      	movs	r1, #61	@ 0x3d
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f001 f802 	bl	8002844 <HAL_I2C_Mem_Write>
  return 0;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b088      	sub	sp, #32
 800184e:	af04      	add	r7, sp, #16
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	461a      	mov	r2, r3
 8001856:	460b      	mov	r3, r1
 8001858:	72fb      	strb	r3, [r7, #11]
 800185a:	4613      	mov	r3, r2
 800185c:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LIS2MDL_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800185e:	7afb      	ldrb	r3, [r7, #11]
 8001860:	b29a      	uxth	r2, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001866:	9302      	str	r3, [sp, #8]
 8001868:	893b      	ldrh	r3, [r7, #8]
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2301      	movs	r3, #1
 8001872:	213d      	movs	r1, #61	@ 0x3d
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f001 f8df 	bl	8002a38 <HAL_I2C_Mem_Read>
  return 0;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <lis2mdl_initialize>:
 *
 * @return No
 *
 */
static void lis2mdl_initialize()
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Check device ID */
  whoamI = 0;
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <lis2mdl_initialize+0x6c>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]

  do {
    HAL_Delay(20);
 800188e:	2014      	movs	r0, #20
 8001890:	f000 fba4 	bl	8001fdc <HAL_Delay>
    lis2mdl_device_id_get(&dev_ctx, &whoamI);
 8001894:	4916      	ldr	r1, [pc, #88]	@ (80018f0 <lis2mdl_initialize+0x6c>)
 8001896:	4817      	ldr	r0, [pc, #92]	@ (80018f4 <lis2mdl_initialize+0x70>)
 8001898:	f003 fedf 	bl	800565a <lis2mdl_device_id_get>
  } while(whoamI != LIS2MDL_ID);
 800189c:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <lis2mdl_initialize+0x6c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b40      	cmp	r3, #64	@ 0x40
 80018a2:	d1f4      	bne.n	800188e <lis2mdl_initialize+0xa>

  /* Restore default configuration */
  lis2mdl_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80018a4:	2101      	movs	r1, #1
 80018a6:	4813      	ldr	r0, [pc, #76]	@ (80018f4 <lis2mdl_initialize+0x70>)
 80018a8:	f003 fee8 	bl	800567c <lis2mdl_reset_set>

  do {
    lis2mdl_reset_get(&dev_ctx, &rst);
 80018ac:	4912      	ldr	r1, [pc, #72]	@ (80018f8 <lis2mdl_initialize+0x74>)
 80018ae:	4811      	ldr	r0, [pc, #68]	@ (80018f4 <lis2mdl_initialize+0x70>)
 80018b0:	f003 ff0a 	bl	80056c8 <lis2mdl_reset_get>
  } while (rst);
 80018b4:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <lis2mdl_initialize+0x74>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f7      	bne.n	80018ac <lis2mdl_initialize+0x28>

  /* Enable Block Data Update */
  lis2mdl_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80018bc:	2101      	movs	r1, #1
 80018be:	480d      	ldr	r0, [pc, #52]	@ (80018f4 <lis2mdl_initialize+0x70>)
 80018c0:	f003 fe5d 	bl	800557e <lis2mdl_block_data_update_set>
  /* Set Output Data Rate */
  lis2mdl_data_rate_set(&dev_ctx, MAGNETOMETER_ODR);
 80018c4:	2103      	movs	r1, #3
 80018c6:	480b      	ldr	r0, [pc, #44]	@ (80018f4 <lis2mdl_initialize+0x70>)
 80018c8:	f003 fde7 	bl	800549a <lis2mdl_data_rate_set>
  /* Set / Reset sensor mode */
  lis2mdl_set_rst_mode_set(&dev_ctx, LIS2MDL_SENS_OFF_CANC_EVERY_ODR);
 80018cc:	2101      	movs	r1, #1
 80018ce:	4809      	ldr	r0, [pc, #36]	@ (80018f4 <lis2mdl_initialize+0x70>)
 80018d0:	f003 fe2f 	bl	8005532 <lis2mdl_set_rst_mode_set>
  /* Enable temperature compensation */
  lis2mdl_offset_temp_comp_set(&dev_ctx, PROPERTY_ENABLE);
 80018d4:	2101      	movs	r1, #1
 80018d6:	4807      	ldr	r0, [pc, #28]	@ (80018f4 <lis2mdl_initialize+0x70>)
 80018d8:	f003 fe05 	bl	80054e6 <lis2mdl_offset_temp_comp_set>
  /* Set device in continuous mode */
  lis2mdl_operating_mode_set(&dev_ctx, LIS2MDL_CONTINUOUS_MODE);
 80018dc:	2100      	movs	r1, #0
 80018de:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <lis2mdl_initialize+0x70>)
 80018e0:	f003 fdb5 	bl	800544e <lis2mdl_operating_mode_set>
  /* Enable interrupt generation on new data ready */
  lis2mdl_drdy_on_pin_set(&dev_ctx, PROPERTY_ENABLE);
 80018e4:	2101      	movs	r1, #1
 80018e6:	4803      	ldr	r0, [pc, #12]	@ (80018f4 <lis2mdl_initialize+0x70>)
 80018e8:	f003 ff07 	bl	80056fa <lis2mdl_drdy_on_pin_set>
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	2000032a 	.word	0x2000032a
 80018f4:	20000930 	.word	0x20000930
 80018f8:	2000032b 	.word	0x2000032b

080018fc <iks01a3_i2c_stuck_quirk>:
 *
 * As a workaround we simply configure the SCL pin as a GPIO and send a burst
 * of pulses to bring the sensor back to an idle state.
 */
static void iks01a3_i2c_stuck_quirk(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001912:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <iks01a3_i2c_stuck_quirk+0x98>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	4a1f      	ldr	r2, [pc, #124]	@ (8001994 <iks01a3_i2c_stuck_quirk+0x98>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	61d3      	str	r3, [r2, #28]
 800191e:	4b1d      	ldr	r3, [pc, #116]	@ (8001994 <iks01a3_i2c_stuck_quirk+0x98>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]

  /* Configure SCL as a GPIO */
  GPIO_InitStruct.Pin = SCL_PIN;
 800192a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800192e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800193c:	2304      	movs	r3, #4
 800193e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct);
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	4619      	mov	r1, r3
 8001946:	4814      	ldr	r0, [pc, #80]	@ (8001998 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001948:	f000 fc78 	bl	800223c <HAL_GPIO_Init>

  /* Send a burst of pulses on SCL */
  int pulses = 20;
 800194c:	2314      	movs	r3, #20
 800194e:	61fb      	str	r3, [r7, #28]
  do {
    HAL_Delay(1);
 8001950:	2001      	movs	r0, #1
 8001952:	f000 fb43 	bl	8001fdc <HAL_Delay>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800195c:	480e      	ldr	r0, [pc, #56]	@ (8001998 <iks01a3_i2c_stuck_quirk+0x9c>)
 800195e:	f000 fdfd 	bl	800255c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001962:	2001      	movs	r0, #1
 8001964:	f000 fb3a 	bl	8001fdc <HAL_Delay>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8001968:	2201      	movs	r2, #1
 800196a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800196e:	480a      	ldr	r0, [pc, #40]	@ (8001998 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001970:	f000 fdf4 	bl	800255c <HAL_GPIO_WritePin>
  } while (pulses--);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	1e5a      	subs	r2, r3, #1
 8001978:	61fa      	str	r2, [r7, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1e8      	bne.n	8001950 <iks01a3_i2c_stuck_quirk+0x54>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800197e:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <iks01a3_i2c_stuck_quirk+0x98>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <iks01a3_i2c_stuck_quirk+0x98>)
 8001984:	f023 0302 	bic.w	r3, r3, #2
 8001988:	61d3      	str	r3, [r2, #28]
}
 800198a:	bf00      	nop
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40020400 	.word	0x40020400

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80019ae:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <HAL_MspInit+0x5c>)
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	4a14      	ldr	r2, [pc, #80]	@ (8001a04 <HAL_MspInit+0x5c>)
 80019b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80019b8:	6253      	str	r3, [r2, #36]	@ 0x24
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_MspInit+0x5c>)
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <HAL_MspInit+0x5c>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001a04 <HAL_MspInit+0x5c>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6213      	str	r3, [r2, #32]
 80019d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <HAL_MspInit+0x5c>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <HAL_MspInit+0x5c>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	4a08      	ldr	r2, [pc, #32]	@ (8001a04 <HAL_MspInit+0x5c>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e8:	6253      	str	r3, [r2, #36]	@ 0x24
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_MspInit+0x5c>)
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019f6:	2007      	movs	r0, #7
 80019f8:	f000 fbde 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800

08001a08 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	@ 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a17      	ldr	r2, [pc, #92]	@ (8001a84 <HAL_I2C_MspInit+0x7c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d128      	bne.n	8001a7c <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <HAL_I2C_MspInit+0x80>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a16      	ldr	r2, [pc, #88]	@ (8001a88 <HAL_I2C_MspInit+0x80>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <HAL_I2C_MspInit+0x80>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a48:	2312      	movs	r3, #18
 8001a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a54:	2304      	movs	r3, #4
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480b      	ldr	r0, [pc, #44]	@ (8001a8c <HAL_I2C_MspInit+0x84>)
 8001a60:	f000 fbec 	bl	800223c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a64:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <HAL_I2C_MspInit+0x80>)
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	4a07      	ldr	r2, [pc, #28]	@ (8001a88 <HAL_I2C_MspInit+0x80>)
 8001a6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a6e:	6253      	str	r3, [r2, #36]	@ 0x24
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_I2C_MspInit+0x80>)
 8001a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	@ 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40005400 	.word	0x40005400
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020400 	.word	0x40020400

08001a90 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	@ 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a17      	ldr	r2, [pc, #92]	@ (8001b0c <HAL_SPI_MspInit+0x7c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d127      	bne.n	8001b02 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ab2:	4b17      	ldr	r3, [pc, #92]	@ (8001b10 <HAL_SPI_MspInit+0x80>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	4a16      	ldr	r2, [pc, #88]	@ (8001b10 <HAL_SPI_MspInit+0x80>)
 8001ab8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001abc:	6213      	str	r3, [r2, #32]
 8001abe:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <HAL_SPI_MspInit+0x80>)
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_SPI_MspInit+0x80>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a10      	ldr	r2, [pc, #64]	@ (8001b10 <HAL_SPI_MspInit+0x80>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <HAL_SPI_MspInit+0x80>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8001ae2:	23e0      	movs	r3, #224	@ 0xe0
 8001ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001af2:	2305      	movs	r3, #5
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <HAL_SPI_MspInit+0x84>)
 8001afe:	f000 fb9d 	bl	800223c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b02:	bf00      	nop
 8001b04:	3728      	adds	r7, #40	@ 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40013000 	.word	0x40013000
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020000 	.word	0x40020000

08001b18 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0d      	ldr	r2, [pc, #52]	@ (8001b5c <HAL_TIM_PWM_MspInit+0x44>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d113      	bne.n	8001b52 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <HAL_TIM_PWM_MspInit+0x48>)
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b60 <HAL_TIM_PWM_MspInit+0x48>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6253      	str	r3, [r2, #36]	@ 0x24
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_TIM_PWM_MspInit+0x48>)
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	201d      	movs	r0, #29
 8001b48:	f000 fb41 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b4c:	201d      	movs	r0, #29
 8001b4e:	f000 fb5a 	bl	8002206 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40000400 	.word	0x40000400
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	@ 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1f      	ldr	r2, [pc, #124]	@ (8001c00 <HAL_TIM_MspPostInit+0x9c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d137      	bne.n	8001bf6 <HAL_TIM_MspPostInit+0x92>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	4b1f      	ldr	r3, [pc, #124]	@ (8001c04 <HAL_TIM_MspPostInit+0xa0>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001c04 <HAL_TIM_MspPostInit+0xa0>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	61d3      	str	r3, [r2, #28]
 8001b92:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <HAL_TIM_MspPostInit+0xa0>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <HAL_TIM_MspPostInit+0xa0>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a18      	ldr	r2, [pc, #96]	@ (8001c04 <HAL_TIM_MspPostInit+0xa0>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	61d3      	str	r3, [r2, #28]
 8001baa:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <HAL_TIM_MspPostInit+0xa0>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bb6:	2380      	movs	r3, #128	@ 0x80
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480d      	ldr	r0, [pc, #52]	@ (8001c08 <HAL_TIM_MspPostInit+0xa4>)
 8001bd2:	f000 fb33 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001be6:	2302      	movs	r3, #2
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4806      	ldr	r0, [pc, #24]	@ (8001c0c <HAL_TIM_MspPostInit+0xa8>)
 8001bf2:	f000 fb23 	bl	800223c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3728      	adds	r7, #40	@ 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40000400 	.word	0x40000400
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020800 	.word	0x40020800
 8001c0c:	40020400 	.word	0x40020400

08001c10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	@ 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a17      	ldr	r2, [pc, #92]	@ (8001c8c <HAL_UART_MspInit+0x7c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d127      	bne.n	8001c82 <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c32:	4b17      	ldr	r3, [pc, #92]	@ (8001c90 <HAL_UART_MspInit+0x80>)
 8001c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c36:	4a16      	ldr	r2, [pc, #88]	@ (8001c90 <HAL_UART_MspInit+0x80>)
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c3c:	6253      	str	r3, [r2, #36]	@ 0x24
 8001c3e:	4b14      	ldr	r3, [pc, #80]	@ (8001c90 <HAL_UART_MspInit+0x80>)
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <HAL_UART_MspInit+0x80>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a10      	ldr	r2, [pc, #64]	@ (8001c90 <HAL_UART_MspInit+0x80>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	61d3      	str	r3, [r2, #28]
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_UART_MspInit+0x80>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c62:	230c      	movs	r3, #12
 8001c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c72:	2307      	movs	r3, #7
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <HAL_UART_MspInit+0x84>)
 8001c7e:	f000 fadd 	bl	800223c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	@ 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40004400 	.word	0x40004400
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020000 	.word	0x40020000

08001c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <NMI_Handler+0x4>

08001ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <HardFault_Handler+0x4>

08001ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <MemManage_Handler+0x4>

08001cb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce8:	f000 f95c 	bl	8001fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIS2MDL_INT_Pin);
 8001cf4:	2010      	movs	r0, #16
 8001cf6:	f000 fc49 	bl	800258c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d04:	4802      	ldr	r0, [pc, #8]	@ (8001d10 <TIM3_IRQHandler+0x10>)
 8001d06:	f002 fd5c 	bl	80047c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000029c 	.word	0x2000029c

08001d14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001d18:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d1c:	f000 fc36 	bl	800258c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return 1;
 8001d28:	2301      	movs	r3, #1
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <_kill>:

int _kill(int pid, int sig)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d3c:	f004 fc54 	bl	80065e8 <__errno>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2216      	movs	r2, #22
 8001d44:	601a      	str	r2, [r3, #0]
  return -1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <_exit>:

void _exit (int status)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d5a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ffe7 	bl	8001d32 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <_exit+0x12>

08001d68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	e00a      	b.n	8001d90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d7a:	f3af 8000 	nop.w
 8001d7e:	4601      	mov	r1, r0
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	60ba      	str	r2, [r7, #8]
 8001d86:	b2ca      	uxtb	r2, r1
 8001d88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dbf0      	blt.n	8001d7a <_read+0x12>
  }

  return len;
 8001d98:	687b      	ldr	r3, [r7, #4]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	e009      	b.n	8001dc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60ba      	str	r2, [r7, #8]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fcfd 	bl	80017bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	dbf1      	blt.n	8001db4 <_write+0x12>
  }
  return len;
 8001dd0:	687b      	ldr	r3, [r7, #4]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_close>:

int _close(int file)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e00:	605a      	str	r2, [r3, #4]
  return 0;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <_isatty>:

int _isatty(int file)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b085      	sub	sp, #20
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
	...

08001e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e44:	4a14      	ldr	r2, [pc, #80]	@ (8001e98 <_sbrk+0x5c>)
 8001e46:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <_sbrk+0x60>)
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e50:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e58:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <_sbrk+0x64>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ea4 <_sbrk+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d207      	bcs.n	8001e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e6c:	f004 fbbc 	bl	80065e8 <__errno>
 8001e70:	4603      	mov	r3, r0
 8001e72:	220c      	movs	r2, #12
 8001e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e009      	b.n	8001e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e82:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ea0 <_sbrk+0x64>)
 8001e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20014000 	.word	0x20014000
 8001e9c:	00000400 	.word	0x00000400
 8001ea0:	20000940 	.word	0x20000940
 8001ea4:	20000a98 	.word	0x20000a98

08001ea8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <Reset_Handler>:
 8001eb4:	f7ff fff8 	bl	8001ea8 <SystemInit>
 8001eb8:	480b      	ldr	r0, [pc, #44]	@ (8001ee8 <LoopFillZerobss+0xe>)
 8001eba:	490c      	ldr	r1, [pc, #48]	@ (8001eec <LoopFillZerobss+0x12>)
 8001ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef0 <LoopFillZerobss+0x16>)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e002      	b.n	8001ec8 <LoopCopyDataInit>

08001ec2 <CopyDataInit>:
 8001ec2:	58d4      	ldr	r4, [r2, r3]
 8001ec4:	50c4      	str	r4, [r0, r3]
 8001ec6:	3304      	adds	r3, #4

08001ec8 <LoopCopyDataInit>:
 8001ec8:	18c4      	adds	r4, r0, r3
 8001eca:	428c      	cmp	r4, r1
 8001ecc:	d3f9      	bcc.n	8001ec2 <CopyDataInit>
 8001ece:	4a09      	ldr	r2, [pc, #36]	@ (8001ef4 <LoopFillZerobss+0x1a>)
 8001ed0:	4c09      	ldr	r4, [pc, #36]	@ (8001ef8 <LoopFillZerobss+0x1e>)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e001      	b.n	8001eda <LoopFillZerobss>

08001ed6 <FillZerobss>:
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	3204      	adds	r2, #4

08001eda <LoopFillZerobss>:
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d3fb      	bcc.n	8001ed6 <FillZerobss>
 8001ede:	f004 fb89 	bl	80065f4 <__libc_init_array>
 8001ee2:	f7ff f9e1 	bl	80012a8 <main>
 8001ee6:	4770      	bx	lr
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	200001d4 	.word	0x200001d4
 8001ef0:	08008744 	.word	0x08008744
 8001ef4:	200001d4 	.word	0x200001d4
 8001ef8:	20000a94 	.word	0x20000a94

08001efc <ADC1_IRQHandler>:
 8001efc:	e7fe      	b.n	8001efc <ADC1_IRQHandler>

08001efe <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f08:	2003      	movs	r0, #3
 8001f0a:	f000 f955 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f000 f80e 	bl	8001f30 <HAL_InitTick>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	71fb      	strb	r3, [r7, #7]
 8001f1e:	e001      	b.n	8001f24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f20:	f7ff fd42 	bl	80019a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f24:	79fb      	ldrb	r3, [r7, #7]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f3c:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <HAL_InitTick+0x68>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d022      	beq.n	8001f8a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f44:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <HAL_InitTick+0x6c>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <HAL_InitTick+0x68>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 f962 	bl	8002222 <HAL_SYSTICK_Config>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10f      	bne.n	8001f84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	d809      	bhi.n	8001f7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f72:	f000 f92c 	bl	80021ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f76:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <HAL_InitTick+0x70>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	e007      	b.n	8001f8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	e004      	b.n	8001f8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	e001      	b.n	8001f8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000008 	.word	0x20000008
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000004 	.word	0x20000004

08001fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa8:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_IncTick+0x1c>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_IncTick+0x20>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a03      	ldr	r2, [pc, #12]	@ (8001fc0 <HAL_IncTick+0x1c>)
 8001fb4:	6013      	str	r3, [r2, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000944 	.word	0x20000944
 8001fc4:	20000008 	.word	0x20000008

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b02      	ldr	r3, [pc, #8]	@ (8001fd8 <HAL_GetTick+0x10>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	20000944 	.word	0x20000944

08001fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff fff0 	bl	8001fc8 <HAL_GetTick>
 8001fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d004      	beq.n	8002000 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff6:	4b09      	ldr	r3, [pc, #36]	@ (800201c <HAL_Delay+0x40>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002000:	bf00      	nop
 8002002:	f7ff ffe1 	bl	8001fc8 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	429a      	cmp	r2, r3
 8002010:	d8f7      	bhi.n	8002002 <HAL_Delay+0x26>
  {
  }
}
 8002012:	bf00      	nop
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000008 	.word	0x20000008

08002020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002048:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800204c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	@ (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	2b00      	cmp	r3, #0
 8002094:	db0b      	blt.n	80020ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	4906      	ldr	r1, [pc, #24]	@ (80020b8 <__NVIC_EnableIRQ+0x34>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	2001      	movs	r0, #1
 80020a6:	fa00 f202 	lsl.w	r2, r0, r2
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100

080020bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	db0a      	blt.n	80020e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	490c      	ldr	r1, [pc, #48]	@ (8002108 <__NVIC_SetPriority+0x4c>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	440b      	add	r3, r1
 80020e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e4:	e00a      	b.n	80020fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4908      	ldr	r1, [pc, #32]	@ (800210c <__NVIC_SetPriority+0x50>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3b04      	subs	r3, #4
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	440b      	add	r3, r1
 80020fa:	761a      	strb	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	@ 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f1c3 0307 	rsb	r3, r3, #7
 800212a:	2b04      	cmp	r3, #4
 800212c:	bf28      	it	cs
 800212e:	2304      	movcs	r3, #4
 8002130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3304      	adds	r3, #4
 8002136:	2b06      	cmp	r3, #6
 8002138:	d902      	bls.n	8002140 <NVIC_EncodePriority+0x30>
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3b03      	subs	r3, #3
 800213e:	e000      	b.n	8002142 <NVIC_EncodePriority+0x32>
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	401a      	ands	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002158:	f04f 31ff 	mov.w	r1, #4294967295
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43d9      	mvns	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	4313      	orrs	r3, r2
         );
}
 800216a:	4618      	mov	r0, r3
 800216c:	3724      	adds	r7, #36	@ 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002184:	d301      	bcc.n	800218a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002186:	2301      	movs	r3, #1
 8002188:	e00f      	b.n	80021aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218a:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <SysTick_Config+0x40>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002192:	210f      	movs	r1, #15
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f7ff ff90 	bl	80020bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800219c:	4b05      	ldr	r3, [pc, #20]	@ (80021b4 <SysTick_Config+0x40>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a2:	4b04      	ldr	r3, [pc, #16]	@ (80021b4 <SysTick_Config+0x40>)
 80021a4:	2207      	movs	r2, #7
 80021a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	e000e010 	.word	0xe000e010

080021b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff2d 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e0:	f7ff ff42 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7ff ff90 	bl	8002110 <NVIC_EncodePriority>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff5f 	bl	80020bc <__NVIC_SetPriority>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff35 	bl	8002084 <__NVIC_EnableIRQ>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ffa2 	bl	8002174 <SysTick_Config>
 8002230:	4603      	mov	r3, r0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002252:	e160      	b.n	8002516 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2101      	movs	r1, #1
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	fa01 f303 	lsl.w	r3, r1, r3
 8002260:	4013      	ands	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8152 	beq.w	8002510 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b01      	cmp	r3, #1
 8002276:	d005      	beq.n	8002284 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002280:	2b02      	cmp	r3, #2
 8002282:	d130      	bne.n	80022e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80022ba:	2201      	movs	r2, #1
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	f003 0201 	and.w	r2, r3, #1
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d017      	beq.n	8002322 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2203      	movs	r2, #3
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d123      	bne.n	8002376 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	08da      	lsrs	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3208      	adds	r2, #8
 8002336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	08da      	lsrs	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3208      	adds	r2, #8
 8002370:	6939      	ldr	r1, [r7, #16]
 8002372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	2203      	movs	r2, #3
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0203 	and.w	r2, r3, #3
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80ac 	beq.w	8002510 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002534 <HAL_GPIO_Init+0x2f8>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002534 <HAL_GPIO_Init+0x2f8>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002534 <HAL_GPIO_Init+0x2f8>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80023d0:	4a59      	ldr	r2, [pc, #356]	@ (8002538 <HAL_GPIO_Init+0x2fc>)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	3302      	adds	r3, #2
 80023d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	220f      	movs	r2, #15
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a51      	ldr	r2, [pc, #324]	@ (800253c <HAL_GPIO_Init+0x300>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d025      	beq.n	8002448 <HAL_GPIO_Init+0x20c>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a50      	ldr	r2, [pc, #320]	@ (8002540 <HAL_GPIO_Init+0x304>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d01f      	beq.n	8002444 <HAL_GPIO_Init+0x208>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a4f      	ldr	r2, [pc, #316]	@ (8002544 <HAL_GPIO_Init+0x308>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d019      	beq.n	8002440 <HAL_GPIO_Init+0x204>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a4e      	ldr	r2, [pc, #312]	@ (8002548 <HAL_GPIO_Init+0x30c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d013      	beq.n	800243c <HAL_GPIO_Init+0x200>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a4d      	ldr	r2, [pc, #308]	@ (800254c <HAL_GPIO_Init+0x310>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00d      	beq.n	8002438 <HAL_GPIO_Init+0x1fc>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a4c      	ldr	r2, [pc, #304]	@ (8002550 <HAL_GPIO_Init+0x314>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d007      	beq.n	8002434 <HAL_GPIO_Init+0x1f8>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a4b      	ldr	r2, [pc, #300]	@ (8002554 <HAL_GPIO_Init+0x318>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d101      	bne.n	8002430 <HAL_GPIO_Init+0x1f4>
 800242c:	2306      	movs	r3, #6
 800242e:	e00c      	b.n	800244a <HAL_GPIO_Init+0x20e>
 8002430:	2307      	movs	r3, #7
 8002432:	e00a      	b.n	800244a <HAL_GPIO_Init+0x20e>
 8002434:	2305      	movs	r3, #5
 8002436:	e008      	b.n	800244a <HAL_GPIO_Init+0x20e>
 8002438:	2304      	movs	r3, #4
 800243a:	e006      	b.n	800244a <HAL_GPIO_Init+0x20e>
 800243c:	2303      	movs	r3, #3
 800243e:	e004      	b.n	800244a <HAL_GPIO_Init+0x20e>
 8002440:	2302      	movs	r3, #2
 8002442:	e002      	b.n	800244a <HAL_GPIO_Init+0x20e>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <HAL_GPIO_Init+0x20e>
 8002448:	2300      	movs	r3, #0
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	f002 0203 	and.w	r2, r2, #3
 8002450:	0092      	lsls	r2, r2, #2
 8002452:	4093      	lsls	r3, r2
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800245a:	4937      	ldr	r1, [pc, #220]	@ (8002538 <HAL_GPIO_Init+0x2fc>)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002468:	4b3b      	ldr	r3, [pc, #236]	@ (8002558 <HAL_GPIO_Init+0x31c>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	43db      	mvns	r3, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800248c:	4a32      	ldr	r2, [pc, #200]	@ (8002558 <HAL_GPIO_Init+0x31c>)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002492:	4b31      	ldr	r3, [pc, #196]	@ (8002558 <HAL_GPIO_Init+0x31c>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024b6:	4a28      	ldr	r2, [pc, #160]	@ (8002558 <HAL_GPIO_Init+0x31c>)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024bc:	4b26      	ldr	r3, [pc, #152]	@ (8002558 <HAL_GPIO_Init+0x31c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002558 <HAL_GPIO_Init+0x31c>)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <HAL_GPIO_Init+0x31c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800250a:	4a13      	ldr	r2, [pc, #76]	@ (8002558 <HAL_GPIO_Init+0x31c>)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	fa22 f303 	lsr.w	r3, r2, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	f47f ae97 	bne.w	8002254 <HAL_GPIO_Init+0x18>
  }
}
 8002526:	bf00      	nop
 8002528:	bf00      	nop
 800252a:	371c      	adds	r7, #28
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40010000 	.word	0x40010000
 800253c:	40020000 	.word	0x40020000
 8002540:	40020400 	.word	0x40020400
 8002544:	40020800 	.word	0x40020800
 8002548:	40020c00 	.word	0x40020c00
 800254c:	40021000 	.word	0x40021000
 8002550:	40021400 	.word	0x40021400
 8002554:	40021800 	.word	0x40021800
 8002558:	40010400 	.word	0x40010400

0800255c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
 8002568:	4613      	mov	r3, r2
 800256a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800256c:	787b      	ldrb	r3, [r7, #1]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002578:	e003      	b.n	8002582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800257a:	887b      	ldrh	r3, [r7, #2]
 800257c:	041a      	lsls	r2, r3, #16
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	619a      	str	r2, [r3, #24]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002596:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025a2:	4a05      	ldr	r2, [pc, #20]	@ (80025b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff f91c 	bl	80017e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40010400 	.word	0x40010400

080025bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e12b      	b.n	8002826 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff fa10 	bl	8001a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2224      	movs	r2, #36	@ 0x24
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800260e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800261e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002620:	f001 fd5e 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8002624:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4a81      	ldr	r2, [pc, #516]	@ (8002830 <HAL_I2C_Init+0x274>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d807      	bhi.n	8002640 <HAL_I2C_Init+0x84>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4a80      	ldr	r2, [pc, #512]	@ (8002834 <HAL_I2C_Init+0x278>)
 8002634:	4293      	cmp	r3, r2
 8002636:	bf94      	ite	ls
 8002638:	2301      	movls	r3, #1
 800263a:	2300      	movhi	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e006      	b.n	800264e <HAL_I2C_Init+0x92>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a7d      	ldr	r2, [pc, #500]	@ (8002838 <HAL_I2C_Init+0x27c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	bf94      	ite	ls
 8002648:	2301      	movls	r3, #1
 800264a:	2300      	movhi	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e0e7      	b.n	8002826 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4a78      	ldr	r2, [pc, #480]	@ (800283c <HAL_I2C_Init+0x280>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	0c9b      	lsrs	r3, r3, #18
 8002660:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	430a      	orrs	r2, r1
 8002674:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4a6a      	ldr	r2, [pc, #424]	@ (8002830 <HAL_I2C_Init+0x274>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d802      	bhi.n	8002690 <HAL_I2C_Init+0xd4>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	3301      	adds	r3, #1
 800268e:	e009      	b.n	80026a4 <HAL_I2C_Init+0xe8>
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002696:	fb02 f303 	mul.w	r3, r2, r3
 800269a:	4a69      	ldr	r2, [pc, #420]	@ (8002840 <HAL_I2C_Init+0x284>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	099b      	lsrs	r3, r3, #6
 80026a2:	3301      	adds	r3, #1
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	495c      	ldr	r1, [pc, #368]	@ (8002830 <HAL_I2C_Init+0x274>)
 80026c0:	428b      	cmp	r3, r1
 80026c2:	d819      	bhi.n	80026f8 <HAL_I2C_Init+0x13c>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1e59      	subs	r1, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d2:	1c59      	adds	r1, r3, #1
 80026d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026d8:	400b      	ands	r3, r1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_I2C_Init+0x138>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1e59      	subs	r1, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f2:	e051      	b.n	8002798 <HAL_I2C_Init+0x1dc>
 80026f4:	2304      	movs	r3, #4
 80026f6:	e04f      	b.n	8002798 <HAL_I2C_Init+0x1dc>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d111      	bne.n	8002724 <HAL_I2C_Init+0x168>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1e58      	subs	r0, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	440b      	add	r3, r1
 800270e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002712:	3301      	adds	r3, #1
 8002714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	e012      	b.n	800274a <HAL_I2C_Init+0x18e>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e58      	subs	r0, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	0099      	lsls	r1, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	fbb0 f3f3 	udiv	r3, r0, r3
 800273a:	3301      	adds	r3, #1
 800273c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Init+0x196>
 800274e:	2301      	movs	r3, #1
 8002750:	e022      	b.n	8002798 <HAL_I2C_Init+0x1dc>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10e      	bne.n	8002778 <HAL_I2C_Init+0x1bc>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1e58      	subs	r0, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	460b      	mov	r3, r1
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	440b      	add	r3, r1
 8002768:	fbb0 f3f3 	udiv	r3, r0, r3
 800276c:	3301      	adds	r3, #1
 800276e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002776:	e00f      	b.n	8002798 <HAL_I2C_Init+0x1dc>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1e58      	subs	r0, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	0099      	lsls	r1, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	fbb0 f3f3 	udiv	r3, r0, r3
 800278e:	3301      	adds	r3, #1
 8002790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002794:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	6809      	ldr	r1, [r1, #0]
 800279c:	4313      	orrs	r3, r2
 800279e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6911      	ldr	r1, [r2, #16]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68d2      	ldr	r2, [r2, #12]
 80027d2:	4311      	orrs	r1, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	430b      	orrs	r3, r1
 80027da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2220      	movs	r2, #32
 8002812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	000186a0 	.word	0x000186a0
 8002834:	001e847f 	.word	0x001e847f
 8002838:	003d08ff 	.word	0x003d08ff
 800283c:	431bde83 	.word	0x431bde83
 8002840:	10624dd3 	.word	0x10624dd3

08002844 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af02      	add	r7, sp, #8
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	4608      	mov	r0, r1
 800284e:	4611      	mov	r1, r2
 8002850:	461a      	mov	r2, r3
 8002852:	4603      	mov	r3, r0
 8002854:	817b      	strh	r3, [r7, #10]
 8002856:	460b      	mov	r3, r1
 8002858:	813b      	strh	r3, [r7, #8]
 800285a:	4613      	mov	r3, r2
 800285c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800285e:	f7ff fbb3 	bl	8001fc8 <HAL_GetTick>
 8002862:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b20      	cmp	r3, #32
 800286e:	f040 80d9 	bne.w	8002a24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2319      	movs	r3, #25
 8002878:	2201      	movs	r2, #1
 800287a:	496d      	ldr	r1, [pc, #436]	@ (8002a30 <HAL_I2C_Mem_Write+0x1ec>)
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fc8b 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
 800288a:	e0cc      	b.n	8002a26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_I2C_Mem_Write+0x56>
 8002896:	2302      	movs	r3, #2
 8002898:	e0c5      	b.n	8002a26 <HAL_I2C_Mem_Write+0x1e2>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d007      	beq.n	80028c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2221      	movs	r2, #33	@ 0x21
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2240      	movs	r2, #64	@ 0x40
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a3a      	ldr	r2, [r7, #32]
 80028ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4a4d      	ldr	r2, [pc, #308]	@ (8002a34 <HAL_I2C_Mem_Write+0x1f0>)
 8002900:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002902:	88f8      	ldrh	r0, [r7, #6]
 8002904:	893a      	ldrh	r2, [r7, #8]
 8002906:	8979      	ldrh	r1, [r7, #10]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	4603      	mov	r3, r0
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 fac2 	bl	8002e9c <I2C_RequestMemoryWrite>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d052      	beq.n	80029c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e081      	b.n	8002a26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fd50 	bl	80033cc <I2C_WaitOnTXEFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00d      	beq.n	800294e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	2b04      	cmp	r3, #4
 8002938:	d107      	bne.n	800294a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002948:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e06b      	b.n	8002a26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	781a      	ldrb	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b04      	cmp	r3, #4
 800298a:	d11b      	bne.n	80029c4 <HAL_I2C_Mem_Write+0x180>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002990:	2b00      	cmp	r3, #0
 8002992:	d017      	beq.n	80029c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1aa      	bne.n	8002922 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 fd43 	bl	800345c <I2C_WaitOnBTFFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00d      	beq.n	80029f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d107      	bne.n	80029f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e016      	b.n	8002a26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e000      	b.n	8002a26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a24:	2302      	movs	r3, #2
  }
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	00100002 	.word	0x00100002
 8002a34:	ffff0000 	.word	0xffff0000

08002a38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08c      	sub	sp, #48	@ 0x30
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	817b      	strh	r3, [r7, #10]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	813b      	strh	r3, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a52:	f7ff fab9 	bl	8001fc8 <HAL_GetTick>
 8002a56:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	f040 8214 	bne.w	8002e8e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	2319      	movs	r3, #25
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	497b      	ldr	r1, [pc, #492]	@ (8002c5c <HAL_I2C_Mem_Read+0x224>)
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fb91 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e207      	b.n	8002e90 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_I2C_Mem_Read+0x56>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e200      	b.n	8002e90 <HAL_I2C_Mem_Read+0x458>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d007      	beq.n	8002ab4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ac2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2222      	movs	r2, #34	@ 0x22
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2240      	movs	r2, #64	@ 0x40
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ade:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4a5b      	ldr	r2, [pc, #364]	@ (8002c60 <HAL_I2C_Mem_Read+0x228>)
 8002af4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002af6:	88f8      	ldrh	r0, [r7, #6]
 8002af8:	893a      	ldrh	r2, [r7, #8]
 8002afa:	8979      	ldrh	r1, [r7, #10]
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	4603      	mov	r3, r0
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fa5e 	bl	8002fc8 <I2C_RequestMemoryRead>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e1bc      	b.n	8002e90 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d113      	bne.n	8002b46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1e:	2300      	movs	r3, #0
 8002b20:	623b      	str	r3, [r7, #32]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	623b      	str	r3, [r7, #32]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	623b      	str	r3, [r7, #32]
 8002b32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	e190      	b.n	8002e68 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d11b      	bne.n	8002b86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e170      	b.n	8002e68 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d11b      	bne.n	8002bc6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	e150      	b.n	8002e68 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bdc:	e144      	b.n	8002e68 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	f200 80f1 	bhi.w	8002dca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d123      	bne.n	8002c38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fc79 	bl	80034ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e145      	b.n	8002e90 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c36:	e117      	b.n	8002e68 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d14e      	bne.n	8002cde <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c46:	2200      	movs	r2, #0
 8002c48:	4906      	ldr	r1, [pc, #24]	@ (8002c64 <HAL_I2C_Mem_Read+0x22c>)
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 faa4 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e11a      	b.n	8002e90 <HAL_I2C_Mem_Read+0x458>
 8002c5a:	bf00      	nop
 8002c5c:	00100002 	.word	0x00100002
 8002c60:	ffff0000 	.word	0xffff0000
 8002c64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cdc:	e0c4      	b.n	8002e68 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	496c      	ldr	r1, [pc, #432]	@ (8002e98 <HAL_I2C_Mem_Read+0x460>)
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fa55 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0cb      	b.n	8002e90 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d40:	2200      	movs	r2, #0
 8002d42:	4955      	ldr	r1, [pc, #340]	@ (8002e98 <HAL_I2C_Mem_Read+0x460>)
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 fa27 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e09d      	b.n	8002e90 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dc8:	e04e      	b.n	8002e68 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dcc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 fb8c 	bl	80034ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e058      	b.n	8002e90 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d124      	bne.n	8002e68 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d107      	bne.n	8002e36 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e34:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f47f aeb6 	bne.w	8002bde <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
  }
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3728      	adds	r7, #40	@ 0x28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	00010004 	.word	0x00010004

08002e9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	817b      	strh	r3, [r7, #10]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	813b      	strh	r3, [r7, #8]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ec4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f960 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00d      	beq.n	8002efa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eec:	d103      	bne.n	8002ef6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ef4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e05f      	b.n	8002fba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002efa:	897b      	ldrh	r3, [r7, #10]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	6a3a      	ldr	r2, [r7, #32]
 8002f0e:	492d      	ldr	r1, [pc, #180]	@ (8002fc4 <I2C_RequestMemoryWrite+0x128>)
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f9bb 	bl	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e04c      	b.n	8002fba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f38:	6a39      	ldr	r1, [r7, #32]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fa46 	bl	80033cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00d      	beq.n	8002f62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d107      	bne.n	8002f5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e02b      	b.n	8002fba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f68:	893b      	ldrh	r3, [r7, #8]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	611a      	str	r2, [r3, #16]
 8002f72:	e021      	b.n	8002fb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f74:	893b      	ldrh	r3, [r7, #8]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f84:	6a39      	ldr	r1, [r7, #32]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 fa20 	bl	80033cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00d      	beq.n	8002fae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d107      	bne.n	8002faa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fa8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e005      	b.n	8002fba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fae:	893b      	ldrh	r3, [r7, #8]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	00010002 	.word	0x00010002

08002fc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	4608      	mov	r0, r1
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	817b      	strh	r3, [r7, #10]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	813b      	strh	r3, [r7, #8]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ff0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003000:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	2200      	movs	r2, #0
 800300a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f8c2 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00d      	beq.n	8003036 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003028:	d103      	bne.n	8003032 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003030:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e0aa      	b.n	800318c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003036:	897b      	ldrh	r3, [r7, #10]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003044:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	6a3a      	ldr	r2, [r7, #32]
 800304a:	4952      	ldr	r1, [pc, #328]	@ (8003194 <I2C_RequestMemoryRead+0x1cc>)
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f91d 	bl	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e097      	b.n	800318c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003074:	6a39      	ldr	r1, [r7, #32]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f9a8 	bl	80033cc <I2C_WaitOnTXEFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00d      	beq.n	800309e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	2b04      	cmp	r3, #4
 8003088:	d107      	bne.n	800309a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003098:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e076      	b.n	800318c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d105      	bne.n	80030b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030a4:	893b      	ldrh	r3, [r7, #8]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	611a      	str	r2, [r3, #16]
 80030ae:	e021      	b.n	80030f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030b0:	893b      	ldrh	r3, [r7, #8]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c0:	6a39      	ldr	r1, [r7, #32]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f982 	bl	80033cc <I2C_WaitOnTXEFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00d      	beq.n	80030ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d107      	bne.n	80030e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e050      	b.n	800318c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030ea:	893b      	ldrh	r3, [r7, #8]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f6:	6a39      	ldr	r1, [r7, #32]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f967 	bl	80033cc <I2C_WaitOnTXEFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00d      	beq.n	8003120 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003108:	2b04      	cmp	r3, #4
 800310a:	d107      	bne.n	800311c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800311a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e035      	b.n	800318c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800312e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	2200      	movs	r2, #0
 8003138:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f82b 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00d      	beq.n	8003164 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003156:	d103      	bne.n	8003160 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800315e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e013      	b.n	800318c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003164:	897b      	ldrh	r3, [r7, #10]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	b2da      	uxtb	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	6a3a      	ldr	r2, [r7, #32]
 8003178:	4906      	ldr	r1, [pc, #24]	@ (8003194 <I2C_RequestMemoryRead+0x1cc>)
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f886 	bl	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	00010002 	.word	0x00010002

08003198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a8:	e048      	b.n	800323c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d044      	beq.n	800323c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	f7fe ff09 	bl	8001fc8 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d139      	bne.n	800323c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	0c1b      	lsrs	r3, r3, #16
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d10d      	bne.n	80031ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	43da      	mvns	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4013      	ands	r3, r2
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	e00c      	b.n	8003208 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	43da      	mvns	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4013      	ands	r3, r2
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	429a      	cmp	r2, r3
 800320c:	d116      	bne.n	800323c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	f043 0220 	orr.w	r2, r3, #32
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e023      	b.n	8003284 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d10d      	bne.n	8003262 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	43da      	mvns	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	4013      	ands	r3, r2
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	e00c      	b.n	800327c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	43da      	mvns	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4013      	ands	r3, r2
 800326e:	b29b      	uxth	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	429a      	cmp	r2, r3
 8003280:	d093      	beq.n	80031aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800329a:	e071      	b.n	8003380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032aa:	d123      	bne.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	f043 0204 	orr.w	r2, r3, #4
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e067      	b.n	80033c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fa:	d041      	beq.n	8003380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fc:	f7fe fe64 	bl	8001fc8 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	429a      	cmp	r2, r3
 800330a:	d302      	bcc.n	8003312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d136      	bne.n	8003380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d10c      	bne.n	8003336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	43da      	mvns	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4013      	ands	r3, r2
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	bf14      	ite	ne
 800332e:	2301      	movne	r3, #1
 8003330:	2300      	moveq	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	e00b      	b.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	43da      	mvns	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	4013      	ands	r3, r2
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf14      	ite	ne
 8003348:	2301      	movne	r3, #1
 800334a:	2300      	moveq	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e021      	b.n	80033c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	0c1b      	lsrs	r3, r3, #16
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d10c      	bne.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	43da      	mvns	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	4013      	ands	r3, r2
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf14      	ite	ne
 800339c:	2301      	movne	r3, #1
 800339e:	2300      	moveq	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	e00b      	b.n	80033bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	43da      	mvns	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4013      	ands	r3, r2
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf14      	ite	ne
 80033b6:	2301      	movne	r3, #1
 80033b8:	2300      	moveq	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f47f af6d 	bne.w	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d8:	e034      	b.n	8003444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f8e3 	bl	80035a6 <I2C_IsAcknowledgeFailed>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e034      	b.n	8003454 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d028      	beq.n	8003444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f2:	f7fe fde9 	bl	8001fc8 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d11d      	bne.n	8003444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003412:	2b80      	cmp	r3, #128	@ 0x80
 8003414:	d016      	beq.n	8003444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e007      	b.n	8003454 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344e:	2b80      	cmp	r3, #128	@ 0x80
 8003450:	d1c3      	bne.n	80033da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003468:	e034      	b.n	80034d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f89b 	bl	80035a6 <I2C_IsAcknowledgeFailed>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e034      	b.n	80034e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d028      	beq.n	80034d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003482:	f7fe fda1 	bl	8001fc8 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	d302      	bcc.n	8003498 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d11d      	bne.n	80034d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d016      	beq.n	80034d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e007      	b.n	80034e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d1c3      	bne.n	800346a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034f8:	e049      	b.n	800358e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b10      	cmp	r3, #16
 8003506:	d119      	bne.n	800353c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0210 	mvn.w	r2, #16
 8003510:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e030      	b.n	800359e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353c:	f7fe fd44 	bl	8001fc8 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	429a      	cmp	r2, r3
 800354a:	d302      	bcc.n	8003552 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d11d      	bne.n	800358e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355c:	2b40      	cmp	r3, #64	@ 0x40
 800355e:	d016      	beq.n	800358e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e007      	b.n	800359e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b40      	cmp	r3, #64	@ 0x40
 800359a:	d1ae      	bne.n	80034fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035bc:	d11b      	bne.n	80035f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	f043 0204 	orr.w	r2, r3, #4
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr
	...

08003604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e31d      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003616:	4b94      	ldr	r3, [pc, #592]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003620:	4b91      	ldr	r3, [pc, #580]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003628:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d07b      	beq.n	800372e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d006      	beq.n	800364a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d10f      	bne.n	8003662 <HAL_RCC_OscConfig+0x5e>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003648:	d10b      	bne.n	8003662 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364a:	4b87      	ldr	r3, [pc, #540]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d06a      	beq.n	800372c <HAL_RCC_OscConfig+0x128>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d166      	bne.n	800372c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e2f7      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d106      	bne.n	8003678 <HAL_RCC_OscConfig+0x74>
 800366a:	4b7f      	ldr	r3, [pc, #508]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a7e      	ldr	r2, [pc, #504]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e02d      	b.n	80036d4 <HAL_RCC_OscConfig+0xd0>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10c      	bne.n	800369a <HAL_RCC_OscConfig+0x96>
 8003680:	4b79      	ldr	r3, [pc, #484]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a78      	ldr	r2, [pc, #480]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 8003686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b76      	ldr	r3, [pc, #472]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a75      	ldr	r2, [pc, #468]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 8003692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	e01c      	b.n	80036d4 <HAL_RCC_OscConfig+0xd0>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b05      	cmp	r3, #5
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0xb8>
 80036a2:	4b71      	ldr	r3, [pc, #452]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a70      	ldr	r2, [pc, #448]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 80036a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6d      	ldr	r2, [pc, #436]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e00b      	b.n	80036d4 <HAL_RCC_OscConfig+0xd0>
 80036bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a69      	ldr	r2, [pc, #420]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b67      	ldr	r3, [pc, #412]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a66      	ldr	r2, [pc, #408]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 80036ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d013      	beq.n	8003704 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fe fc74 	bl	8001fc8 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e4:	f7fe fc70 	bl	8001fc8 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	@ 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e2ad      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0xe0>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fe fc60 	bl	8001fc8 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800370c:	f7fe fc5c 	bl	8001fc8 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	@ 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e299      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800371e:	4b52      	ldr	r3, [pc, #328]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x108>
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d05a      	beq.n	80037f0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b04      	cmp	r3, #4
 800373e:	d005      	beq.n	800374c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d119      	bne.n	800377a <HAL_RCC_OscConfig+0x176>
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d116      	bne.n	800377a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374c:	4b46      	ldr	r3, [pc, #280]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_OscConfig+0x160>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d001      	beq.n	8003764 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e276      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003764:	4b40      	ldr	r3, [pc, #256]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	493d      	ldr	r1, [pc, #244]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003778:	e03a      	b.n	80037f0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d020      	beq.n	80037c4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003782:	4b3a      	ldr	r3, [pc, #232]	@ (800386c <HAL_RCC_OscConfig+0x268>)
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fe fc1e 	bl	8001fc8 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003790:	f7fe fc1a 	bl	8001fc8 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e257      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037a2:	4b31      	ldr	r3, [pc, #196]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	492a      	ldr	r1, [pc, #168]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	604b      	str	r3, [r1, #4]
 80037c2:	e015      	b.n	80037f0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c4:	4b29      	ldr	r3, [pc, #164]	@ (800386c <HAL_RCC_OscConfig+0x268>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ca:	f7fe fbfd 	bl	8001fc8 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d2:	f7fe fbf9 	bl	8001fc8 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e236      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037e4:	4b20      	ldr	r3, [pc, #128]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f0      	bne.n	80037d2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 80b8 	beq.w	800396e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d170      	bne.n	80038e6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003804:	4b18      	ldr	r3, [pc, #96]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_OscConfig+0x218>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e21a      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1a      	ldr	r2, [r3, #32]
 8003820:	4b11      	ldr	r3, [pc, #68]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003828:	429a      	cmp	r2, r3
 800382a:	d921      	bls.n	8003870 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fc7d 	bl	8004130 <RCC_SetFlashLatencyFromMSIRange>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e208      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003840:	4b09      	ldr	r3, [pc, #36]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	4906      	ldr	r1, [pc, #24]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 800384e:	4313      	orrs	r3, r2
 8003850:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003852:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	061b      	lsls	r3, r3, #24
 8003860:	4901      	ldr	r1, [pc, #4]	@ (8003868 <HAL_RCC_OscConfig+0x264>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
 8003866:	e020      	b.n	80038aa <HAL_RCC_OscConfig+0x2a6>
 8003868:	40023800 	.word	0x40023800
 800386c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003870:	4b99      	ldr	r3, [pc, #612]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	4996      	ldr	r1, [pc, #600]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003882:	4b95      	ldr	r3, [pc, #596]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	4991      	ldr	r1, [pc, #580]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fc48 	bl	8004130 <RCC_SetFlashLatencyFromMSIRange>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e1d3      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	0b5b      	lsrs	r3, r3, #13
 80038b0:	3301      	adds	r3, #1
 80038b2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80038ba:	4a87      	ldr	r2, [pc, #540]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 80038bc:	6892      	ldr	r2, [r2, #8]
 80038be:	0912      	lsrs	r2, r2, #4
 80038c0:	f002 020f 	and.w	r2, r2, #15
 80038c4:	4985      	ldr	r1, [pc, #532]	@ (8003adc <HAL_RCC_OscConfig+0x4d8>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
 80038c8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80038ca:	4a85      	ldr	r2, [pc, #532]	@ (8003ae0 <HAL_RCC_OscConfig+0x4dc>)
 80038cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038ce:	4b85      	ldr	r3, [pc, #532]	@ (8003ae4 <HAL_RCC_OscConfig+0x4e0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe fb2c 	bl	8001f30 <HAL_InitTick>
 80038d8:	4603      	mov	r3, r0
 80038da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d045      	beq.n	800396e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	e1b5      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d029      	beq.n	8003942 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ee:	4b7e      	ldr	r3, [pc, #504]	@ (8003ae8 <HAL_RCC_OscConfig+0x4e4>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fe fb68 	bl	8001fc8 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038fc:	f7fe fb64 	bl	8001fc8 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e1a1      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800390e:	4b72      	ldr	r3, [pc, #456]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800391a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	496c      	ldr	r1, [pc, #432]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800392c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	061b      	lsls	r3, r3, #24
 800393a:	4967      	ldr	r1, [pc, #412]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
 8003940:	e015      	b.n	800396e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003942:	4b69      	ldr	r3, [pc, #420]	@ (8003ae8 <HAL_RCC_OscConfig+0x4e4>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe fb3e 	bl	8001fc8 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003950:	f7fe fb3a 	bl	8001fc8 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e177      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003962:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d030      	beq.n	80039dc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d016      	beq.n	80039b0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003982:	4b5a      	ldr	r3, [pc, #360]	@ (8003aec <HAL_RCC_OscConfig+0x4e8>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003988:	f7fe fb1e 	bl	8001fc8 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003990:	f7fe fb1a 	bl	8001fc8 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e157      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039a2:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 80039a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x38c>
 80039ae:	e015      	b.n	80039dc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b0:	4b4e      	ldr	r3, [pc, #312]	@ (8003aec <HAL_RCC_OscConfig+0x4e8>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b6:	f7fe fb07 	bl	8001fc8 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039be:	f7fe fb03 	bl	8001fc8 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e140      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039d0:	4b41      	ldr	r3, [pc, #260]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 80039d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f0      	bne.n	80039be <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80b5 	beq.w	8003b54 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ea:	2300      	movs	r3, #0
 80039ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ee:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10d      	bne.n	8003a16 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fa:	4b37      	ldr	r3, [pc, #220]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	4a36      	ldr	r2, [pc, #216]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a04:	6253      	str	r3, [r2, #36]	@ 0x24
 8003a06:	4b34      	ldr	r3, [pc, #208]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a12:	2301      	movs	r3, #1
 8003a14:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a16:	4b36      	ldr	r3, [pc, #216]	@ (8003af0 <HAL_RCC_OscConfig+0x4ec>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d118      	bne.n	8003a54 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a22:	4b33      	ldr	r3, [pc, #204]	@ (8003af0 <HAL_RCC_OscConfig+0x4ec>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a32      	ldr	r2, [pc, #200]	@ (8003af0 <HAL_RCC_OscConfig+0x4ec>)
 8003a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2e:	f7fe facb 	bl	8001fc8 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a36:	f7fe fac7 	bl	8001fc8 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b64      	cmp	r3, #100	@ 0x64
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e104      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	4b29      	ldr	r3, [pc, #164]	@ (8003af0 <HAL_RCC_OscConfig+0x4ec>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d106      	bne.n	8003a6a <HAL_RCC_OscConfig+0x466>
 8003a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a60:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a66:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a68:	e02d      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4c2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x488>
 8003a72:	4b19      	ldr	r3, [pc, #100]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a76:	4a18      	ldr	r2, [pc, #96]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003a78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a7c:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a7e:	4b16      	ldr	r3, [pc, #88]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a82:	4a15      	ldr	r2, [pc, #84]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003a84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a88:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a8a:	e01c      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4c2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b05      	cmp	r3, #5
 8003a92:	d10c      	bne.n	8003aae <HAL_RCC_OscConfig+0x4aa>
 8003a94:	4b10      	ldr	r3, [pc, #64]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a98:	4a0f      	ldr	r2, [pc, #60]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003a9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a9e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aaa:	6353      	str	r3, [r2, #52]	@ 0x34
 8003aac:	e00b      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4c2>
 8003aae:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab2:	4a09      	ldr	r2, [pc, #36]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ab8:	6353      	str	r3, [r2, #52]	@ 0x34
 8003aba:	4b07      	ldr	r3, [pc, #28]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003abe:	4a06      	ldr	r2, [pc, #24]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 8003ac0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ac4:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d024      	beq.n	8003b18 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ace:	f7fe fa7b 	bl	8001fc8 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ad4:	e019      	b.n	8003b0a <HAL_RCC_OscConfig+0x506>
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	080083a4 	.word	0x080083a4
 8003ae0:	20000000 	.word	0x20000000
 8003ae4:	20000004 	.word	0x20000004
 8003ae8:	42470020 	.word	0x42470020
 8003aec:	42470680 	.word	0x42470680
 8003af0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af4:	f7fe fa68 	bl	8001fc8 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e0a3      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b0a:	4b54      	ldr	r3, [pc, #336]	@ (8003c5c <HAL_RCC_OscConfig+0x658>)
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0ee      	beq.n	8003af4 <HAL_RCC_OscConfig+0x4f0>
 8003b16:	e014      	b.n	8003b42 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b18:	f7fe fa56 	bl	8001fc8 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b20:	f7fe fa52 	bl	8001fc8 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e08d      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b36:	4b49      	ldr	r3, [pc, #292]	@ (8003c5c <HAL_RCC_OscConfig+0x658>)
 8003b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1ee      	bne.n	8003b20 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b42:	7ffb      	ldrb	r3, [r7, #31]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d105      	bne.n	8003b54 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b48:	4b44      	ldr	r3, [pc, #272]	@ (8003c5c <HAL_RCC_OscConfig+0x658>)
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	4a43      	ldr	r2, [pc, #268]	@ (8003c5c <HAL_RCC_OscConfig+0x658>)
 8003b4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b52:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d079      	beq.n	8003c50 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	2b0c      	cmp	r3, #12
 8003b60:	d056      	beq.n	8003c10 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d13b      	bne.n	8003be2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c60 <HAL_RCC_OscConfig+0x65c>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b70:	f7fe fa2a 	bl	8001fc8 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b78:	f7fe fa26 	bl	8001fc8 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e063      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b8a:	4b34      	ldr	r3, [pc, #208]	@ (8003c5c <HAL_RCC_OscConfig+0x658>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b96:	4b31      	ldr	r3, [pc, #196]	@ (8003c5c <HAL_RCC_OscConfig+0x658>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba6:	4319      	orrs	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bac:	430b      	orrs	r3, r1
 8003bae:	492b      	ldr	r1, [pc, #172]	@ (8003c5c <HAL_RCC_OscConfig+0x658>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c60 <HAL_RCC_OscConfig+0x65c>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bba:	f7fe fa05 	bl	8001fc8 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc2:	f7fe fa01 	bl	8001fc8 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e03e      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bd4:	4b21      	ldr	r3, [pc, #132]	@ (8003c5c <HAL_RCC_OscConfig+0x658>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x5be>
 8003be0:	e036      	b.n	8003c50 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c60 <HAL_RCC_OscConfig+0x65c>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fe f9ee 	bl	8001fc8 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7fe f9ea 	bl	8001fc8 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e027      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c02:	4b16      	ldr	r3, [pc, #88]	@ (8003c5c <HAL_RCC_OscConfig+0x658>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5ec>
 8003c0e:	e01f      	b.n	8003c50 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e01a      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c5c <HAL_RCC_OscConfig+0x658>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d10d      	bne.n	8003c4c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d106      	bne.n	8003c4c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	42470060 	.word	0x42470060

08003c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e11a      	b.n	8003eae <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c78:	4b8f      	ldr	r3, [pc, #572]	@ (8003eb8 <HAL_RCC_ClockConfig+0x254>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d919      	bls.n	8003cba <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d105      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x34>
 8003c8c:	4b8a      	ldr	r3, [pc, #552]	@ (8003eb8 <HAL_RCC_ClockConfig+0x254>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a89      	ldr	r2, [pc, #548]	@ (8003eb8 <HAL_RCC_ClockConfig+0x254>)
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b87      	ldr	r3, [pc, #540]	@ (8003eb8 <HAL_RCC_ClockConfig+0x254>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 0201 	bic.w	r2, r3, #1
 8003ca0:	4985      	ldr	r1, [pc, #532]	@ (8003eb8 <HAL_RCC_ClockConfig+0x254>)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca8:	4b83      	ldr	r3, [pc, #524]	@ (8003eb8 <HAL_RCC_ClockConfig+0x254>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d001      	beq.n	8003cba <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e0f9      	b.n	8003eae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d008      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc6:	4b7d      	ldr	r3, [pc, #500]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	497a      	ldr	r1, [pc, #488]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 808e 	beq.w	8003e02 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d107      	bne.n	8003cfe <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cee:	4b73      	ldr	r3, [pc, #460]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d121      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e0d7      	b.n	8003eae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d107      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d06:	4b6d      	ldr	r3, [pc, #436]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d115      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e0cb      	b.n	8003eae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d107      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d1e:	4b67      	ldr	r3, [pc, #412]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e0bf      	b.n	8003eae <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d2e:	4b63      	ldr	r3, [pc, #396]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e0b7      	b.n	8003eae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d3e:	4b5f      	ldr	r3, [pc, #380]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f023 0203 	bic.w	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	495c      	ldr	r1, [pc, #368]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d50:	f7fe f93a 	bl	8001fc8 <HAL_GetTick>
 8003d54:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d112      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d60:	f7fe f932 	bl	8001fc8 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e09b      	b.n	8003eae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d76:	4b51      	ldr	r3, [pc, #324]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d1ee      	bne.n	8003d60 <HAL_RCC_ClockConfig+0xfc>
 8003d82:	e03e      	b.n	8003e02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d112      	bne.n	8003db2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d8e:	f7fe f91b 	bl	8001fc8 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e084      	b.n	8003eae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da4:	4b45      	ldr	r3, [pc, #276]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 030c 	and.w	r3, r3, #12
 8003dac:	2b0c      	cmp	r3, #12
 8003dae:	d1ee      	bne.n	8003d8e <HAL_RCC_ClockConfig+0x12a>
 8003db0:	e027      	b.n	8003e02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d11d      	bne.n	8003df6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dbc:	f7fe f904 	bl	8001fc8 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e06d      	b.n	8003eae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d1ee      	bne.n	8003dbc <HAL_RCC_ClockConfig+0x158>
 8003dde:	e010      	b.n	8003e02 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de0:	f7fe f8f2 	bl	8001fc8 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e05b      	b.n	8003eae <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003df6:	4b31      	ldr	r3, [pc, #196]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1ee      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e02:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb8 <HAL_RCC_ClockConfig+0x254>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d219      	bcs.n	8003e44 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d105      	bne.n	8003e22 <HAL_RCC_ClockConfig+0x1be>
 8003e16:	4b28      	ldr	r3, [pc, #160]	@ (8003eb8 <HAL_RCC_ClockConfig+0x254>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a27      	ldr	r2, [pc, #156]	@ (8003eb8 <HAL_RCC_ClockConfig+0x254>)
 8003e1c:	f043 0304 	orr.w	r3, r3, #4
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	4b25      	ldr	r3, [pc, #148]	@ (8003eb8 <HAL_RCC_ClockConfig+0x254>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 0201 	bic.w	r2, r3, #1
 8003e2a:	4923      	ldr	r1, [pc, #140]	@ (8003eb8 <HAL_RCC_ClockConfig+0x254>)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e32:	4b21      	ldr	r3, [pc, #132]	@ (8003eb8 <HAL_RCC_ClockConfig+0x254>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e034      	b.n	8003eae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e50:	4b1a      	ldr	r3, [pc, #104]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4917      	ldr	r1, [pc, #92]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e6e:	4b13      	ldr	r3, [pc, #76]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	490f      	ldr	r1, [pc, #60]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e82:	f000 f823 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 8003e86:	4602      	mov	r2, r0
 8003e88:	4b0c      	ldr	r3, [pc, #48]	@ (8003ebc <HAL_RCC_ClockConfig+0x258>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	490b      	ldr	r1, [pc, #44]	@ (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003e94:	5ccb      	ldrb	r3, [r1, r3]
 8003e96:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec8 <HAL_RCC_ClockConfig+0x264>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe f844 	bl	8001f30 <HAL_InitTick>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	72fb      	strb	r3, [r7, #11]

  return status;
 8003eac:	7afb      	ldrb	r3, [r7, #11]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023c00 	.word	0x40023c00
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	080083a4 	.word	0x080083a4
 8003ec4:	20000000 	.word	0x20000000
 8003ec8:	20000004 	.word	0x20000004

08003ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed0:	b092      	sub	sp, #72	@ 0x48
 8003ed2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003ed4:	4b79      	ldr	r3, [pc, #484]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	2b0c      	cmp	r3, #12
 8003ee2:	d00d      	beq.n	8003f00 <HAL_RCC_GetSysClockFreq+0x34>
 8003ee4:	2b0c      	cmp	r3, #12
 8003ee6:	f200 80d5 	bhi.w	8004094 <HAL_RCC_GetSysClockFreq+0x1c8>
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d002      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x28>
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d003      	beq.n	8003efa <HAL_RCC_GetSysClockFreq+0x2e>
 8003ef2:	e0cf      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ef4:	4b72      	ldr	r3, [pc, #456]	@ (80040c0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003ef6:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003ef8:	e0da      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003efa:	4b72      	ldr	r3, [pc, #456]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003efc:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003efe:	e0d7      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f02:	0c9b      	lsrs	r3, r3, #18
 8003f04:	f003 020f 	and.w	r2, r3, #15
 8003f08:	4b6f      	ldr	r3, [pc, #444]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003f0a:	5c9b      	ldrb	r3, [r3, r2]
 8003f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f10:	0d9b      	lsrs	r3, r3, #22
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	3301      	adds	r3, #1
 8003f18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f1a:	4b68      	ldr	r3, [pc, #416]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d05d      	beq.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f28:	2200      	movs	r2, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4604      	mov	r4, r0
 8003f30:	460d      	mov	r5, r1
 8003f32:	4622      	mov	r2, r4
 8003f34:	462b      	mov	r3, r5
 8003f36:	f04f 0000 	mov.w	r0, #0
 8003f3a:	f04f 0100 	mov.w	r1, #0
 8003f3e:	0159      	lsls	r1, r3, #5
 8003f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f44:	0150      	lsls	r0, r2, #5
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	1a51      	subs	r1, r2, r1
 8003f4e:	6139      	str	r1, [r7, #16]
 8003f50:	4629      	mov	r1, r5
 8003f52:	eb63 0301 	sbc.w	r3, r3, r1
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f64:	4659      	mov	r1, fp
 8003f66:	018b      	lsls	r3, r1, #6
 8003f68:	4651      	mov	r1, sl
 8003f6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f6e:	4651      	mov	r1, sl
 8003f70:	018a      	lsls	r2, r1, #6
 8003f72:	46d4      	mov	ip, sl
 8003f74:	ebb2 080c 	subs.w	r8, r2, ip
 8003f78:	4659      	mov	r1, fp
 8003f7a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f92:	4690      	mov	r8, r2
 8003f94:	4699      	mov	r9, r3
 8003f96:	4623      	mov	r3, r4
 8003f98:	eb18 0303 	adds.w	r3, r8, r3
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	462b      	mov	r3, r5
 8003fa0:	eb49 0303 	adc.w	r3, r9, r3
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	024b      	lsls	r3, r1, #9
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	4629      	mov	r1, r5
 8003fba:	4604      	mov	r4, r0
 8003fbc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003fc0:	4601      	mov	r1, r0
 8003fc2:	024a      	lsls	r2, r1, #9
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fca:	2200      	movs	r2, #0
 8003fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fd4:	f7fc ffce 	bl	8000f74 <__aeabi_uldivmod>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4613      	mov	r3, r2
 8003fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe0:	e055      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	623b      	str	r3, [r7, #32]
 8003fe8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003fea:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fee:	4642      	mov	r2, r8
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	f04f 0000 	mov.w	r0, #0
 8003ff6:	f04f 0100 	mov.w	r1, #0
 8003ffa:	0159      	lsls	r1, r3, #5
 8003ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004000:	0150      	lsls	r0, r2, #5
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	46c4      	mov	ip, r8
 8004008:	ebb2 0a0c 	subs.w	sl, r2, ip
 800400c:	4640      	mov	r0, r8
 800400e:	4649      	mov	r1, r9
 8004010:	468c      	mov	ip, r1
 8004012:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004022:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004026:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800402a:	ebb2 040a 	subs.w	r4, r2, sl
 800402e:	eb63 050b 	sbc.w	r5, r3, fp
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	00eb      	lsls	r3, r5, #3
 800403c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004040:	00e2      	lsls	r2, r4, #3
 8004042:	4614      	mov	r4, r2
 8004044:	461d      	mov	r5, r3
 8004046:	4603      	mov	r3, r0
 8004048:	18e3      	adds	r3, r4, r3
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	460b      	mov	r3, r1
 800404e:	eb45 0303 	adc.w	r3, r5, r3
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004060:	4629      	mov	r1, r5
 8004062:	028b      	lsls	r3, r1, #10
 8004064:	4620      	mov	r0, r4
 8004066:	4629      	mov	r1, r5
 8004068:	4604      	mov	r4, r0
 800406a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800406e:	4601      	mov	r1, r0
 8004070:	028a      	lsls	r2, r1, #10
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004078:	2200      	movs	r2, #0
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	61fa      	str	r2, [r7, #28]
 800407e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004082:	f7fc ff77 	bl	8000f74 <__aeabi_uldivmod>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4613      	mov	r3, r2
 800408c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 800408e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004090:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004092:	e00d      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004094:	4b09      	ldr	r3, [pc, #36]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	0b5b      	lsrs	r3, r3, #13
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80040a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a2:	3301      	adds	r3, #1
 80040a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80040ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3748      	adds	r7, #72	@ 0x48
 80040b6:	46bd      	mov	sp, r7
 80040b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040bc:	40023800 	.word	0x40023800
 80040c0:	00f42400 	.word	0x00f42400
 80040c4:	007a1200 	.word	0x007a1200
 80040c8:	08008398 	.word	0x08008398

080040cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d0:	4b02      	ldr	r3, [pc, #8]	@ (80040dc <HAL_RCC_GetHCLKFreq+0x10>)
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr
 80040dc:	20000000 	.word	0x20000000

080040e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040e4:	f7ff fff2 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4903      	ldr	r1, [pc, #12]	@ (8004104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40023800 	.word	0x40023800
 8004104:	080083b4 	.word	0x080083b4

08004108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800410c:	f7ff ffde 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b05      	ldr	r3, [pc, #20]	@ (8004128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	0adb      	lsrs	r3, r3, #11
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	4903      	ldr	r1, [pc, #12]	@ (800412c <HAL_RCC_GetPCLK2Freq+0x24>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004124:	4618      	mov	r0, r3
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40023800 	.word	0x40023800
 800412c:	080083b4 	.word	0x080083b4

08004130 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800413c:	4b29      	ldr	r3, [pc, #164]	@ (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d12c      	bne.n	80041a2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004148:	4b26      	ldr	r3, [pc, #152]	@ (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004154:	4b24      	ldr	r3, [pc, #144]	@ (80041e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e016      	b.n	800418e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004160:	4b20      	ldr	r3, [pc, #128]	@ (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	4a1f      	ldr	r2, [pc, #124]	@ (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416a:	6253      	str	r3, [r2, #36]	@ 0x24
 800416c:	4b1d      	ldr	r3, [pc, #116]	@ (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004178:	4b1b      	ldr	r3, [pc, #108]	@ (80041e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004180:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004182:	4b18      	ldr	r3, [pc, #96]	@ (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	4a17      	ldr	r2, [pc, #92]	@ (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004188:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800418c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8004194:	d105      	bne.n	80041a2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800419c:	d101      	bne.n	80041a2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800419e:	2301      	movs	r3, #1
 80041a0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d105      	bne.n	80041b4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80041a8:	4b10      	ldr	r3, [pc, #64]	@ (80041ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a0f      	ldr	r2, [pc, #60]	@ (80041ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ae:	f043 0304 	orr.w	r3, r3, #4
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	4b0d      	ldr	r3, [pc, #52]	@ (80041ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f023 0201 	bic.w	r2, r3, #1
 80041bc:	490b      	ldr	r1, [pc, #44]	@ (80041ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041c4:	4b09      	ldr	r3, [pc, #36]	@ (80041ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d001      	beq.n	80041d6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40023800 	.word	0x40023800
 80041e8:	40007000 	.word	0x40007000
 80041ec:	40023c00 	.word	0x40023c00

080041f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e07b      	b.n	80042fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	2b00      	cmp	r3, #0
 8004208:	d108      	bne.n	800421c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004212:	d009      	beq.n	8004228 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	61da      	str	r2, [r3, #28]
 800421a:	e005      	b.n	8004228 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fd fc24 	bl	8001a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800425e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ac:	ea42 0103 	orr.w	r1, r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0104 	and.w	r1, r3, #4
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	f003 0210 	and.w	r2, r3, #16
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b088      	sub	sp, #32
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004312:	f7fd fe59 	bl	8001fc8 <HAL_GetTick>
 8004316:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	d001      	beq.n	800432c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
 800432a:	e12a      	b.n	8004582 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_SPI_Transmit+0x36>
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e122      	b.n	8004582 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_SPI_Transmit+0x48>
 8004346:	2302      	movs	r3, #2
 8004348:	e11b      	b.n	8004582 <HAL_SPI_Transmit+0x280>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2203      	movs	r2, #3
 8004356:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	88fa      	ldrh	r2, [r7, #6]
 800436a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	88fa      	ldrh	r2, [r7, #6]
 8004370:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004398:	d10f      	bne.n	80043ba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c4:	2b40      	cmp	r3, #64	@ 0x40
 80043c6:	d007      	beq.n	80043d8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043e0:	d152      	bne.n	8004488 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <HAL_SPI_Transmit+0xee>
 80043ea:	8b7b      	ldrh	r3, [r7, #26]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d145      	bne.n	800447c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f4:	881a      	ldrh	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004400:	1c9a      	adds	r2, r3, #2
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004414:	e032      	b.n	800447c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b02      	cmp	r3, #2
 8004422:	d112      	bne.n	800444a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004428:	881a      	ldrh	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004434:	1c9a      	adds	r2, r3, #2
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004448:	e018      	b.n	800447c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800444a:	f7fd fdbd 	bl	8001fc8 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d803      	bhi.n	8004462 <HAL_SPI_Transmit+0x160>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d102      	bne.n	8004468 <HAL_SPI_Transmit+0x166>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e082      	b.n	8004582 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1c7      	bne.n	8004416 <HAL_SPI_Transmit+0x114>
 8004486:	e053      	b.n	8004530 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_SPI_Transmit+0x194>
 8004490:	8b7b      	ldrh	r3, [r7, #26]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d147      	bne.n	8004526 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	7812      	ldrb	r2, [r2, #0]
 80044a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044bc:	e033      	b.n	8004526 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d113      	bne.n	80044f4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	7812      	ldrb	r2, [r2, #0]
 80044d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80044f2:	e018      	b.n	8004526 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044f4:	f7fd fd68 	bl	8001fc8 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d803      	bhi.n	800450c <HAL_SPI_Transmit+0x20a>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450a:	d102      	bne.n	8004512 <HAL_SPI_Transmit+0x210>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e02d      	b.n	8004582 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1c6      	bne.n	80044be <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	6839      	ldr	r1, [r7, #0]
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f8b1 	bl	800469c <SPI_EndRxTxTransaction>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10a      	bne.n	8004564 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004580:	2300      	movs	r3, #0
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3720      	adds	r7, #32
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800459c:	f7fd fd14 	bl	8001fc8 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	4413      	add	r3, r2
 80045aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045ac:	f7fd fd0c 	bl	8001fc8 <HAL_GetTick>
 80045b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045b2:	4b39      	ldr	r3, [pc, #228]	@ (8004698 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	015b      	lsls	r3, r3, #5
 80045b8:	0d1b      	lsrs	r3, r3, #20
 80045ba:	69fa      	ldr	r2, [r7, #28]
 80045bc:	fb02 f303 	mul.w	r3, r2, r3
 80045c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045c2:	e054      	b.n	800466e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ca:	d050      	beq.n	800466e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045cc:	f7fd fcfc 	bl	8001fc8 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d902      	bls.n	80045e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d13d      	bne.n	800465e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045fa:	d111      	bne.n	8004620 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004604:	d004      	beq.n	8004610 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460e:	d107      	bne.n	8004620 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800461e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004628:	d10f      	bne.n	800464a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004648:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e017      	b.n	800468e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	3b01      	subs	r3, #1
 800466c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4013      	ands	r3, r2
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	429a      	cmp	r2, r3
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	429a      	cmp	r2, r3
 800468a:	d19b      	bne.n	80045c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20000000 	.word	0x20000000

0800469c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2201      	movs	r2, #1
 80046b0:	2102      	movs	r1, #2
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff ff6a 	bl	800458c <SPI_WaitFlagStateUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d007      	beq.n	80046ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c2:	f043 0220 	orr.w	r2, r3, #32
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e032      	b.n	8004734 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046ce:	4b1b      	ldr	r3, [pc, #108]	@ (800473c <SPI_EndRxTxTransaction+0xa0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004740 <SPI_EndRxTxTransaction+0xa4>)
 80046d4:	fba2 2303 	umull	r2, r3, r2, r3
 80046d8:	0d5b      	lsrs	r3, r3, #21
 80046da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ec:	d112      	bne.n	8004714 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2200      	movs	r2, #0
 80046f6:	2180      	movs	r1, #128	@ 0x80
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f7ff ff47 	bl	800458c <SPI_WaitFlagStateUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d016      	beq.n	8004732 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004708:	f043 0220 	orr.w	r2, r3, #32
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e00f      	b.n	8004734 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	3b01      	subs	r3, #1
 800471e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472a:	2b80      	cmp	r3, #128	@ 0x80
 800472c:	d0f2      	beq.n	8004714 <SPI_EndRxTxTransaction+0x78>
 800472e:	e000      	b.n	8004732 <SPI_EndRxTxTransaction+0x96>
        break;
 8004730:	bf00      	nop
  }

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20000000 	.word	0x20000000
 8004740:	165e9f81 	.word	0x165e9f81

08004744 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e031      	b.n	80047ba <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fd f9d4 	bl	8001b18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3304      	adds	r3, #4
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f000 f9da 	bl	8004b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d020      	beq.n	8004826 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01b      	beq.n	8004826 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f06f 0202 	mvn.w	r2, #2
 80047f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f979 	bl	8004b04 <HAL_TIM_IC_CaptureCallback>
 8004812:	e005      	b.n	8004820 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f96c 	bl	8004af2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f97b 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d020      	beq.n	8004872 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01b      	beq.n	8004872 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f06f 0204 	mvn.w	r2, #4
 8004842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f953 	bl	8004b04 <HAL_TIM_IC_CaptureCallback>
 800485e:	e005      	b.n	800486c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f946 	bl	8004af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f955 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d020      	beq.n	80048be <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01b      	beq.n	80048be <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f06f 0208 	mvn.w	r2, #8
 800488e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2204      	movs	r2, #4
 8004894:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f92d 	bl	8004b04 <HAL_TIM_IC_CaptureCallback>
 80048aa:	e005      	b.n	80048b8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f920 	bl	8004af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f92f 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d020      	beq.n	800490a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01b      	beq.n	800490a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f06f 0210 	mvn.w	r2, #16
 80048da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2208      	movs	r2, #8
 80048e0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f907 	bl	8004b04 <HAL_TIM_IC_CaptureCallback>
 80048f6:	e005      	b.n	8004904 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f8fa 	bl	8004af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f909 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00c      	beq.n	800492e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f06f 0201 	mvn.w	r2, #1
 8004926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f8d9 	bl	8004ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00c      	beq.n	8004952 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d007      	beq.n	8004952 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800494a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f8eb 	bl	8004b28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004952:	bf00      	nop
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004976:	2302      	movs	r3, #2
 8004978:	e0ae      	b.n	8004ad8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b0c      	cmp	r3, #12
 8004986:	f200 809f 	bhi.w	8004ac8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800498a:	a201      	add	r2, pc, #4	@ (adr r2, 8004990 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800498c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004990:	080049c5 	.word	0x080049c5
 8004994:	08004ac9 	.word	0x08004ac9
 8004998:	08004ac9 	.word	0x08004ac9
 800499c:	08004ac9 	.word	0x08004ac9
 80049a0:	08004a05 	.word	0x08004a05
 80049a4:	08004ac9 	.word	0x08004ac9
 80049a8:	08004ac9 	.word	0x08004ac9
 80049ac:	08004ac9 	.word	0x08004ac9
 80049b0:	08004a47 	.word	0x08004a47
 80049b4:	08004ac9 	.word	0x08004ac9
 80049b8:	08004ac9 	.word	0x08004ac9
 80049bc:	08004ac9 	.word	0x08004ac9
 80049c0:	08004a87 	.word	0x08004a87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 f92c 	bl	8004c28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699a      	ldr	r2, [r3, #24]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0208 	orr.w	r2, r2, #8
 80049de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0204 	bic.w	r2, r2, #4
 80049ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6999      	ldr	r1, [r3, #24]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	619a      	str	r2, [r3, #24]
      break;
 8004a02:	e064      	b.n	8004ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f948 	bl	8004ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6999      	ldr	r1, [r3, #24]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	021a      	lsls	r2, r3, #8
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	619a      	str	r2, [r3, #24]
      break;
 8004a44:	e043      	b.n	8004ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 f965 	bl	8004d1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0208 	orr.w	r2, r2, #8
 8004a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69da      	ldr	r2, [r3, #28]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0204 	bic.w	r2, r2, #4
 8004a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69d9      	ldr	r1, [r3, #28]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	61da      	str	r2, [r3, #28]
      break;
 8004a84:	e023      	b.n	8004ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 f982 	bl	8004d96 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69d9      	ldr	r1, [r3, #28]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	021a      	lsls	r2, r3, #8
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	61da      	str	r2, [r3, #28]
      break;
 8004ac6:	e002      	b.n	8004ace <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	75fb      	strb	r3, [r7, #23]
      break;
 8004acc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8004ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	4770      	bx	lr

08004af2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr
	...

08004b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b52:	d00f      	beq.n	8004b74 <TIM_Base_SetConfig+0x38>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a2e      	ldr	r2, [pc, #184]	@ (8004c10 <TIM_Base_SetConfig+0xd4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00b      	beq.n	8004b74 <TIM_Base_SetConfig+0x38>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8004c14 <TIM_Base_SetConfig+0xd8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d007      	beq.n	8004b74 <TIM_Base_SetConfig+0x38>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a2c      	ldr	r2, [pc, #176]	@ (8004c18 <TIM_Base_SetConfig+0xdc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_Base_SetConfig+0x38>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8004c1c <TIM_Base_SetConfig+0xe0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d108      	bne.n	8004b86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b8c:	d017      	beq.n	8004bbe <TIM_Base_SetConfig+0x82>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a1f      	ldr	r2, [pc, #124]	@ (8004c10 <TIM_Base_SetConfig+0xd4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <TIM_Base_SetConfig+0x82>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a1e      	ldr	r2, [pc, #120]	@ (8004c14 <TIM_Base_SetConfig+0xd8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00f      	beq.n	8004bbe <TIM_Base_SetConfig+0x82>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c18 <TIM_Base_SetConfig+0xdc>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00b      	beq.n	8004bbe <TIM_Base_SetConfig+0x82>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8004c1c <TIM_Base_SetConfig+0xe0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d007      	beq.n	8004bbe <TIM_Base_SetConfig+0x82>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8004c20 <TIM_Base_SetConfig+0xe4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d003      	beq.n	8004bbe <TIM_Base_SetConfig+0x82>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8004c24 <TIM_Base_SetConfig+0xe8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d108      	bne.n	8004bd0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f043 0204 	orr.w	r2, r3, #4
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	601a      	str	r2, [r3, #0]
}
 8004c06:	bf00      	nop
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800
 8004c18:	40000c00 	.word	0x40000c00
 8004c1c:	40010800 	.word	0x40010800
 8004c20:	40010c00 	.word	0x40010c00
 8004c24:	40011000 	.word	0x40011000

08004c28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	f023 0201 	bic.w	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0303 	bic.w	r3, r3, #3
 8004c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f023 0302 	bic.w	r3, r3, #2
 8004c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f023 0210 	bic.w	r2, r3, #16
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f023 0320 	bic.w	r3, r3, #32
 8004cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	621a      	str	r2, [r3, #32]
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr

08004d1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0303 	bic.w	r3, r3, #3
 8004d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	021b      	lsls	r3, r3, #8
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	621a      	str	r2, [r3, #32]
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr

08004d96 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b087      	sub	sp, #28
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	031b      	lsls	r3, r3, #12
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	621a      	str	r2, [r3, #32]
}
 8004e08:	bf00      	nop
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr
	...

08004e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e046      	b.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e6e:	d00e      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a13      	ldr	r2, [pc, #76]	@ (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d009      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a12      	ldr	r2, [pc, #72]	@ (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d004      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a10      	ldr	r2, [pc, #64]	@ (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40010800 	.word	0x40010800

08004ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e042      	b.n	8004f68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fc fe8a 	bl	8001c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2224      	movs	r2, #36	@ 0x24
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f971 	bl	80051fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695a      	ldr	r2, [r3, #20]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08a      	sub	sp, #40	@ 0x28
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d175      	bne.n	800507c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_UART_Transmit+0x2c>
 8004f96:	88fb      	ldrh	r3, [r7, #6]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e06e      	b.n	800507e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2221      	movs	r2, #33	@ 0x21
 8004faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fae:	f7fd f80b 	bl	8001fc8 <HAL_GetTick>
 8004fb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	88fa      	ldrh	r2, [r7, #6]
 8004fbe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fc8:	d108      	bne.n	8004fdc <HAL_UART_Transmit+0x6c>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d104      	bne.n	8004fdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	e003      	b.n	8004fe4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fe4:	e02e      	b.n	8005044 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2200      	movs	r2, #0
 8004fee:	2180      	movs	r1, #128	@ 0x80
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f848 	bl	8005086 <UART_WaitOnFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d005      	beq.n	8005008 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e03a      	b.n	800507e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10b      	bne.n	8005026 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800501c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	3302      	adds	r3, #2
 8005022:	61bb      	str	r3, [r7, #24]
 8005024:	e007      	b.n	8005036 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	781a      	ldrb	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	3301      	adds	r3, #1
 8005034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1cb      	bne.n	8004fe6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2200      	movs	r2, #0
 8005056:	2140      	movs	r1, #64	@ 0x40
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f814 	bl	8005086 <UART_WaitOnFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e006      	b.n	800507e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	e000      	b.n	800507e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800507c:	2302      	movs	r3, #2
  }
}
 800507e:	4618      	mov	r0, r3
 8005080:	3720      	adds	r7, #32
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b086      	sub	sp, #24
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	603b      	str	r3, [r7, #0]
 8005092:	4613      	mov	r3, r2
 8005094:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005096:	e03b      	b.n	8005110 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509e:	d037      	beq.n	8005110 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a0:	f7fc ff92 	bl	8001fc8 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	6a3a      	ldr	r2, [r7, #32]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d302      	bcc.n	80050b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e03a      	b.n	8005130 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d023      	beq.n	8005110 <UART_WaitOnFlagUntilTimeout+0x8a>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b80      	cmp	r3, #128	@ 0x80
 80050cc:	d020      	beq.n	8005110 <UART_WaitOnFlagUntilTimeout+0x8a>
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b40      	cmp	r3, #64	@ 0x40
 80050d2:	d01d      	beq.n	8005110 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0308 	and.w	r3, r3, #8
 80050de:	2b08      	cmp	r3, #8
 80050e0:	d116      	bne.n	8005110 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f81d 	bl	8005138 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2208      	movs	r2, #8
 8005102:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e00f      	b.n	8005130 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	4013      	ands	r3, r2
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	429a      	cmp	r2, r3
 800511e:	bf0c      	ite	eq
 8005120:	2301      	moveq	r3, #1
 8005122:	2300      	movne	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	461a      	mov	r2, r3
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	429a      	cmp	r2, r3
 800512c:	d0b4      	beq.n	8005098 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005138:	b480      	push	{r7}
 800513a:	b095      	sub	sp, #84	@ 0x54
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800514a:	e853 3f00 	ldrex	r3, [r3]
 800514e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005152:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	330c      	adds	r3, #12
 800515e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005160:	643a      	str	r2, [r7, #64]	@ 0x40
 8005162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005166:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005168:	e841 2300 	strex	r3, r2, [r1]
 800516c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800516e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e5      	bne.n	8005140 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3314      	adds	r3, #20
 800517a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	61fb      	str	r3, [r7, #28]
   return(result);
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	f023 0301 	bic.w	r3, r3, #1
 800518a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3314      	adds	r3, #20
 8005192:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005194:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005196:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800519a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e5      	bne.n	8005174 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d119      	bne.n	80051e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	60bb      	str	r3, [r7, #8]
   return(result);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f023 0310 	bic.w	r3, r3, #16
 80051c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	330c      	adds	r3, #12
 80051ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051d0:	61ba      	str	r2, [r7, #24]
 80051d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	6979      	ldr	r1, [r7, #20]
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	e841 2300 	strex	r3, r2, [r1]
 80051dc:	613b      	str	r3, [r7, #16]
   return(result);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e5      	bne.n	80051b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80051f2:	bf00      	nop
 80051f4:	3754      	adds	r7, #84	@ 0x54
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr

080051fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	4313      	orrs	r3, r2
 8005230:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800523c:	f023 030c 	bic.w	r3, r3, #12
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	430b      	orrs	r3, r1
 8005248:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699a      	ldr	r2, [r3, #24]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a55      	ldr	r2, [pc, #340]	@ (80053bc <UART_SetConfig+0x1c0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d103      	bne.n	8005272 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800526a:	f7fe ff4d 	bl	8004108 <HAL_RCC_GetPCLK2Freq>
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	e002      	b.n	8005278 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005272:	f7fe ff35 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8005276:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005280:	d14c      	bne.n	800531c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	009a      	lsls	r2, r3, #2
 800528c:	441a      	add	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	fbb2 f3f3 	udiv	r3, r2, r3
 8005298:	4a49      	ldr	r2, [pc, #292]	@ (80053c0 <UART_SetConfig+0x1c4>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	0119      	lsls	r1, r3, #4
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	009a      	lsls	r2, r3, #2
 80052ac:	441a      	add	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80052b8:	4b41      	ldr	r3, [pc, #260]	@ (80053c0 <UART_SetConfig+0x1c4>)
 80052ba:	fba3 0302 	umull	r0, r3, r3, r2
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	2064      	movs	r0, #100	@ 0x64
 80052c2:	fb00 f303 	mul.w	r3, r0, r3
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	3332      	adds	r3, #50	@ 0x32
 80052cc:	4a3c      	ldr	r2, [pc, #240]	@ (80053c0 <UART_SetConfig+0x1c4>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80052da:	4419      	add	r1, r3
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009a      	lsls	r2, r3, #2
 80052e6:	441a      	add	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80052f2:	4b33      	ldr	r3, [pc, #204]	@ (80053c0 <UART_SetConfig+0x1c4>)
 80052f4:	fba3 0302 	umull	r0, r3, r3, r2
 80052f8:	095b      	lsrs	r3, r3, #5
 80052fa:	2064      	movs	r0, #100	@ 0x64
 80052fc:	fb00 f303 	mul.w	r3, r0, r3
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	3332      	adds	r3, #50	@ 0x32
 8005306:	4a2e      	ldr	r2, [pc, #184]	@ (80053c0 <UART_SetConfig+0x1c4>)
 8005308:	fba2 2303 	umull	r2, r3, r2, r3
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	f003 0207 	and.w	r2, r3, #7
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	440a      	add	r2, r1
 8005318:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800531a:	e04a      	b.n	80053b2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	009a      	lsls	r2, r3, #2
 8005326:	441a      	add	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005332:	4a23      	ldr	r2, [pc, #140]	@ (80053c0 <UART_SetConfig+0x1c4>)
 8005334:	fba2 2303 	umull	r2, r3, r2, r3
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	0119      	lsls	r1, r3, #4
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	009a      	lsls	r2, r3, #2
 8005346:	441a      	add	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005352:	4b1b      	ldr	r3, [pc, #108]	@ (80053c0 <UART_SetConfig+0x1c4>)
 8005354:	fba3 0302 	umull	r0, r3, r3, r2
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	2064      	movs	r0, #100	@ 0x64
 800535c:	fb00 f303 	mul.w	r3, r0, r3
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	3332      	adds	r3, #50	@ 0x32
 8005366:	4a16      	ldr	r2, [pc, #88]	@ (80053c0 <UART_SetConfig+0x1c4>)
 8005368:	fba2 2303 	umull	r2, r3, r2, r3
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005372:	4419      	add	r1, r3
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	009a      	lsls	r2, r3, #2
 800537e:	441a      	add	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	fbb2 f2f3 	udiv	r2, r2, r3
 800538a:	4b0d      	ldr	r3, [pc, #52]	@ (80053c0 <UART_SetConfig+0x1c4>)
 800538c:	fba3 0302 	umull	r0, r3, r3, r2
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	2064      	movs	r0, #100	@ 0x64
 8005394:	fb00 f303 	mul.w	r3, r0, r3
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	3332      	adds	r3, #50	@ 0x32
 800539e:	4a08      	ldr	r2, [pc, #32]	@ (80053c0 <UART_SetConfig+0x1c4>)
 80053a0:	fba2 2303 	umull	r2, r3, r2, r3
 80053a4:	095b      	lsrs	r3, r3, #5
 80053a6:	f003 020f 	and.w	r2, r3, #15
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	440a      	add	r2, r1
 80053b0:	609a      	str	r2, [r3, #8]
}
 80053b2:	bf00      	nop
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40013800 	.word	0x40013800
 80053c0:	51eb851f 	.word	0x51eb851f

080053c4 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80053c4:	b590      	push	{r4, r7, lr}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	461a      	mov	r2, r3
 80053d0:	460b      	mov	r3, r1
 80053d2:	72fb      	strb	r3, [r7, #11]
 80053d4:	4613      	mov	r3, r2
 80053d6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	685c      	ldr	r4, [r3, #4]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	68d8      	ldr	r0, [r3, #12]
 80053e0:	893b      	ldrh	r3, [r7, #8]
 80053e2:	7af9      	ldrb	r1, [r7, #11]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	47a0      	blx	r4
 80053e8:	6178      	str	r0, [r7, #20]

  return ret;
 80053ea:	697b      	ldr	r3, [r7, #20]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd90      	pop	{r4, r7, pc}

080053f4 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80053f4:	b590      	push	{r4, r7, lr}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	607a      	str	r2, [r7, #4]
 80053fe:	461a      	mov	r2, r3
 8005400:	460b      	mov	r3, r1
 8005402:	72fb      	strb	r3, [r7, #11]
 8005404:	4613      	mov	r3, r2
 8005406:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681c      	ldr	r4, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	68d8      	ldr	r0, [r3, #12]
 8005410:	893b      	ldrh	r3, [r7, #8]
 8005412:	7af9      	ldrb	r1, [r7, #11]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	47a0      	blx	r4
 8005418:	6178      	str	r0, [r7, #20]

  return ret;
 800541a:	697b      	ldr	r3, [r7, #20]
}
 800541c:	4618      	mov	r0, r3
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	bd90      	pop	{r4, r7, pc}

08005424 <lis2mdl_from_lsb_to_mgauss>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lis2mdl_from_lsb_to_mgauss(int16_t lsb)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 1.5f);
 800542e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005432:	4618      	mov	r0, r3
 8005434:	f7fb fbfa 	bl	8000c2c <__aeabi_i2f>
 8005438:	4603      	mov	r3, r0
 800543a:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800543e:	4618      	mov	r0, r3
 8005440:	f7fb fc48 	bl	8000cd4 <__aeabi_fmul>
 8005444:	4603      	mov	r3, r0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	460b      	mov	r3, r1
 8005458:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800545a:	f107 0208 	add.w	r2, r7, #8
 800545e:	2301      	movs	r3, #1
 8005460:	2160      	movs	r1, #96	@ 0x60
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff ffae 	bl	80053c4 <lis2mdl_read_reg>
 8005468:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10f      	bne.n	8005490 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	b2da      	uxtb	r2, r3
 8005478:	7a3b      	ldrb	r3, [r7, #8]
 800547a:	f362 0301 	bfi	r3, r2, #0, #2
 800547e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005480:	f107 0208 	add.w	r2, r7, #8
 8005484:	2301      	movs	r3, #1
 8005486:	2160      	movs	r1, #96	@ 0x60
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff ffb3 	bl	80053f4 <lis2mdl_write_reg>
 800548e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005490:	68fb      	ldr	r3, [r7, #12]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	460b      	mov	r3, r1
 80054a4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80054a6:	f107 0208 	add.w	r2, r7, #8
 80054aa:	2301      	movs	r3, #1
 80054ac:	2160      	movs	r1, #96	@ 0x60
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff ff88 	bl	80053c4 <lis2mdl_read_reg>
 80054b4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10f      	bne.n	80054dc <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	7a3b      	ldrb	r3, [r7, #8]
 80054c6:	f362 0383 	bfi	r3, r2, #2, #2
 80054ca:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80054cc:	f107 0208 	add.w	r2, r7, #8
 80054d0:	2301      	movs	r3, #1
 80054d2:	2160      	movs	r1, #96	@ 0x60
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff ff8d 	bl	80053f4 <lis2mdl_write_reg>
 80054da:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054dc:	68fb      	ldr	r3, [r7, #12]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <lis2mdl_offset_temp_comp_set>:
  * @param  val   change the values of comp_temp_en in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_offset_temp_comp_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	460b      	mov	r3, r1
 80054f0:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80054f2:	f107 0208 	add.w	r2, r7, #8
 80054f6:	2301      	movs	r3, #1
 80054f8:	2160      	movs	r1, #96	@ 0x60
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff ff62 	bl	80053c4 <lis2mdl_read_reg>
 8005500:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10f      	bne.n	8005528 <lis2mdl_offset_temp_comp_set+0x42>
  {
    reg.comp_temp_en = val;
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	b2da      	uxtb	r2, r3
 8005510:	7a3b      	ldrb	r3, [r7, #8]
 8005512:	f362 13c7 	bfi	r3, r2, #7, #1
 8005516:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005518:	f107 0208 	add.w	r2, r7, #8
 800551c:	2301      	movs	r3, #1
 800551e:	2160      	movs	r1, #96	@ 0x60
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff ff67 	bl	80053f4 <lis2mdl_write_reg>
 8005526:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005528:	68fb      	ldr	r3, [r7, #12]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <lis2mdl_set_rst_mode_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_set_rst_mode_set(stmdev_ctx_t *ctx,
                                 lis2mdl_set_rst_t val)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	460b      	mov	r3, r1
 800553c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_b_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
 800553e:	f107 0208 	add.w	r2, r7, #8
 8005542:	2301      	movs	r3, #1
 8005544:	2161      	movs	r1, #97	@ 0x61
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7ff ff3c 	bl	80053c4 <lis2mdl_read_reg>
 800554c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10f      	bne.n	8005574 <lis2mdl_set_rst_mode_set+0x42>
  {
    reg.set_rst = (uint8_t)val;
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	b2da      	uxtb	r2, r3
 800555c:	7a3b      	ldrb	r3, [r7, #8]
 800555e:	f362 0342 	bfi	r3, r2, #1, #2
 8005562:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t *)&reg, 1);
 8005564:	f107 0208 	add.w	r2, r7, #8
 8005568:	2301      	movs	r3, #1
 800556a:	2161      	movs	r1, #97	@ 0x61
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff ff41 	bl	80053f4 <lis2mdl_write_reg>
 8005572:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005574:	68fb      	ldr	r3, [r7, #12]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	460b      	mov	r3, r1
 8005588:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800558a:	f107 0208 	add.w	r2, r7, #8
 800558e:	2301      	movs	r3, #1
 8005590:	2162      	movs	r1, #98	@ 0x62
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff ff16 	bl	80053c4 <lis2mdl_read_reg>
 8005598:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10f      	bne.n	80055c0 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	7a3b      	ldrb	r3, [r7, #8]
 80055aa:	f362 1304 	bfi	r3, r2, #4, #1
 80055ae:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80055b0:	f107 0208 	add.w	r2, r7, #8
 80055b4:	2301      	movs	r3, #1
 80055b6:	2162      	movs	r1, #98	@ 0x62
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff ff1b 	bl	80053f4 <lis2mdl_write_reg>
 80055be:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055c0:	68fb      	ldr	r3, [r7, #12]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b086      	sub	sp, #24
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80055d4:	f107 020c 	add.w	r2, r7, #12
 80055d8:	2306      	movs	r3, #6
 80055da:	2168      	movs	r1, #104	@ 0x68
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff fef1 	bl	80053c4 <lis2mdl_read_reg>
 80055e2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80055e4:	7b7b      	ldrb	r3, [r7, #13]
 80055e6:	b21a      	sxth	r2, r3
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	7b3a      	ldrb	r2, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	b21a      	sxth	r2, r3
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005604:	7bfa      	ldrb	r2, [r7, #15]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	3302      	adds	r3, #2
 800560a:	b212      	sxth	r2, r2
 800560c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	3302      	adds	r3, #2
 8005612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005616:	b29b      	uxth	r3, r3
 8005618:	021b      	lsls	r3, r3, #8
 800561a:	b29b      	uxth	r3, r3
 800561c:	7bba      	ldrb	r2, [r7, #14]
 800561e:	4413      	add	r3, r2
 8005620:	b29a      	uxth	r2, r3
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	3302      	adds	r3, #2
 8005626:	b212      	sxth	r2, r2
 8005628:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800562a:	7c7a      	ldrb	r2, [r7, #17]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	3304      	adds	r3, #4
 8005630:	b212      	sxth	r2, r2
 8005632:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	3304      	adds	r3, #4
 8005638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800563c:	b29b      	uxth	r3, r3
 800563e:	021b      	lsls	r3, r3, #8
 8005640:	b29b      	uxth	r3, r3
 8005642:	7c3a      	ldrb	r2, [r7, #16]
 8005644:	4413      	add	r3, r2
 8005646:	b29a      	uxth	r2, r3
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	3304      	adds	r3, #4
 800564c:	b212      	sxth	r2, r2
 800564e:	801a      	strh	r2, [r3, #0]

  return ret;
 8005650:	697b      	ldr	r3, [r7, #20]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005664:	2301      	movs	r3, #1
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	214f      	movs	r1, #79	@ 0x4f
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff feaa 	bl	80053c4 <lis2mdl_read_reg>
 8005670:	60f8      	str	r0, [r7, #12]

  return ret;
 8005672:	68fb      	ldr	r3, [r7, #12]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <lis2mdl_reset_set>:
  * @param  val   change the values of soft_rst in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005688:	f107 0208 	add.w	r2, r7, #8
 800568c:	2301      	movs	r3, #1
 800568e:	2160      	movs	r1, #96	@ 0x60
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fe97 	bl	80053c4 <lis2mdl_read_reg>
 8005696:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10f      	bne.n	80056be <lis2mdl_reset_set+0x42>
  {
    reg.soft_rst = val;
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	7a3b      	ldrb	r3, [r7, #8]
 80056a8:	f362 1345 	bfi	r3, r2, #5, #1
 80056ac:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80056ae:	f107 0208 	add.w	r2, r7, #8
 80056b2:	2301      	movs	r3, #1
 80056b4:	2160      	movs	r1, #96	@ 0x60
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff fe9c 	bl	80053f4 <lis2mdl_write_reg>
 80056bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80056be:	68fb      	ldr	r3, [r7, #12]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <lis2mdl_reset_get>:
  * @param  val   change the values of soft_rst in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80056d2:	f107 0208 	add.w	r2, r7, #8
 80056d6:	2301      	movs	r3, #1
 80056d8:	2160      	movs	r1, #96	@ 0x60
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff fe72 	bl	80053c4 <lis2mdl_read_reg>
 80056e0:	60f8      	str	r0, [r7, #12]
  *val = reg.soft_rst;
 80056e2:	7a3b      	ldrb	r3, [r7, #8]
 80056e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	701a      	strb	r2, [r3, #0]

  return ret;
 80056f0:	68fb      	ldr	r3, [r7, #12]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <lis2mdl_drdy_on_pin_set>:
  * @param  val   change the values of drdy_on_pin in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_drdy_on_pin_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	460b      	mov	r3, r1
 8005704:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005706:	f107 0208 	add.w	r2, r7, #8
 800570a:	2301      	movs	r3, #1
 800570c:	2162      	movs	r1, #98	@ 0x62
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7ff fe58 	bl	80053c4 <lis2mdl_read_reg>
 8005714:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10f      	bne.n	800573c <lis2mdl_drdy_on_pin_set+0x42>
  {
    reg.drdy_on_pin = val;
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	b2da      	uxtb	r2, r3
 8005724:	7a3b      	ldrb	r3, [r7, #8]
 8005726:	f362 0300 	bfi	r3, r2, #0, #1
 800572a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800572c:	f107 0208 	add.w	r2, r7, #8
 8005730:	2301      	movs	r3, #1
 8005732:	2162      	movs	r1, #98	@ 0x62
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff fe5d 	bl	80053f4 <lis2mdl_write_reg>
 800573a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800573c:	68fb      	ldr	r3, [r7, #12]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800574c:	2201      	movs	r2, #1
 800574e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005752:	4802      	ldr	r0, [pc, #8]	@ (800575c <SPI_CS_High+0x14>)
 8005754:	f7fc ff02 	bl	800255c <HAL_GPIO_WritePin>
}
 8005758:	bf00      	nop
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40020000 	.word	0x40020000

08005760 <SPI_CS_Low>:

 void SPI_CS_Low()
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8005764:	2200      	movs	r2, #0
 8005766:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800576a:	4802      	ldr	r0, [pc, #8]	@ (8005774 <SPI_CS_Low+0x14>)
 800576c:	f7fc fef6 	bl	800255c <HAL_GPIO_WritePin>
}
 8005770:	bf00      	nop
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40020000 	.word	0x40020000

08005778 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 800577c:	2107      	movs	r1, #7
 800577e:	200b      	movs	r0, #11
 8005780:	f000 f847 	bl	8005812 <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8005784:	2100      	movs	r1, #0
 8005786:	2009      	movs	r0, #9
 8005788:	f000 f843 	bl	8005812 <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 800578c:	f000 f809 	bl	80057a2 <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8005790:	f000 f80f 	bl	80057b2 <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8005794:	f000 f827 	bl	80057e6 <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 8005798:	200f      	movs	r0, #15
 800579a:	f000 f812 	bl	80057c2 <MAX7219_SetBrightness>
}
 800579e:	bf00      	nop
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 80057a6:	2101      	movs	r1, #1
 80057a8:	200c      	movs	r0, #12
 80057aa:	f000 f832 	bl	8005812 <MAX7219_Write>
}
 80057ae:	bf00      	nop
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 80057b6:	2100      	movs	r1, #0
 80057b8:	200f      	movs	r0, #15
 80057ba:	f000 f82a 	bl	8005812 <MAX7219_Write>
}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b082      	sub	sp, #8
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	4603      	mov	r3, r0
 80057ca:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	4619      	mov	r1, r3
 80057d8:	200a      	movs	r0, #10
 80057da:	f000 f81a 	bl	8005812 <MAX7219_Write>
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 80057ec:	2300      	movs	r3, #0
 80057ee:	71fb      	strb	r3, [r7, #7]
 80057f0:	e007      	b.n	8005802 <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	2100      	movs	r1, #0
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f80b 	bl	8005812 <MAX7219_Write>
  for (i=0; i < 8; i++)
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	3301      	adds	r3, #1
 8005800:	71fb      	strb	r3, [r7, #7]
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	2b07      	cmp	r3, #7
 8005806:	d9f4      	bls.n	80057f2 <MAX7219_Clear+0xc>
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
 8005818:	4603      	mov	r3, r0
 800581a:	460a      	mov	r2, r1
 800581c:	71fb      	strb	r3, [r7, #7]
 800581e:	4613      	mov	r3, r2
 8005820:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 8005822:	f7ff ff9d 	bl	8005760 <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	4618      	mov	r0, r3
 800582a:	f000 f80d 	bl	8005848 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 800582e:	79bb      	ldrb	r3, [r7, #6]
 8005830:	4618      	mov	r0, r3
 8005832:	f000 f809 	bl	8005848 <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 8005836:	f7ff ff87 	bl	8005748 <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 800583a:	f7ff ff91 	bl	8005760 <SPI_CS_Low>
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 8005852:	1df9      	adds	r1, r7, #7
 8005854:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005858:	2201      	movs	r2, #1
 800585a:	4803      	ldr	r0, [pc, #12]	@ (8005868 <MAX7219_SendByte+0x20>)
 800585c:	f7fe fd51 	bl	8004302 <HAL_SPI_Transmit>
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20000244 	.word	0x20000244

0800586c <__cvt>:
 800586c:	2b00      	cmp	r3, #0
 800586e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005872:	461d      	mov	r5, r3
 8005874:	bfbb      	ittet	lt
 8005876:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800587a:	461d      	movlt	r5, r3
 800587c:	2300      	movge	r3, #0
 800587e:	232d      	movlt	r3, #45	@ 0x2d
 8005880:	b088      	sub	sp, #32
 8005882:	4614      	mov	r4, r2
 8005884:	bfb8      	it	lt
 8005886:	4614      	movlt	r4, r2
 8005888:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800588a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800588c:	7013      	strb	r3, [r2, #0]
 800588e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005890:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005894:	f023 0820 	bic.w	r8, r3, #32
 8005898:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800589c:	d005      	beq.n	80058aa <__cvt+0x3e>
 800589e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80058a2:	d100      	bne.n	80058a6 <__cvt+0x3a>
 80058a4:	3601      	adds	r6, #1
 80058a6:	2302      	movs	r3, #2
 80058a8:	e000      	b.n	80058ac <__cvt+0x40>
 80058aa:	2303      	movs	r3, #3
 80058ac:	aa07      	add	r2, sp, #28
 80058ae:	9204      	str	r2, [sp, #16]
 80058b0:	aa06      	add	r2, sp, #24
 80058b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80058b6:	e9cd 3600 	strd	r3, r6, [sp]
 80058ba:	4622      	mov	r2, r4
 80058bc:	462b      	mov	r3, r5
 80058be:	f000 ff57 	bl	8006770 <_dtoa_r>
 80058c2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80058c6:	4607      	mov	r7, r0
 80058c8:	d119      	bne.n	80058fe <__cvt+0x92>
 80058ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80058cc:	07db      	lsls	r3, r3, #31
 80058ce:	d50e      	bpl.n	80058ee <__cvt+0x82>
 80058d0:	eb00 0906 	add.w	r9, r0, r6
 80058d4:	2200      	movs	r2, #0
 80058d6:	2300      	movs	r3, #0
 80058d8:	4620      	mov	r0, r4
 80058da:	4629      	mov	r1, r5
 80058dc:	f7fb f87c 	bl	80009d8 <__aeabi_dcmpeq>
 80058e0:	b108      	cbz	r0, 80058e6 <__cvt+0x7a>
 80058e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80058e6:	2230      	movs	r2, #48	@ 0x30
 80058e8:	9b07      	ldr	r3, [sp, #28]
 80058ea:	454b      	cmp	r3, r9
 80058ec:	d31e      	bcc.n	800592c <__cvt+0xc0>
 80058ee:	4638      	mov	r0, r7
 80058f0:	9b07      	ldr	r3, [sp, #28]
 80058f2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80058f4:	1bdb      	subs	r3, r3, r7
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	b008      	add	sp, #32
 80058fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005902:	eb00 0906 	add.w	r9, r0, r6
 8005906:	d1e5      	bne.n	80058d4 <__cvt+0x68>
 8005908:	7803      	ldrb	r3, [r0, #0]
 800590a:	2b30      	cmp	r3, #48	@ 0x30
 800590c:	d10a      	bne.n	8005924 <__cvt+0xb8>
 800590e:	2200      	movs	r2, #0
 8005910:	2300      	movs	r3, #0
 8005912:	4620      	mov	r0, r4
 8005914:	4629      	mov	r1, r5
 8005916:	f7fb f85f 	bl	80009d8 <__aeabi_dcmpeq>
 800591a:	b918      	cbnz	r0, 8005924 <__cvt+0xb8>
 800591c:	f1c6 0601 	rsb	r6, r6, #1
 8005920:	f8ca 6000 	str.w	r6, [sl]
 8005924:	f8da 3000 	ldr.w	r3, [sl]
 8005928:	4499      	add	r9, r3
 800592a:	e7d3      	b.n	80058d4 <__cvt+0x68>
 800592c:	1c59      	adds	r1, r3, #1
 800592e:	9107      	str	r1, [sp, #28]
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	e7d9      	b.n	80058e8 <__cvt+0x7c>

08005934 <__exponent>:
 8005934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005936:	2900      	cmp	r1, #0
 8005938:	bfb6      	itet	lt
 800593a:	232d      	movlt	r3, #45	@ 0x2d
 800593c:	232b      	movge	r3, #43	@ 0x2b
 800593e:	4249      	neglt	r1, r1
 8005940:	2909      	cmp	r1, #9
 8005942:	7002      	strb	r2, [r0, #0]
 8005944:	7043      	strb	r3, [r0, #1]
 8005946:	dd29      	ble.n	800599c <__exponent+0x68>
 8005948:	f10d 0307 	add.w	r3, sp, #7
 800594c:	461d      	mov	r5, r3
 800594e:	270a      	movs	r7, #10
 8005950:	fbb1 f6f7 	udiv	r6, r1, r7
 8005954:	461a      	mov	r2, r3
 8005956:	fb07 1416 	mls	r4, r7, r6, r1
 800595a:	3430      	adds	r4, #48	@ 0x30
 800595c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005960:	460c      	mov	r4, r1
 8005962:	2c63      	cmp	r4, #99	@ 0x63
 8005964:	4631      	mov	r1, r6
 8005966:	f103 33ff 	add.w	r3, r3, #4294967295
 800596a:	dcf1      	bgt.n	8005950 <__exponent+0x1c>
 800596c:	3130      	adds	r1, #48	@ 0x30
 800596e:	1e94      	subs	r4, r2, #2
 8005970:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005974:	4623      	mov	r3, r4
 8005976:	1c41      	adds	r1, r0, #1
 8005978:	42ab      	cmp	r3, r5
 800597a:	d30a      	bcc.n	8005992 <__exponent+0x5e>
 800597c:	f10d 0309 	add.w	r3, sp, #9
 8005980:	1a9b      	subs	r3, r3, r2
 8005982:	42ac      	cmp	r4, r5
 8005984:	bf88      	it	hi
 8005986:	2300      	movhi	r3, #0
 8005988:	3302      	adds	r3, #2
 800598a:	4403      	add	r3, r0
 800598c:	1a18      	subs	r0, r3, r0
 800598e:	b003      	add	sp, #12
 8005990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005992:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005996:	f801 6f01 	strb.w	r6, [r1, #1]!
 800599a:	e7ed      	b.n	8005978 <__exponent+0x44>
 800599c:	2330      	movs	r3, #48	@ 0x30
 800599e:	3130      	adds	r1, #48	@ 0x30
 80059a0:	7083      	strb	r3, [r0, #2]
 80059a2:	70c1      	strb	r1, [r0, #3]
 80059a4:	1d03      	adds	r3, r0, #4
 80059a6:	e7f1      	b.n	800598c <__exponent+0x58>

080059a8 <_printf_float>:
 80059a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ac:	b091      	sub	sp, #68	@ 0x44
 80059ae:	460c      	mov	r4, r1
 80059b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80059b4:	4616      	mov	r6, r2
 80059b6:	461f      	mov	r7, r3
 80059b8:	4605      	mov	r5, r0
 80059ba:	f000 fdcb 	bl	8006554 <_localeconv_r>
 80059be:	6803      	ldr	r3, [r0, #0]
 80059c0:	4618      	mov	r0, r3
 80059c2:	9308      	str	r3, [sp, #32]
 80059c4:	f7fa fbdc 	bl	8000180 <strlen>
 80059c8:	2300      	movs	r3, #0
 80059ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80059cc:	f8d8 3000 	ldr.w	r3, [r8]
 80059d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80059d2:	3307      	adds	r3, #7
 80059d4:	f023 0307 	bic.w	r3, r3, #7
 80059d8:	f103 0208 	add.w	r2, r3, #8
 80059dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80059e0:	f8d4 b000 	ldr.w	fp, [r4]
 80059e4:	f8c8 2000 	str.w	r2, [r8]
 80059e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80059f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059f2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80059f6:	f04f 32ff 	mov.w	r2, #4294967295
 80059fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80059fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005a02:	4b9c      	ldr	r3, [pc, #624]	@ (8005c74 <_printf_float+0x2cc>)
 8005a04:	f7fb f81a 	bl	8000a3c <__aeabi_dcmpun>
 8005a08:	bb70      	cbnz	r0, 8005a68 <_printf_float+0xc0>
 8005a0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a12:	4b98      	ldr	r3, [pc, #608]	@ (8005c74 <_printf_float+0x2cc>)
 8005a14:	f7fa fff4 	bl	8000a00 <__aeabi_dcmple>
 8005a18:	bb30      	cbnz	r0, 8005a68 <_printf_float+0xc0>
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	4640      	mov	r0, r8
 8005a20:	4649      	mov	r1, r9
 8005a22:	f7fa ffe3 	bl	80009ec <__aeabi_dcmplt>
 8005a26:	b110      	cbz	r0, 8005a2e <_printf_float+0x86>
 8005a28:	232d      	movs	r3, #45	@ 0x2d
 8005a2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a2e:	4a92      	ldr	r2, [pc, #584]	@ (8005c78 <_printf_float+0x2d0>)
 8005a30:	4b92      	ldr	r3, [pc, #584]	@ (8005c7c <_printf_float+0x2d4>)
 8005a32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005a36:	bf8c      	ite	hi
 8005a38:	4690      	movhi	r8, r2
 8005a3a:	4698      	movls	r8, r3
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	f04f 0900 	mov.w	r9, #0
 8005a42:	6123      	str	r3, [r4, #16]
 8005a44:	f02b 0304 	bic.w	r3, fp, #4
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	4633      	mov	r3, r6
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4628      	mov	r0, r5
 8005a50:	9700      	str	r7, [sp, #0]
 8005a52:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005a54:	f000 f9d4 	bl	8005e00 <_printf_common>
 8005a58:	3001      	adds	r0, #1
 8005a5a:	f040 8090 	bne.w	8005b7e <_printf_float+0x1d6>
 8005a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a62:	b011      	add	sp, #68	@ 0x44
 8005a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a68:	4642      	mov	r2, r8
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	4649      	mov	r1, r9
 8005a70:	f7fa ffe4 	bl	8000a3c <__aeabi_dcmpun>
 8005a74:	b148      	cbz	r0, 8005a8a <_printf_float+0xe2>
 8005a76:	464b      	mov	r3, r9
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	bfb8      	it	lt
 8005a7c:	232d      	movlt	r3, #45	@ 0x2d
 8005a7e:	4a80      	ldr	r2, [pc, #512]	@ (8005c80 <_printf_float+0x2d8>)
 8005a80:	bfb8      	it	lt
 8005a82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005a86:	4b7f      	ldr	r3, [pc, #508]	@ (8005c84 <_printf_float+0x2dc>)
 8005a88:	e7d3      	b.n	8005a32 <_printf_float+0x8a>
 8005a8a:	6863      	ldr	r3, [r4, #4]
 8005a8c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	d13f      	bne.n	8005b14 <_printf_float+0x16c>
 8005a94:	2306      	movs	r3, #6
 8005a96:	6063      	str	r3, [r4, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005a9e:	6023      	str	r3, [r4, #0]
 8005aa0:	9206      	str	r2, [sp, #24]
 8005aa2:	aa0e      	add	r2, sp, #56	@ 0x38
 8005aa4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005aa8:	aa0d      	add	r2, sp, #52	@ 0x34
 8005aaa:	9203      	str	r2, [sp, #12]
 8005aac:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005ab0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005ab4:	6863      	ldr	r3, [r4, #4]
 8005ab6:	4642      	mov	r2, r8
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	4628      	mov	r0, r5
 8005abc:	464b      	mov	r3, r9
 8005abe:	910a      	str	r1, [sp, #40]	@ 0x28
 8005ac0:	f7ff fed4 	bl	800586c <__cvt>
 8005ac4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ac6:	4680      	mov	r8, r0
 8005ac8:	2947      	cmp	r1, #71	@ 0x47
 8005aca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005acc:	d128      	bne.n	8005b20 <_printf_float+0x178>
 8005ace:	1cc8      	adds	r0, r1, #3
 8005ad0:	db02      	blt.n	8005ad8 <_printf_float+0x130>
 8005ad2:	6863      	ldr	r3, [r4, #4]
 8005ad4:	4299      	cmp	r1, r3
 8005ad6:	dd40      	ble.n	8005b5a <_printf_float+0x1b2>
 8005ad8:	f1aa 0a02 	sub.w	sl, sl, #2
 8005adc:	fa5f fa8a 	uxtb.w	sl, sl
 8005ae0:	4652      	mov	r2, sl
 8005ae2:	3901      	subs	r1, #1
 8005ae4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005ae8:	910d      	str	r1, [sp, #52]	@ 0x34
 8005aea:	f7ff ff23 	bl	8005934 <__exponent>
 8005aee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005af0:	4681      	mov	r9, r0
 8005af2:	1813      	adds	r3, r2, r0
 8005af4:	2a01      	cmp	r2, #1
 8005af6:	6123      	str	r3, [r4, #16]
 8005af8:	dc02      	bgt.n	8005b00 <_printf_float+0x158>
 8005afa:	6822      	ldr	r2, [r4, #0]
 8005afc:	07d2      	lsls	r2, r2, #31
 8005afe:	d501      	bpl.n	8005b04 <_printf_float+0x15c>
 8005b00:	3301      	adds	r3, #1
 8005b02:	6123      	str	r3, [r4, #16]
 8005b04:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d09e      	beq.n	8005a4a <_printf_float+0xa2>
 8005b0c:	232d      	movs	r3, #45	@ 0x2d
 8005b0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b12:	e79a      	b.n	8005a4a <_printf_float+0xa2>
 8005b14:	2947      	cmp	r1, #71	@ 0x47
 8005b16:	d1bf      	bne.n	8005a98 <_printf_float+0xf0>
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1bd      	bne.n	8005a98 <_printf_float+0xf0>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e7ba      	b.n	8005a96 <_printf_float+0xee>
 8005b20:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b24:	d9dc      	bls.n	8005ae0 <_printf_float+0x138>
 8005b26:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005b2a:	d118      	bne.n	8005b5e <_printf_float+0x1b6>
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	6863      	ldr	r3, [r4, #4]
 8005b30:	dd0b      	ble.n	8005b4a <_printf_float+0x1a2>
 8005b32:	6121      	str	r1, [r4, #16]
 8005b34:	b913      	cbnz	r3, 8005b3c <_printf_float+0x194>
 8005b36:	6822      	ldr	r2, [r4, #0]
 8005b38:	07d0      	lsls	r0, r2, #31
 8005b3a:	d502      	bpl.n	8005b42 <_printf_float+0x19a>
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	440b      	add	r3, r1
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	f04f 0900 	mov.w	r9, #0
 8005b46:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005b48:	e7dc      	b.n	8005b04 <_printf_float+0x15c>
 8005b4a:	b913      	cbnz	r3, 8005b52 <_printf_float+0x1aa>
 8005b4c:	6822      	ldr	r2, [r4, #0]
 8005b4e:	07d2      	lsls	r2, r2, #31
 8005b50:	d501      	bpl.n	8005b56 <_printf_float+0x1ae>
 8005b52:	3302      	adds	r3, #2
 8005b54:	e7f4      	b.n	8005b40 <_printf_float+0x198>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e7f2      	b.n	8005b40 <_printf_float+0x198>
 8005b5a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005b5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b60:	4299      	cmp	r1, r3
 8005b62:	db05      	blt.n	8005b70 <_printf_float+0x1c8>
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	6121      	str	r1, [r4, #16]
 8005b68:	07d8      	lsls	r0, r3, #31
 8005b6a:	d5ea      	bpl.n	8005b42 <_printf_float+0x19a>
 8005b6c:	1c4b      	adds	r3, r1, #1
 8005b6e:	e7e7      	b.n	8005b40 <_printf_float+0x198>
 8005b70:	2900      	cmp	r1, #0
 8005b72:	bfcc      	ite	gt
 8005b74:	2201      	movgt	r2, #1
 8005b76:	f1c1 0202 	rsble	r2, r1, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	e7e0      	b.n	8005b40 <_printf_float+0x198>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	055a      	lsls	r2, r3, #21
 8005b82:	d407      	bmi.n	8005b94 <_printf_float+0x1ec>
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	4642      	mov	r2, r8
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d12b      	bne.n	8005bea <_printf_float+0x242>
 8005b92:	e764      	b.n	8005a5e <_printf_float+0xb6>
 8005b94:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b98:	f240 80dc 	bls.w	8005d54 <_printf_float+0x3ac>
 8005b9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f7fa ff18 	bl	80009d8 <__aeabi_dcmpeq>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d033      	beq.n	8005c14 <_printf_float+0x26c>
 8005bac:	2301      	movs	r3, #1
 8005bae:	4631      	mov	r1, r6
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	4a35      	ldr	r2, [pc, #212]	@ (8005c88 <_printf_float+0x2e0>)
 8005bb4:	47b8      	blx	r7
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	f43f af51 	beq.w	8005a5e <_printf_float+0xb6>
 8005bbc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005bc0:	4543      	cmp	r3, r8
 8005bc2:	db02      	blt.n	8005bca <_printf_float+0x222>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	07d8      	lsls	r0, r3, #31
 8005bc8:	d50f      	bpl.n	8005bea <_printf_float+0x242>
 8005bca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b8      	blx	r7
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	f43f af42 	beq.w	8005a5e <_printf_float+0xb6>
 8005bda:	f04f 0900 	mov.w	r9, #0
 8005bde:	f108 38ff 	add.w	r8, r8, #4294967295
 8005be2:	f104 0a1a 	add.w	sl, r4, #26
 8005be6:	45c8      	cmp	r8, r9
 8005be8:	dc09      	bgt.n	8005bfe <_printf_float+0x256>
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	079b      	lsls	r3, r3, #30
 8005bee:	f100 8102 	bmi.w	8005df6 <_printf_float+0x44e>
 8005bf2:	68e0      	ldr	r0, [r4, #12]
 8005bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bf6:	4298      	cmp	r0, r3
 8005bf8:	bfb8      	it	lt
 8005bfa:	4618      	movlt	r0, r3
 8005bfc:	e731      	b.n	8005a62 <_printf_float+0xba>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	4652      	mov	r2, sl
 8005c02:	4631      	mov	r1, r6
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b8      	blx	r7
 8005c08:	3001      	adds	r0, #1
 8005c0a:	f43f af28 	beq.w	8005a5e <_printf_float+0xb6>
 8005c0e:	f109 0901 	add.w	r9, r9, #1
 8005c12:	e7e8      	b.n	8005be6 <_printf_float+0x23e>
 8005c14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	dc38      	bgt.n	8005c8c <_printf_float+0x2e4>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	4631      	mov	r1, r6
 8005c1e:	4628      	mov	r0, r5
 8005c20:	4a19      	ldr	r2, [pc, #100]	@ (8005c88 <_printf_float+0x2e0>)
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	f43f af1a 	beq.w	8005a5e <_printf_float+0xb6>
 8005c2a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005c2e:	ea59 0303 	orrs.w	r3, r9, r3
 8005c32:	d102      	bne.n	8005c3a <_printf_float+0x292>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	07d9      	lsls	r1, r3, #31
 8005c38:	d5d7      	bpl.n	8005bea <_printf_float+0x242>
 8005c3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4628      	mov	r0, r5
 8005c42:	47b8      	blx	r7
 8005c44:	3001      	adds	r0, #1
 8005c46:	f43f af0a 	beq.w	8005a5e <_printf_float+0xb6>
 8005c4a:	f04f 0a00 	mov.w	sl, #0
 8005c4e:	f104 0b1a 	add.w	fp, r4, #26
 8005c52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c54:	425b      	negs	r3, r3
 8005c56:	4553      	cmp	r3, sl
 8005c58:	dc01      	bgt.n	8005c5e <_printf_float+0x2b6>
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	e793      	b.n	8005b86 <_printf_float+0x1de>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	465a      	mov	r2, fp
 8005c62:	4631      	mov	r1, r6
 8005c64:	4628      	mov	r0, r5
 8005c66:	47b8      	blx	r7
 8005c68:	3001      	adds	r0, #1
 8005c6a:	f43f aef8 	beq.w	8005a5e <_printf_float+0xb6>
 8005c6e:	f10a 0a01 	add.w	sl, sl, #1
 8005c72:	e7ee      	b.n	8005c52 <_printf_float+0x2aa>
 8005c74:	7fefffff 	.word	0x7fefffff
 8005c78:	080083c0 	.word	0x080083c0
 8005c7c:	080083bc 	.word	0x080083bc
 8005c80:	080083c8 	.word	0x080083c8
 8005c84:	080083c4 	.word	0x080083c4
 8005c88:	080083cc 	.word	0x080083cc
 8005c8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c8e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005c92:	4553      	cmp	r3, sl
 8005c94:	bfa8      	it	ge
 8005c96:	4653      	movge	r3, sl
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	4699      	mov	r9, r3
 8005c9c:	dc36      	bgt.n	8005d0c <_printf_float+0x364>
 8005c9e:	f04f 0b00 	mov.w	fp, #0
 8005ca2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ca6:	f104 021a 	add.w	r2, r4, #26
 8005caa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005cac:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cae:	eba3 0309 	sub.w	r3, r3, r9
 8005cb2:	455b      	cmp	r3, fp
 8005cb4:	dc31      	bgt.n	8005d1a <_printf_float+0x372>
 8005cb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cb8:	459a      	cmp	sl, r3
 8005cba:	dc3a      	bgt.n	8005d32 <_printf_float+0x38a>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	07da      	lsls	r2, r3, #31
 8005cc0:	d437      	bmi.n	8005d32 <_printf_float+0x38a>
 8005cc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cc4:	ebaa 0903 	sub.w	r9, sl, r3
 8005cc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cca:	ebaa 0303 	sub.w	r3, sl, r3
 8005cce:	4599      	cmp	r9, r3
 8005cd0:	bfa8      	it	ge
 8005cd2:	4699      	movge	r9, r3
 8005cd4:	f1b9 0f00 	cmp.w	r9, #0
 8005cd8:	dc33      	bgt.n	8005d42 <_printf_float+0x39a>
 8005cda:	f04f 0800 	mov.w	r8, #0
 8005cde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ce2:	f104 0b1a 	add.w	fp, r4, #26
 8005ce6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ce8:	ebaa 0303 	sub.w	r3, sl, r3
 8005cec:	eba3 0309 	sub.w	r3, r3, r9
 8005cf0:	4543      	cmp	r3, r8
 8005cf2:	f77f af7a 	ble.w	8005bea <_printf_float+0x242>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	465a      	mov	r2, fp
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	47b8      	blx	r7
 8005d00:	3001      	adds	r0, #1
 8005d02:	f43f aeac 	beq.w	8005a5e <_printf_float+0xb6>
 8005d06:	f108 0801 	add.w	r8, r8, #1
 8005d0a:	e7ec      	b.n	8005ce6 <_printf_float+0x33e>
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	4631      	mov	r1, r6
 8005d10:	4628      	mov	r0, r5
 8005d12:	47b8      	blx	r7
 8005d14:	3001      	adds	r0, #1
 8005d16:	d1c2      	bne.n	8005c9e <_printf_float+0x2f6>
 8005d18:	e6a1      	b.n	8005a5e <_printf_float+0xb6>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	4631      	mov	r1, r6
 8005d1e:	4628      	mov	r0, r5
 8005d20:	920a      	str	r2, [sp, #40]	@ 0x28
 8005d22:	47b8      	blx	r7
 8005d24:	3001      	adds	r0, #1
 8005d26:	f43f ae9a 	beq.w	8005a5e <_printf_float+0xb6>
 8005d2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d2c:	f10b 0b01 	add.w	fp, fp, #1
 8005d30:	e7bb      	b.n	8005caa <_printf_float+0x302>
 8005d32:	4631      	mov	r1, r6
 8005d34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d38:	4628      	mov	r0, r5
 8005d3a:	47b8      	blx	r7
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d1c0      	bne.n	8005cc2 <_printf_float+0x31a>
 8005d40:	e68d      	b.n	8005a5e <_printf_float+0xb6>
 8005d42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d44:	464b      	mov	r3, r9
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	4442      	add	r2, r8
 8005d4c:	47b8      	blx	r7
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d1c3      	bne.n	8005cda <_printf_float+0x332>
 8005d52:	e684      	b.n	8005a5e <_printf_float+0xb6>
 8005d54:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005d58:	f1ba 0f01 	cmp.w	sl, #1
 8005d5c:	dc01      	bgt.n	8005d62 <_printf_float+0x3ba>
 8005d5e:	07db      	lsls	r3, r3, #31
 8005d60:	d536      	bpl.n	8005dd0 <_printf_float+0x428>
 8005d62:	2301      	movs	r3, #1
 8005d64:	4642      	mov	r2, r8
 8005d66:	4631      	mov	r1, r6
 8005d68:	4628      	mov	r0, r5
 8005d6a:	47b8      	blx	r7
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	f43f ae76 	beq.w	8005a5e <_printf_float+0xb6>
 8005d72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d76:	4631      	mov	r1, r6
 8005d78:	4628      	mov	r0, r5
 8005d7a:	47b8      	blx	r7
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	f43f ae6e 	beq.w	8005a5e <_printf_float+0xb6>
 8005d82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d86:	2200      	movs	r2, #0
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d8e:	f7fa fe23 	bl	80009d8 <__aeabi_dcmpeq>
 8005d92:	b9c0      	cbnz	r0, 8005dc6 <_printf_float+0x41e>
 8005d94:	4653      	mov	r3, sl
 8005d96:	f108 0201 	add.w	r2, r8, #1
 8005d9a:	4631      	mov	r1, r6
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	47b8      	blx	r7
 8005da0:	3001      	adds	r0, #1
 8005da2:	d10c      	bne.n	8005dbe <_printf_float+0x416>
 8005da4:	e65b      	b.n	8005a5e <_printf_float+0xb6>
 8005da6:	2301      	movs	r3, #1
 8005da8:	465a      	mov	r2, fp
 8005daa:	4631      	mov	r1, r6
 8005dac:	4628      	mov	r0, r5
 8005dae:	47b8      	blx	r7
 8005db0:	3001      	adds	r0, #1
 8005db2:	f43f ae54 	beq.w	8005a5e <_printf_float+0xb6>
 8005db6:	f108 0801 	add.w	r8, r8, #1
 8005dba:	45d0      	cmp	r8, sl
 8005dbc:	dbf3      	blt.n	8005da6 <_printf_float+0x3fe>
 8005dbe:	464b      	mov	r3, r9
 8005dc0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005dc4:	e6e0      	b.n	8005b88 <_printf_float+0x1e0>
 8005dc6:	f04f 0800 	mov.w	r8, #0
 8005dca:	f104 0b1a 	add.w	fp, r4, #26
 8005dce:	e7f4      	b.n	8005dba <_printf_float+0x412>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	4642      	mov	r2, r8
 8005dd4:	e7e1      	b.n	8005d9a <_printf_float+0x3f2>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	464a      	mov	r2, r9
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4628      	mov	r0, r5
 8005dde:	47b8      	blx	r7
 8005de0:	3001      	adds	r0, #1
 8005de2:	f43f ae3c 	beq.w	8005a5e <_printf_float+0xb6>
 8005de6:	f108 0801 	add.w	r8, r8, #1
 8005dea:	68e3      	ldr	r3, [r4, #12]
 8005dec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005dee:	1a5b      	subs	r3, r3, r1
 8005df0:	4543      	cmp	r3, r8
 8005df2:	dcf0      	bgt.n	8005dd6 <_printf_float+0x42e>
 8005df4:	e6fd      	b.n	8005bf2 <_printf_float+0x24a>
 8005df6:	f04f 0800 	mov.w	r8, #0
 8005dfa:	f104 0919 	add.w	r9, r4, #25
 8005dfe:	e7f4      	b.n	8005dea <_printf_float+0x442>

08005e00 <_printf_common>:
 8005e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e04:	4616      	mov	r6, r2
 8005e06:	4698      	mov	r8, r3
 8005e08:	688a      	ldr	r2, [r1, #8]
 8005e0a:	690b      	ldr	r3, [r1, #16]
 8005e0c:	4607      	mov	r7, r0
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	bfb8      	it	lt
 8005e12:	4613      	movlt	r3, r2
 8005e14:	6033      	str	r3, [r6, #0]
 8005e16:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e20:	b10a      	cbz	r2, 8005e26 <_printf_common+0x26>
 8005e22:	3301      	adds	r3, #1
 8005e24:	6033      	str	r3, [r6, #0]
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	0699      	lsls	r1, r3, #26
 8005e2a:	bf42      	ittt	mi
 8005e2c:	6833      	ldrmi	r3, [r6, #0]
 8005e2e:	3302      	addmi	r3, #2
 8005e30:	6033      	strmi	r3, [r6, #0]
 8005e32:	6825      	ldr	r5, [r4, #0]
 8005e34:	f015 0506 	ands.w	r5, r5, #6
 8005e38:	d106      	bne.n	8005e48 <_printf_common+0x48>
 8005e3a:	f104 0a19 	add.w	sl, r4, #25
 8005e3e:	68e3      	ldr	r3, [r4, #12]
 8005e40:	6832      	ldr	r2, [r6, #0]
 8005e42:	1a9b      	subs	r3, r3, r2
 8005e44:	42ab      	cmp	r3, r5
 8005e46:	dc2b      	bgt.n	8005ea0 <_printf_common+0xa0>
 8005e48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e4c:	6822      	ldr	r2, [r4, #0]
 8005e4e:	3b00      	subs	r3, #0
 8005e50:	bf18      	it	ne
 8005e52:	2301      	movne	r3, #1
 8005e54:	0692      	lsls	r2, r2, #26
 8005e56:	d430      	bmi.n	8005eba <_printf_common+0xba>
 8005e58:	4641      	mov	r1, r8
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e60:	47c8      	blx	r9
 8005e62:	3001      	adds	r0, #1
 8005e64:	d023      	beq.n	8005eae <_printf_common+0xae>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	6922      	ldr	r2, [r4, #16]
 8005e6a:	f003 0306 	and.w	r3, r3, #6
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	bf14      	ite	ne
 8005e72:	2500      	movne	r5, #0
 8005e74:	6833      	ldreq	r3, [r6, #0]
 8005e76:	f04f 0600 	mov.w	r6, #0
 8005e7a:	bf08      	it	eq
 8005e7c:	68e5      	ldreq	r5, [r4, #12]
 8005e7e:	f104 041a 	add.w	r4, r4, #26
 8005e82:	bf08      	it	eq
 8005e84:	1aed      	subeq	r5, r5, r3
 8005e86:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005e8a:	bf08      	it	eq
 8005e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e90:	4293      	cmp	r3, r2
 8005e92:	bfc4      	itt	gt
 8005e94:	1a9b      	subgt	r3, r3, r2
 8005e96:	18ed      	addgt	r5, r5, r3
 8005e98:	42b5      	cmp	r5, r6
 8005e9a:	d11a      	bne.n	8005ed2 <_printf_common+0xd2>
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	e008      	b.n	8005eb2 <_printf_common+0xb2>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	4652      	mov	r2, sl
 8005ea4:	4641      	mov	r1, r8
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	47c8      	blx	r9
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d103      	bne.n	8005eb6 <_printf_common+0xb6>
 8005eae:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb6:	3501      	adds	r5, #1
 8005eb8:	e7c1      	b.n	8005e3e <_printf_common+0x3e>
 8005eba:	2030      	movs	r0, #48	@ 0x30
 8005ebc:	18e1      	adds	r1, r4, r3
 8005ebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ec8:	4422      	add	r2, r4
 8005eca:	3302      	adds	r3, #2
 8005ecc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ed0:	e7c2      	b.n	8005e58 <_printf_common+0x58>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	4622      	mov	r2, r4
 8005ed6:	4641      	mov	r1, r8
 8005ed8:	4638      	mov	r0, r7
 8005eda:	47c8      	blx	r9
 8005edc:	3001      	adds	r0, #1
 8005ede:	d0e6      	beq.n	8005eae <_printf_common+0xae>
 8005ee0:	3601      	adds	r6, #1
 8005ee2:	e7d9      	b.n	8005e98 <_printf_common+0x98>

08005ee4 <_printf_i>:
 8005ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee8:	7e0f      	ldrb	r7, [r1, #24]
 8005eea:	4691      	mov	r9, r2
 8005eec:	2f78      	cmp	r7, #120	@ 0x78
 8005eee:	4680      	mov	r8, r0
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	469a      	mov	sl, r3
 8005ef4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005efa:	d807      	bhi.n	8005f0c <_printf_i+0x28>
 8005efc:	2f62      	cmp	r7, #98	@ 0x62
 8005efe:	d80a      	bhi.n	8005f16 <_printf_i+0x32>
 8005f00:	2f00      	cmp	r7, #0
 8005f02:	f000 80d1 	beq.w	80060a8 <_printf_i+0x1c4>
 8005f06:	2f58      	cmp	r7, #88	@ 0x58
 8005f08:	f000 80b8 	beq.w	800607c <_printf_i+0x198>
 8005f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f14:	e03a      	b.n	8005f8c <_printf_i+0xa8>
 8005f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f1a:	2b15      	cmp	r3, #21
 8005f1c:	d8f6      	bhi.n	8005f0c <_printf_i+0x28>
 8005f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8005f24 <_printf_i+0x40>)
 8005f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f24:	08005f7d 	.word	0x08005f7d
 8005f28:	08005f91 	.word	0x08005f91
 8005f2c:	08005f0d 	.word	0x08005f0d
 8005f30:	08005f0d 	.word	0x08005f0d
 8005f34:	08005f0d 	.word	0x08005f0d
 8005f38:	08005f0d 	.word	0x08005f0d
 8005f3c:	08005f91 	.word	0x08005f91
 8005f40:	08005f0d 	.word	0x08005f0d
 8005f44:	08005f0d 	.word	0x08005f0d
 8005f48:	08005f0d 	.word	0x08005f0d
 8005f4c:	08005f0d 	.word	0x08005f0d
 8005f50:	0800608f 	.word	0x0800608f
 8005f54:	08005fbb 	.word	0x08005fbb
 8005f58:	08006049 	.word	0x08006049
 8005f5c:	08005f0d 	.word	0x08005f0d
 8005f60:	08005f0d 	.word	0x08005f0d
 8005f64:	080060b1 	.word	0x080060b1
 8005f68:	08005f0d 	.word	0x08005f0d
 8005f6c:	08005fbb 	.word	0x08005fbb
 8005f70:	08005f0d 	.word	0x08005f0d
 8005f74:	08005f0d 	.word	0x08005f0d
 8005f78:	08006051 	.word	0x08006051
 8005f7c:	6833      	ldr	r3, [r6, #0]
 8005f7e:	1d1a      	adds	r2, r3, #4
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6032      	str	r2, [r6, #0]
 8005f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e09c      	b.n	80060ca <_printf_i+0x1e6>
 8005f90:	6833      	ldr	r3, [r6, #0]
 8005f92:	6820      	ldr	r0, [r4, #0]
 8005f94:	1d19      	adds	r1, r3, #4
 8005f96:	6031      	str	r1, [r6, #0]
 8005f98:	0606      	lsls	r6, r0, #24
 8005f9a:	d501      	bpl.n	8005fa0 <_printf_i+0xbc>
 8005f9c:	681d      	ldr	r5, [r3, #0]
 8005f9e:	e003      	b.n	8005fa8 <_printf_i+0xc4>
 8005fa0:	0645      	lsls	r5, r0, #25
 8005fa2:	d5fb      	bpl.n	8005f9c <_printf_i+0xb8>
 8005fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fa8:	2d00      	cmp	r5, #0
 8005faa:	da03      	bge.n	8005fb4 <_printf_i+0xd0>
 8005fac:	232d      	movs	r3, #45	@ 0x2d
 8005fae:	426d      	negs	r5, r5
 8005fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fb4:	230a      	movs	r3, #10
 8005fb6:	4858      	ldr	r0, [pc, #352]	@ (8006118 <_printf_i+0x234>)
 8005fb8:	e011      	b.n	8005fde <_printf_i+0xfa>
 8005fba:	6821      	ldr	r1, [r4, #0]
 8005fbc:	6833      	ldr	r3, [r6, #0]
 8005fbe:	0608      	lsls	r0, r1, #24
 8005fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fc4:	d402      	bmi.n	8005fcc <_printf_i+0xe8>
 8005fc6:	0649      	lsls	r1, r1, #25
 8005fc8:	bf48      	it	mi
 8005fca:	b2ad      	uxthmi	r5, r5
 8005fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fce:	6033      	str	r3, [r6, #0]
 8005fd0:	bf14      	ite	ne
 8005fd2:	230a      	movne	r3, #10
 8005fd4:	2308      	moveq	r3, #8
 8005fd6:	4850      	ldr	r0, [pc, #320]	@ (8006118 <_printf_i+0x234>)
 8005fd8:	2100      	movs	r1, #0
 8005fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fde:	6866      	ldr	r6, [r4, #4]
 8005fe0:	2e00      	cmp	r6, #0
 8005fe2:	60a6      	str	r6, [r4, #8]
 8005fe4:	db05      	blt.n	8005ff2 <_printf_i+0x10e>
 8005fe6:	6821      	ldr	r1, [r4, #0]
 8005fe8:	432e      	orrs	r6, r5
 8005fea:	f021 0104 	bic.w	r1, r1, #4
 8005fee:	6021      	str	r1, [r4, #0]
 8005ff0:	d04b      	beq.n	800608a <_printf_i+0x1a6>
 8005ff2:	4616      	mov	r6, r2
 8005ff4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ff8:	fb03 5711 	mls	r7, r3, r1, r5
 8005ffc:	5dc7      	ldrb	r7, [r0, r7]
 8005ffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006002:	462f      	mov	r7, r5
 8006004:	42bb      	cmp	r3, r7
 8006006:	460d      	mov	r5, r1
 8006008:	d9f4      	bls.n	8005ff4 <_printf_i+0x110>
 800600a:	2b08      	cmp	r3, #8
 800600c:	d10b      	bne.n	8006026 <_printf_i+0x142>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	07df      	lsls	r7, r3, #31
 8006012:	d508      	bpl.n	8006026 <_printf_i+0x142>
 8006014:	6923      	ldr	r3, [r4, #16]
 8006016:	6861      	ldr	r1, [r4, #4]
 8006018:	4299      	cmp	r1, r3
 800601a:	bfde      	ittt	le
 800601c:	2330      	movle	r3, #48	@ 0x30
 800601e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006022:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006026:	1b92      	subs	r2, r2, r6
 8006028:	6122      	str	r2, [r4, #16]
 800602a:	464b      	mov	r3, r9
 800602c:	4621      	mov	r1, r4
 800602e:	4640      	mov	r0, r8
 8006030:	f8cd a000 	str.w	sl, [sp]
 8006034:	aa03      	add	r2, sp, #12
 8006036:	f7ff fee3 	bl	8005e00 <_printf_common>
 800603a:	3001      	adds	r0, #1
 800603c:	d14a      	bne.n	80060d4 <_printf_i+0x1f0>
 800603e:	f04f 30ff 	mov.w	r0, #4294967295
 8006042:	b004      	add	sp, #16
 8006044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	f043 0320 	orr.w	r3, r3, #32
 800604e:	6023      	str	r3, [r4, #0]
 8006050:	2778      	movs	r7, #120	@ 0x78
 8006052:	4832      	ldr	r0, [pc, #200]	@ (800611c <_printf_i+0x238>)
 8006054:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	6831      	ldr	r1, [r6, #0]
 800605c:	061f      	lsls	r7, r3, #24
 800605e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006062:	d402      	bmi.n	800606a <_printf_i+0x186>
 8006064:	065f      	lsls	r7, r3, #25
 8006066:	bf48      	it	mi
 8006068:	b2ad      	uxthmi	r5, r5
 800606a:	6031      	str	r1, [r6, #0]
 800606c:	07d9      	lsls	r1, r3, #31
 800606e:	bf44      	itt	mi
 8006070:	f043 0320 	orrmi.w	r3, r3, #32
 8006074:	6023      	strmi	r3, [r4, #0]
 8006076:	b11d      	cbz	r5, 8006080 <_printf_i+0x19c>
 8006078:	2310      	movs	r3, #16
 800607a:	e7ad      	b.n	8005fd8 <_printf_i+0xf4>
 800607c:	4826      	ldr	r0, [pc, #152]	@ (8006118 <_printf_i+0x234>)
 800607e:	e7e9      	b.n	8006054 <_printf_i+0x170>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	f023 0320 	bic.w	r3, r3, #32
 8006086:	6023      	str	r3, [r4, #0]
 8006088:	e7f6      	b.n	8006078 <_printf_i+0x194>
 800608a:	4616      	mov	r6, r2
 800608c:	e7bd      	b.n	800600a <_printf_i+0x126>
 800608e:	6833      	ldr	r3, [r6, #0]
 8006090:	6825      	ldr	r5, [r4, #0]
 8006092:	1d18      	adds	r0, r3, #4
 8006094:	6961      	ldr	r1, [r4, #20]
 8006096:	6030      	str	r0, [r6, #0]
 8006098:	062e      	lsls	r6, r5, #24
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	d501      	bpl.n	80060a2 <_printf_i+0x1be>
 800609e:	6019      	str	r1, [r3, #0]
 80060a0:	e002      	b.n	80060a8 <_printf_i+0x1c4>
 80060a2:	0668      	lsls	r0, r5, #25
 80060a4:	d5fb      	bpl.n	800609e <_printf_i+0x1ba>
 80060a6:	8019      	strh	r1, [r3, #0]
 80060a8:	2300      	movs	r3, #0
 80060aa:	4616      	mov	r6, r2
 80060ac:	6123      	str	r3, [r4, #16]
 80060ae:	e7bc      	b.n	800602a <_printf_i+0x146>
 80060b0:	6833      	ldr	r3, [r6, #0]
 80060b2:	2100      	movs	r1, #0
 80060b4:	1d1a      	adds	r2, r3, #4
 80060b6:	6032      	str	r2, [r6, #0]
 80060b8:	681e      	ldr	r6, [r3, #0]
 80060ba:	6862      	ldr	r2, [r4, #4]
 80060bc:	4630      	mov	r0, r6
 80060be:	f000 fac0 	bl	8006642 <memchr>
 80060c2:	b108      	cbz	r0, 80060c8 <_printf_i+0x1e4>
 80060c4:	1b80      	subs	r0, r0, r6
 80060c6:	6060      	str	r0, [r4, #4]
 80060c8:	6863      	ldr	r3, [r4, #4]
 80060ca:	6123      	str	r3, [r4, #16]
 80060cc:	2300      	movs	r3, #0
 80060ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060d2:	e7aa      	b.n	800602a <_printf_i+0x146>
 80060d4:	4632      	mov	r2, r6
 80060d6:	4649      	mov	r1, r9
 80060d8:	4640      	mov	r0, r8
 80060da:	6923      	ldr	r3, [r4, #16]
 80060dc:	47d0      	blx	sl
 80060de:	3001      	adds	r0, #1
 80060e0:	d0ad      	beq.n	800603e <_printf_i+0x15a>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	079b      	lsls	r3, r3, #30
 80060e6:	d413      	bmi.n	8006110 <_printf_i+0x22c>
 80060e8:	68e0      	ldr	r0, [r4, #12]
 80060ea:	9b03      	ldr	r3, [sp, #12]
 80060ec:	4298      	cmp	r0, r3
 80060ee:	bfb8      	it	lt
 80060f0:	4618      	movlt	r0, r3
 80060f2:	e7a6      	b.n	8006042 <_printf_i+0x15e>
 80060f4:	2301      	movs	r3, #1
 80060f6:	4632      	mov	r2, r6
 80060f8:	4649      	mov	r1, r9
 80060fa:	4640      	mov	r0, r8
 80060fc:	47d0      	blx	sl
 80060fe:	3001      	adds	r0, #1
 8006100:	d09d      	beq.n	800603e <_printf_i+0x15a>
 8006102:	3501      	adds	r5, #1
 8006104:	68e3      	ldr	r3, [r4, #12]
 8006106:	9903      	ldr	r1, [sp, #12]
 8006108:	1a5b      	subs	r3, r3, r1
 800610a:	42ab      	cmp	r3, r5
 800610c:	dcf2      	bgt.n	80060f4 <_printf_i+0x210>
 800610e:	e7eb      	b.n	80060e8 <_printf_i+0x204>
 8006110:	2500      	movs	r5, #0
 8006112:	f104 0619 	add.w	r6, r4, #25
 8006116:	e7f5      	b.n	8006104 <_printf_i+0x220>
 8006118:	080083ce 	.word	0x080083ce
 800611c:	080083df 	.word	0x080083df

08006120 <std>:
 8006120:	2300      	movs	r3, #0
 8006122:	b510      	push	{r4, lr}
 8006124:	4604      	mov	r4, r0
 8006126:	e9c0 3300 	strd	r3, r3, [r0]
 800612a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800612e:	6083      	str	r3, [r0, #8]
 8006130:	8181      	strh	r1, [r0, #12]
 8006132:	6643      	str	r3, [r0, #100]	@ 0x64
 8006134:	81c2      	strh	r2, [r0, #14]
 8006136:	6183      	str	r3, [r0, #24]
 8006138:	4619      	mov	r1, r3
 800613a:	2208      	movs	r2, #8
 800613c:	305c      	adds	r0, #92	@ 0x5c
 800613e:	f000 fa01 	bl	8006544 <memset>
 8006142:	4b0d      	ldr	r3, [pc, #52]	@ (8006178 <std+0x58>)
 8006144:	6224      	str	r4, [r4, #32]
 8006146:	6263      	str	r3, [r4, #36]	@ 0x24
 8006148:	4b0c      	ldr	r3, [pc, #48]	@ (800617c <std+0x5c>)
 800614a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800614c:	4b0c      	ldr	r3, [pc, #48]	@ (8006180 <std+0x60>)
 800614e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006150:	4b0c      	ldr	r3, [pc, #48]	@ (8006184 <std+0x64>)
 8006152:	6323      	str	r3, [r4, #48]	@ 0x30
 8006154:	4b0c      	ldr	r3, [pc, #48]	@ (8006188 <std+0x68>)
 8006156:	429c      	cmp	r4, r3
 8006158:	d006      	beq.n	8006168 <std+0x48>
 800615a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800615e:	4294      	cmp	r4, r2
 8006160:	d002      	beq.n	8006168 <std+0x48>
 8006162:	33d0      	adds	r3, #208	@ 0xd0
 8006164:	429c      	cmp	r4, r3
 8006166:	d105      	bne.n	8006174 <std+0x54>
 8006168:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800616c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006170:	f000 ba64 	b.w	800663c <__retarget_lock_init_recursive>
 8006174:	bd10      	pop	{r4, pc}
 8006176:	bf00      	nop
 8006178:	08006395 	.word	0x08006395
 800617c:	080063b7 	.word	0x080063b7
 8006180:	080063ef 	.word	0x080063ef
 8006184:	08006413 	.word	0x08006413
 8006188:	20000948 	.word	0x20000948

0800618c <stdio_exit_handler>:
 800618c:	4a02      	ldr	r2, [pc, #8]	@ (8006198 <stdio_exit_handler+0xc>)
 800618e:	4903      	ldr	r1, [pc, #12]	@ (800619c <stdio_exit_handler+0x10>)
 8006190:	4803      	ldr	r0, [pc, #12]	@ (80061a0 <stdio_exit_handler+0x14>)
 8006192:	f000 b869 	b.w	8006268 <_fwalk_sglue>
 8006196:	bf00      	nop
 8006198:	2000000c 	.word	0x2000000c
 800619c:	08007f89 	.word	0x08007f89
 80061a0:	2000001c 	.word	0x2000001c

080061a4 <cleanup_stdio>:
 80061a4:	6841      	ldr	r1, [r0, #4]
 80061a6:	4b0c      	ldr	r3, [pc, #48]	@ (80061d8 <cleanup_stdio+0x34>)
 80061a8:	b510      	push	{r4, lr}
 80061aa:	4299      	cmp	r1, r3
 80061ac:	4604      	mov	r4, r0
 80061ae:	d001      	beq.n	80061b4 <cleanup_stdio+0x10>
 80061b0:	f001 feea 	bl	8007f88 <_fflush_r>
 80061b4:	68a1      	ldr	r1, [r4, #8]
 80061b6:	4b09      	ldr	r3, [pc, #36]	@ (80061dc <cleanup_stdio+0x38>)
 80061b8:	4299      	cmp	r1, r3
 80061ba:	d002      	beq.n	80061c2 <cleanup_stdio+0x1e>
 80061bc:	4620      	mov	r0, r4
 80061be:	f001 fee3 	bl	8007f88 <_fflush_r>
 80061c2:	68e1      	ldr	r1, [r4, #12]
 80061c4:	4b06      	ldr	r3, [pc, #24]	@ (80061e0 <cleanup_stdio+0x3c>)
 80061c6:	4299      	cmp	r1, r3
 80061c8:	d004      	beq.n	80061d4 <cleanup_stdio+0x30>
 80061ca:	4620      	mov	r0, r4
 80061cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d0:	f001 beda 	b.w	8007f88 <_fflush_r>
 80061d4:	bd10      	pop	{r4, pc}
 80061d6:	bf00      	nop
 80061d8:	20000948 	.word	0x20000948
 80061dc:	200009b0 	.word	0x200009b0
 80061e0:	20000a18 	.word	0x20000a18

080061e4 <global_stdio_init.part.0>:
 80061e4:	b510      	push	{r4, lr}
 80061e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006214 <global_stdio_init.part.0+0x30>)
 80061e8:	4c0b      	ldr	r4, [pc, #44]	@ (8006218 <global_stdio_init.part.0+0x34>)
 80061ea:	4a0c      	ldr	r2, [pc, #48]	@ (800621c <global_stdio_init.part.0+0x38>)
 80061ec:	4620      	mov	r0, r4
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	2104      	movs	r1, #4
 80061f2:	2200      	movs	r2, #0
 80061f4:	f7ff ff94 	bl	8006120 <std>
 80061f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80061fc:	2201      	movs	r2, #1
 80061fe:	2109      	movs	r1, #9
 8006200:	f7ff ff8e 	bl	8006120 <std>
 8006204:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006208:	2202      	movs	r2, #2
 800620a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800620e:	2112      	movs	r1, #18
 8006210:	f7ff bf86 	b.w	8006120 <std>
 8006214:	20000a80 	.word	0x20000a80
 8006218:	20000948 	.word	0x20000948
 800621c:	0800618d 	.word	0x0800618d

08006220 <__sfp_lock_acquire>:
 8006220:	4801      	ldr	r0, [pc, #4]	@ (8006228 <__sfp_lock_acquire+0x8>)
 8006222:	f000 ba0c 	b.w	800663e <__retarget_lock_acquire_recursive>
 8006226:	bf00      	nop
 8006228:	20000a89 	.word	0x20000a89

0800622c <__sfp_lock_release>:
 800622c:	4801      	ldr	r0, [pc, #4]	@ (8006234 <__sfp_lock_release+0x8>)
 800622e:	f000 ba07 	b.w	8006640 <__retarget_lock_release_recursive>
 8006232:	bf00      	nop
 8006234:	20000a89 	.word	0x20000a89

08006238 <__sinit>:
 8006238:	b510      	push	{r4, lr}
 800623a:	4604      	mov	r4, r0
 800623c:	f7ff fff0 	bl	8006220 <__sfp_lock_acquire>
 8006240:	6a23      	ldr	r3, [r4, #32]
 8006242:	b11b      	cbz	r3, 800624c <__sinit+0x14>
 8006244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006248:	f7ff bff0 	b.w	800622c <__sfp_lock_release>
 800624c:	4b04      	ldr	r3, [pc, #16]	@ (8006260 <__sinit+0x28>)
 800624e:	6223      	str	r3, [r4, #32]
 8006250:	4b04      	ldr	r3, [pc, #16]	@ (8006264 <__sinit+0x2c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f5      	bne.n	8006244 <__sinit+0xc>
 8006258:	f7ff ffc4 	bl	80061e4 <global_stdio_init.part.0>
 800625c:	e7f2      	b.n	8006244 <__sinit+0xc>
 800625e:	bf00      	nop
 8006260:	080061a5 	.word	0x080061a5
 8006264:	20000a80 	.word	0x20000a80

08006268 <_fwalk_sglue>:
 8006268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800626c:	4607      	mov	r7, r0
 800626e:	4688      	mov	r8, r1
 8006270:	4614      	mov	r4, r2
 8006272:	2600      	movs	r6, #0
 8006274:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006278:	f1b9 0901 	subs.w	r9, r9, #1
 800627c:	d505      	bpl.n	800628a <_fwalk_sglue+0x22>
 800627e:	6824      	ldr	r4, [r4, #0]
 8006280:	2c00      	cmp	r4, #0
 8006282:	d1f7      	bne.n	8006274 <_fwalk_sglue+0xc>
 8006284:	4630      	mov	r0, r6
 8006286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800628a:	89ab      	ldrh	r3, [r5, #12]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d907      	bls.n	80062a0 <_fwalk_sglue+0x38>
 8006290:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006294:	3301      	adds	r3, #1
 8006296:	d003      	beq.n	80062a0 <_fwalk_sglue+0x38>
 8006298:	4629      	mov	r1, r5
 800629a:	4638      	mov	r0, r7
 800629c:	47c0      	blx	r8
 800629e:	4306      	orrs	r6, r0
 80062a0:	3568      	adds	r5, #104	@ 0x68
 80062a2:	e7e9      	b.n	8006278 <_fwalk_sglue+0x10>

080062a4 <iprintf>:
 80062a4:	b40f      	push	{r0, r1, r2, r3}
 80062a6:	b507      	push	{r0, r1, r2, lr}
 80062a8:	4906      	ldr	r1, [pc, #24]	@ (80062c4 <iprintf+0x20>)
 80062aa:	ab04      	add	r3, sp, #16
 80062ac:	6808      	ldr	r0, [r1, #0]
 80062ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80062b2:	6881      	ldr	r1, [r0, #8]
 80062b4:	9301      	str	r3, [sp, #4]
 80062b6:	f001 fccf 	bl	8007c58 <_vfiprintf_r>
 80062ba:	b003      	add	sp, #12
 80062bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80062c0:	b004      	add	sp, #16
 80062c2:	4770      	bx	lr
 80062c4:	20000018 	.word	0x20000018

080062c8 <putchar>:
 80062c8:	4b02      	ldr	r3, [pc, #8]	@ (80062d4 <putchar+0xc>)
 80062ca:	4601      	mov	r1, r0
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	6882      	ldr	r2, [r0, #8]
 80062d0:	f001 bee3 	b.w	800809a <_putc_r>
 80062d4:	20000018 	.word	0x20000018

080062d8 <_puts_r>:
 80062d8:	6a03      	ldr	r3, [r0, #32]
 80062da:	b570      	push	{r4, r5, r6, lr}
 80062dc:	4605      	mov	r5, r0
 80062de:	460e      	mov	r6, r1
 80062e0:	6884      	ldr	r4, [r0, #8]
 80062e2:	b90b      	cbnz	r3, 80062e8 <_puts_r+0x10>
 80062e4:	f7ff ffa8 	bl	8006238 <__sinit>
 80062e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062ea:	07db      	lsls	r3, r3, #31
 80062ec:	d405      	bmi.n	80062fa <_puts_r+0x22>
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	0598      	lsls	r0, r3, #22
 80062f2:	d402      	bmi.n	80062fa <_puts_r+0x22>
 80062f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062f6:	f000 f9a2 	bl	800663e <__retarget_lock_acquire_recursive>
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	0719      	lsls	r1, r3, #28
 80062fe:	d502      	bpl.n	8006306 <_puts_r+0x2e>
 8006300:	6923      	ldr	r3, [r4, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d135      	bne.n	8006372 <_puts_r+0x9a>
 8006306:	4621      	mov	r1, r4
 8006308:	4628      	mov	r0, r5
 800630a:	f000 f8c5 	bl	8006498 <__swsetup_r>
 800630e:	b380      	cbz	r0, 8006372 <_puts_r+0x9a>
 8006310:	f04f 35ff 	mov.w	r5, #4294967295
 8006314:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006316:	07da      	lsls	r2, r3, #31
 8006318:	d405      	bmi.n	8006326 <_puts_r+0x4e>
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	059b      	lsls	r3, r3, #22
 800631e:	d402      	bmi.n	8006326 <_puts_r+0x4e>
 8006320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006322:	f000 f98d 	bl	8006640 <__retarget_lock_release_recursive>
 8006326:	4628      	mov	r0, r5
 8006328:	bd70      	pop	{r4, r5, r6, pc}
 800632a:	2b00      	cmp	r3, #0
 800632c:	da04      	bge.n	8006338 <_puts_r+0x60>
 800632e:	69a2      	ldr	r2, [r4, #24]
 8006330:	429a      	cmp	r2, r3
 8006332:	dc17      	bgt.n	8006364 <_puts_r+0x8c>
 8006334:	290a      	cmp	r1, #10
 8006336:	d015      	beq.n	8006364 <_puts_r+0x8c>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	6022      	str	r2, [r4, #0]
 800633e:	7019      	strb	r1, [r3, #0]
 8006340:	68a3      	ldr	r3, [r4, #8]
 8006342:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006346:	3b01      	subs	r3, #1
 8006348:	60a3      	str	r3, [r4, #8]
 800634a:	2900      	cmp	r1, #0
 800634c:	d1ed      	bne.n	800632a <_puts_r+0x52>
 800634e:	2b00      	cmp	r3, #0
 8006350:	da11      	bge.n	8006376 <_puts_r+0x9e>
 8006352:	4622      	mov	r2, r4
 8006354:	210a      	movs	r1, #10
 8006356:	4628      	mov	r0, r5
 8006358:	f000 f85f 	bl	800641a <__swbuf_r>
 800635c:	3001      	adds	r0, #1
 800635e:	d0d7      	beq.n	8006310 <_puts_r+0x38>
 8006360:	250a      	movs	r5, #10
 8006362:	e7d7      	b.n	8006314 <_puts_r+0x3c>
 8006364:	4622      	mov	r2, r4
 8006366:	4628      	mov	r0, r5
 8006368:	f000 f857 	bl	800641a <__swbuf_r>
 800636c:	3001      	adds	r0, #1
 800636e:	d1e7      	bne.n	8006340 <_puts_r+0x68>
 8006370:	e7ce      	b.n	8006310 <_puts_r+0x38>
 8006372:	3e01      	subs	r6, #1
 8006374:	e7e4      	b.n	8006340 <_puts_r+0x68>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	6022      	str	r2, [r4, #0]
 800637c:	220a      	movs	r2, #10
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	e7ee      	b.n	8006360 <_puts_r+0x88>
	...

08006384 <puts>:
 8006384:	4b02      	ldr	r3, [pc, #8]	@ (8006390 <puts+0xc>)
 8006386:	4601      	mov	r1, r0
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	f7ff bfa5 	b.w	80062d8 <_puts_r>
 800638e:	bf00      	nop
 8006390:	20000018 	.word	0x20000018

08006394 <__sread>:
 8006394:	b510      	push	{r4, lr}
 8006396:	460c      	mov	r4, r1
 8006398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639c:	f000 f900 	bl	80065a0 <_read_r>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	bfab      	itete	ge
 80063a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80063a6:	89a3      	ldrhlt	r3, [r4, #12]
 80063a8:	181b      	addge	r3, r3, r0
 80063aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80063ae:	bfac      	ite	ge
 80063b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063b2:	81a3      	strhlt	r3, [r4, #12]
 80063b4:	bd10      	pop	{r4, pc}

080063b6 <__swrite>:
 80063b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ba:	461f      	mov	r7, r3
 80063bc:	898b      	ldrh	r3, [r1, #12]
 80063be:	4605      	mov	r5, r0
 80063c0:	05db      	lsls	r3, r3, #23
 80063c2:	460c      	mov	r4, r1
 80063c4:	4616      	mov	r6, r2
 80063c6:	d505      	bpl.n	80063d4 <__swrite+0x1e>
 80063c8:	2302      	movs	r3, #2
 80063ca:	2200      	movs	r2, #0
 80063cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d0:	f000 f8d4 	bl	800657c <_lseek_r>
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	4632      	mov	r2, r6
 80063d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063dc:	81a3      	strh	r3, [r4, #12]
 80063de:	4628      	mov	r0, r5
 80063e0:	463b      	mov	r3, r7
 80063e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ea:	f000 b8eb 	b.w	80065c4 <_write_r>

080063ee <__sseek>:
 80063ee:	b510      	push	{r4, lr}
 80063f0:	460c      	mov	r4, r1
 80063f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f6:	f000 f8c1 	bl	800657c <_lseek_r>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	bf15      	itete	ne
 8006400:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006402:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006406:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800640a:	81a3      	strheq	r3, [r4, #12]
 800640c:	bf18      	it	ne
 800640e:	81a3      	strhne	r3, [r4, #12]
 8006410:	bd10      	pop	{r4, pc}

08006412 <__sclose>:
 8006412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006416:	f000 b8a1 	b.w	800655c <_close_r>

0800641a <__swbuf_r>:
 800641a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641c:	460e      	mov	r6, r1
 800641e:	4614      	mov	r4, r2
 8006420:	4605      	mov	r5, r0
 8006422:	b118      	cbz	r0, 800642c <__swbuf_r+0x12>
 8006424:	6a03      	ldr	r3, [r0, #32]
 8006426:	b90b      	cbnz	r3, 800642c <__swbuf_r+0x12>
 8006428:	f7ff ff06 	bl	8006238 <__sinit>
 800642c:	69a3      	ldr	r3, [r4, #24]
 800642e:	60a3      	str	r3, [r4, #8]
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	071a      	lsls	r2, r3, #28
 8006434:	d501      	bpl.n	800643a <__swbuf_r+0x20>
 8006436:	6923      	ldr	r3, [r4, #16]
 8006438:	b943      	cbnz	r3, 800644c <__swbuf_r+0x32>
 800643a:	4621      	mov	r1, r4
 800643c:	4628      	mov	r0, r5
 800643e:	f000 f82b 	bl	8006498 <__swsetup_r>
 8006442:	b118      	cbz	r0, 800644c <__swbuf_r+0x32>
 8006444:	f04f 37ff 	mov.w	r7, #4294967295
 8006448:	4638      	mov	r0, r7
 800644a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	6922      	ldr	r2, [r4, #16]
 8006450:	b2f6      	uxtb	r6, r6
 8006452:	1a98      	subs	r0, r3, r2
 8006454:	6963      	ldr	r3, [r4, #20]
 8006456:	4637      	mov	r7, r6
 8006458:	4283      	cmp	r3, r0
 800645a:	dc05      	bgt.n	8006468 <__swbuf_r+0x4e>
 800645c:	4621      	mov	r1, r4
 800645e:	4628      	mov	r0, r5
 8006460:	f001 fd92 	bl	8007f88 <_fflush_r>
 8006464:	2800      	cmp	r0, #0
 8006466:	d1ed      	bne.n	8006444 <__swbuf_r+0x2a>
 8006468:	68a3      	ldr	r3, [r4, #8]
 800646a:	3b01      	subs	r3, #1
 800646c:	60a3      	str	r3, [r4, #8]
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	6022      	str	r2, [r4, #0]
 8006474:	701e      	strb	r6, [r3, #0]
 8006476:	6962      	ldr	r2, [r4, #20]
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	429a      	cmp	r2, r3
 800647c:	d004      	beq.n	8006488 <__swbuf_r+0x6e>
 800647e:	89a3      	ldrh	r3, [r4, #12]
 8006480:	07db      	lsls	r3, r3, #31
 8006482:	d5e1      	bpl.n	8006448 <__swbuf_r+0x2e>
 8006484:	2e0a      	cmp	r6, #10
 8006486:	d1df      	bne.n	8006448 <__swbuf_r+0x2e>
 8006488:	4621      	mov	r1, r4
 800648a:	4628      	mov	r0, r5
 800648c:	f001 fd7c 	bl	8007f88 <_fflush_r>
 8006490:	2800      	cmp	r0, #0
 8006492:	d0d9      	beq.n	8006448 <__swbuf_r+0x2e>
 8006494:	e7d6      	b.n	8006444 <__swbuf_r+0x2a>
	...

08006498 <__swsetup_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4b29      	ldr	r3, [pc, #164]	@ (8006540 <__swsetup_r+0xa8>)
 800649c:	4605      	mov	r5, r0
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	460c      	mov	r4, r1
 80064a2:	b118      	cbz	r0, 80064ac <__swsetup_r+0x14>
 80064a4:	6a03      	ldr	r3, [r0, #32]
 80064a6:	b90b      	cbnz	r3, 80064ac <__swsetup_r+0x14>
 80064a8:	f7ff fec6 	bl	8006238 <__sinit>
 80064ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064b0:	0719      	lsls	r1, r3, #28
 80064b2:	d422      	bmi.n	80064fa <__swsetup_r+0x62>
 80064b4:	06da      	lsls	r2, r3, #27
 80064b6:	d407      	bmi.n	80064c8 <__swsetup_r+0x30>
 80064b8:	2209      	movs	r2, #9
 80064ba:	602a      	str	r2, [r5, #0]
 80064bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064c0:	f04f 30ff 	mov.w	r0, #4294967295
 80064c4:	81a3      	strh	r3, [r4, #12]
 80064c6:	e033      	b.n	8006530 <__swsetup_r+0x98>
 80064c8:	0758      	lsls	r0, r3, #29
 80064ca:	d512      	bpl.n	80064f2 <__swsetup_r+0x5a>
 80064cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064ce:	b141      	cbz	r1, 80064e2 <__swsetup_r+0x4a>
 80064d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064d4:	4299      	cmp	r1, r3
 80064d6:	d002      	beq.n	80064de <__swsetup_r+0x46>
 80064d8:	4628      	mov	r0, r5
 80064da:	f000 ff1d 	bl	8007318 <_free_r>
 80064de:	2300      	movs	r3, #0
 80064e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064e8:	81a3      	strh	r3, [r4, #12]
 80064ea:	2300      	movs	r3, #0
 80064ec:	6063      	str	r3, [r4, #4]
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	f043 0308 	orr.w	r3, r3, #8
 80064f8:	81a3      	strh	r3, [r4, #12]
 80064fa:	6923      	ldr	r3, [r4, #16]
 80064fc:	b94b      	cbnz	r3, 8006512 <__swsetup_r+0x7a>
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006508:	d003      	beq.n	8006512 <__swsetup_r+0x7a>
 800650a:	4621      	mov	r1, r4
 800650c:	4628      	mov	r0, r5
 800650e:	f001 fd88 	bl	8008022 <__smakebuf_r>
 8006512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006516:	f013 0201 	ands.w	r2, r3, #1
 800651a:	d00a      	beq.n	8006532 <__swsetup_r+0x9a>
 800651c:	2200      	movs	r2, #0
 800651e:	60a2      	str	r2, [r4, #8]
 8006520:	6962      	ldr	r2, [r4, #20]
 8006522:	4252      	negs	r2, r2
 8006524:	61a2      	str	r2, [r4, #24]
 8006526:	6922      	ldr	r2, [r4, #16]
 8006528:	b942      	cbnz	r2, 800653c <__swsetup_r+0xa4>
 800652a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800652e:	d1c5      	bne.n	80064bc <__swsetup_r+0x24>
 8006530:	bd38      	pop	{r3, r4, r5, pc}
 8006532:	0799      	lsls	r1, r3, #30
 8006534:	bf58      	it	pl
 8006536:	6962      	ldrpl	r2, [r4, #20]
 8006538:	60a2      	str	r2, [r4, #8]
 800653a:	e7f4      	b.n	8006526 <__swsetup_r+0x8e>
 800653c:	2000      	movs	r0, #0
 800653e:	e7f7      	b.n	8006530 <__swsetup_r+0x98>
 8006540:	20000018 	.word	0x20000018

08006544 <memset>:
 8006544:	4603      	mov	r3, r0
 8006546:	4402      	add	r2, r0
 8006548:	4293      	cmp	r3, r2
 800654a:	d100      	bne.n	800654e <memset+0xa>
 800654c:	4770      	bx	lr
 800654e:	f803 1b01 	strb.w	r1, [r3], #1
 8006552:	e7f9      	b.n	8006548 <memset+0x4>

08006554 <_localeconv_r>:
 8006554:	4800      	ldr	r0, [pc, #0]	@ (8006558 <_localeconv_r+0x4>)
 8006556:	4770      	bx	lr
 8006558:	20000158 	.word	0x20000158

0800655c <_close_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	2300      	movs	r3, #0
 8006560:	4d05      	ldr	r5, [pc, #20]	@ (8006578 <_close_r+0x1c>)
 8006562:	4604      	mov	r4, r0
 8006564:	4608      	mov	r0, r1
 8006566:	602b      	str	r3, [r5, #0]
 8006568:	f7fb fc37 	bl	8001dda <_close>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_close_r+0x1a>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_close_r+0x1a>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	20000a84 	.word	0x20000a84

0800657c <_lseek_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4604      	mov	r4, r0
 8006580:	4608      	mov	r0, r1
 8006582:	4611      	mov	r1, r2
 8006584:	2200      	movs	r2, #0
 8006586:	4d05      	ldr	r5, [pc, #20]	@ (800659c <_lseek_r+0x20>)
 8006588:	602a      	str	r2, [r5, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	f7fb fc49 	bl	8001e22 <_lseek>
 8006590:	1c43      	adds	r3, r0, #1
 8006592:	d102      	bne.n	800659a <_lseek_r+0x1e>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	b103      	cbz	r3, 800659a <_lseek_r+0x1e>
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	20000a84 	.word	0x20000a84

080065a0 <_read_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4604      	mov	r4, r0
 80065a4:	4608      	mov	r0, r1
 80065a6:	4611      	mov	r1, r2
 80065a8:	2200      	movs	r2, #0
 80065aa:	4d05      	ldr	r5, [pc, #20]	@ (80065c0 <_read_r+0x20>)
 80065ac:	602a      	str	r2, [r5, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	f7fb fbda 	bl	8001d68 <_read>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_read_r+0x1e>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	b103      	cbz	r3, 80065be <_read_r+0x1e>
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	20000a84 	.word	0x20000a84

080065c4 <_write_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4604      	mov	r4, r0
 80065c8:	4608      	mov	r0, r1
 80065ca:	4611      	mov	r1, r2
 80065cc:	2200      	movs	r2, #0
 80065ce:	4d05      	ldr	r5, [pc, #20]	@ (80065e4 <_write_r+0x20>)
 80065d0:	602a      	str	r2, [r5, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	f7fb fbe5 	bl	8001da2 <_write>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d102      	bne.n	80065e2 <_write_r+0x1e>
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	b103      	cbz	r3, 80065e2 <_write_r+0x1e>
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	20000a84 	.word	0x20000a84

080065e8 <__errno>:
 80065e8:	4b01      	ldr	r3, [pc, #4]	@ (80065f0 <__errno+0x8>)
 80065ea:	6818      	ldr	r0, [r3, #0]
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	20000018 	.word	0x20000018

080065f4 <__libc_init_array>:
 80065f4:	b570      	push	{r4, r5, r6, lr}
 80065f6:	2600      	movs	r6, #0
 80065f8:	4d0c      	ldr	r5, [pc, #48]	@ (800662c <__libc_init_array+0x38>)
 80065fa:	4c0d      	ldr	r4, [pc, #52]	@ (8006630 <__libc_init_array+0x3c>)
 80065fc:	1b64      	subs	r4, r4, r5
 80065fe:	10a4      	asrs	r4, r4, #2
 8006600:	42a6      	cmp	r6, r4
 8006602:	d109      	bne.n	8006618 <__libc_init_array+0x24>
 8006604:	f001 fe6e 	bl	80082e4 <_init>
 8006608:	2600      	movs	r6, #0
 800660a:	4d0a      	ldr	r5, [pc, #40]	@ (8006634 <__libc_init_array+0x40>)
 800660c:	4c0a      	ldr	r4, [pc, #40]	@ (8006638 <__libc_init_array+0x44>)
 800660e:	1b64      	subs	r4, r4, r5
 8006610:	10a4      	asrs	r4, r4, #2
 8006612:	42a6      	cmp	r6, r4
 8006614:	d105      	bne.n	8006622 <__libc_init_array+0x2e>
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	f855 3b04 	ldr.w	r3, [r5], #4
 800661c:	4798      	blx	r3
 800661e:	3601      	adds	r6, #1
 8006620:	e7ee      	b.n	8006600 <__libc_init_array+0xc>
 8006622:	f855 3b04 	ldr.w	r3, [r5], #4
 8006626:	4798      	blx	r3
 8006628:	3601      	adds	r6, #1
 800662a:	e7f2      	b.n	8006612 <__libc_init_array+0x1e>
 800662c:	0800873c 	.word	0x0800873c
 8006630:	0800873c 	.word	0x0800873c
 8006634:	0800873c 	.word	0x0800873c
 8006638:	08008740 	.word	0x08008740

0800663c <__retarget_lock_init_recursive>:
 800663c:	4770      	bx	lr

0800663e <__retarget_lock_acquire_recursive>:
 800663e:	4770      	bx	lr

08006640 <__retarget_lock_release_recursive>:
 8006640:	4770      	bx	lr

08006642 <memchr>:
 8006642:	4603      	mov	r3, r0
 8006644:	b510      	push	{r4, lr}
 8006646:	b2c9      	uxtb	r1, r1
 8006648:	4402      	add	r2, r0
 800664a:	4293      	cmp	r3, r2
 800664c:	4618      	mov	r0, r3
 800664e:	d101      	bne.n	8006654 <memchr+0x12>
 8006650:	2000      	movs	r0, #0
 8006652:	e003      	b.n	800665c <memchr+0x1a>
 8006654:	7804      	ldrb	r4, [r0, #0]
 8006656:	3301      	adds	r3, #1
 8006658:	428c      	cmp	r4, r1
 800665a:	d1f6      	bne.n	800664a <memchr+0x8>
 800665c:	bd10      	pop	{r4, pc}

0800665e <quorem>:
 800665e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006662:	6903      	ldr	r3, [r0, #16]
 8006664:	690c      	ldr	r4, [r1, #16]
 8006666:	4607      	mov	r7, r0
 8006668:	42a3      	cmp	r3, r4
 800666a:	db7e      	blt.n	800676a <quorem+0x10c>
 800666c:	3c01      	subs	r4, #1
 800666e:	00a3      	lsls	r3, r4, #2
 8006670:	f100 0514 	add.w	r5, r0, #20
 8006674:	f101 0814 	add.w	r8, r1, #20
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006684:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006688:	3301      	adds	r3, #1
 800668a:	429a      	cmp	r2, r3
 800668c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006690:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006694:	d32e      	bcc.n	80066f4 <quorem+0x96>
 8006696:	f04f 0a00 	mov.w	sl, #0
 800669a:	46c4      	mov	ip, r8
 800669c:	46ae      	mov	lr, r5
 800669e:	46d3      	mov	fp, sl
 80066a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80066a4:	b298      	uxth	r0, r3
 80066a6:	fb06 a000 	mla	r0, r6, r0, sl
 80066aa:	0c1b      	lsrs	r3, r3, #16
 80066ac:	0c02      	lsrs	r2, r0, #16
 80066ae:	fb06 2303 	mla	r3, r6, r3, r2
 80066b2:	f8de 2000 	ldr.w	r2, [lr]
 80066b6:	b280      	uxth	r0, r0
 80066b8:	b292      	uxth	r2, r2
 80066ba:	1a12      	subs	r2, r2, r0
 80066bc:	445a      	add	r2, fp
 80066be:	f8de 0000 	ldr.w	r0, [lr]
 80066c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80066cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80066d0:	b292      	uxth	r2, r2
 80066d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80066d6:	45e1      	cmp	r9, ip
 80066d8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80066dc:	f84e 2b04 	str.w	r2, [lr], #4
 80066e0:	d2de      	bcs.n	80066a0 <quorem+0x42>
 80066e2:	9b00      	ldr	r3, [sp, #0]
 80066e4:	58eb      	ldr	r3, [r5, r3]
 80066e6:	b92b      	cbnz	r3, 80066f4 <quorem+0x96>
 80066e8:	9b01      	ldr	r3, [sp, #4]
 80066ea:	3b04      	subs	r3, #4
 80066ec:	429d      	cmp	r5, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	d32f      	bcc.n	8006752 <quorem+0xf4>
 80066f2:	613c      	str	r4, [r7, #16]
 80066f4:	4638      	mov	r0, r7
 80066f6:	f001 f97f 	bl	80079f8 <__mcmp>
 80066fa:	2800      	cmp	r0, #0
 80066fc:	db25      	blt.n	800674a <quorem+0xec>
 80066fe:	4629      	mov	r1, r5
 8006700:	2000      	movs	r0, #0
 8006702:	f858 2b04 	ldr.w	r2, [r8], #4
 8006706:	f8d1 c000 	ldr.w	ip, [r1]
 800670a:	fa1f fe82 	uxth.w	lr, r2
 800670e:	fa1f f38c 	uxth.w	r3, ip
 8006712:	eba3 030e 	sub.w	r3, r3, lr
 8006716:	4403      	add	r3, r0
 8006718:	0c12      	lsrs	r2, r2, #16
 800671a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800671e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006722:	b29b      	uxth	r3, r3
 8006724:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006728:	45c1      	cmp	r9, r8
 800672a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800672e:	f841 3b04 	str.w	r3, [r1], #4
 8006732:	d2e6      	bcs.n	8006702 <quorem+0xa4>
 8006734:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006738:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800673c:	b922      	cbnz	r2, 8006748 <quorem+0xea>
 800673e:	3b04      	subs	r3, #4
 8006740:	429d      	cmp	r5, r3
 8006742:	461a      	mov	r2, r3
 8006744:	d30b      	bcc.n	800675e <quorem+0x100>
 8006746:	613c      	str	r4, [r7, #16]
 8006748:	3601      	adds	r6, #1
 800674a:	4630      	mov	r0, r6
 800674c:	b003      	add	sp, #12
 800674e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006752:	6812      	ldr	r2, [r2, #0]
 8006754:	3b04      	subs	r3, #4
 8006756:	2a00      	cmp	r2, #0
 8006758:	d1cb      	bne.n	80066f2 <quorem+0x94>
 800675a:	3c01      	subs	r4, #1
 800675c:	e7c6      	b.n	80066ec <quorem+0x8e>
 800675e:	6812      	ldr	r2, [r2, #0]
 8006760:	3b04      	subs	r3, #4
 8006762:	2a00      	cmp	r2, #0
 8006764:	d1ef      	bne.n	8006746 <quorem+0xe8>
 8006766:	3c01      	subs	r4, #1
 8006768:	e7ea      	b.n	8006740 <quorem+0xe2>
 800676a:	2000      	movs	r0, #0
 800676c:	e7ee      	b.n	800674c <quorem+0xee>
	...

08006770 <_dtoa_r>:
 8006770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	4614      	mov	r4, r2
 8006776:	461d      	mov	r5, r3
 8006778:	69c7      	ldr	r7, [r0, #28]
 800677a:	b097      	sub	sp, #92	@ 0x5c
 800677c:	4681      	mov	r9, r0
 800677e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006782:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006784:	b97f      	cbnz	r7, 80067a6 <_dtoa_r+0x36>
 8006786:	2010      	movs	r0, #16
 8006788:	f000 fe0e 	bl	80073a8 <malloc>
 800678c:	4602      	mov	r2, r0
 800678e:	f8c9 001c 	str.w	r0, [r9, #28]
 8006792:	b920      	cbnz	r0, 800679e <_dtoa_r+0x2e>
 8006794:	21ef      	movs	r1, #239	@ 0xef
 8006796:	4bac      	ldr	r3, [pc, #688]	@ (8006a48 <_dtoa_r+0x2d8>)
 8006798:	48ac      	ldr	r0, [pc, #688]	@ (8006a4c <_dtoa_r+0x2dc>)
 800679a:	f001 fcf3 	bl	8008184 <__assert_func>
 800679e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80067a2:	6007      	str	r7, [r0, #0]
 80067a4:	60c7      	str	r7, [r0, #12]
 80067a6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80067aa:	6819      	ldr	r1, [r3, #0]
 80067ac:	b159      	cbz	r1, 80067c6 <_dtoa_r+0x56>
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	2301      	movs	r3, #1
 80067b2:	4093      	lsls	r3, r2
 80067b4:	604a      	str	r2, [r1, #4]
 80067b6:	608b      	str	r3, [r1, #8]
 80067b8:	4648      	mov	r0, r9
 80067ba:	f000 feeb 	bl	8007594 <_Bfree>
 80067be:	2200      	movs	r2, #0
 80067c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	1e2b      	subs	r3, r5, #0
 80067c8:	bfaf      	iteee	ge
 80067ca:	2300      	movge	r3, #0
 80067cc:	2201      	movlt	r2, #1
 80067ce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80067d2:	9307      	strlt	r3, [sp, #28]
 80067d4:	bfa8      	it	ge
 80067d6:	6033      	strge	r3, [r6, #0]
 80067d8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80067dc:	4b9c      	ldr	r3, [pc, #624]	@ (8006a50 <_dtoa_r+0x2e0>)
 80067de:	bfb8      	it	lt
 80067e0:	6032      	strlt	r2, [r6, #0]
 80067e2:	ea33 0308 	bics.w	r3, r3, r8
 80067e6:	d112      	bne.n	800680e <_dtoa_r+0x9e>
 80067e8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80067ec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80067f4:	4323      	orrs	r3, r4
 80067f6:	f000 855e 	beq.w	80072b6 <_dtoa_r+0xb46>
 80067fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80067fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006a54 <_dtoa_r+0x2e4>
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8560 	beq.w	80072c6 <_dtoa_r+0xb56>
 8006806:	f10a 0303 	add.w	r3, sl, #3
 800680a:	f000 bd5a 	b.w	80072c2 <_dtoa_r+0xb52>
 800680e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006812:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800681a:	2200      	movs	r2, #0
 800681c:	2300      	movs	r3, #0
 800681e:	f7fa f8db 	bl	80009d8 <__aeabi_dcmpeq>
 8006822:	4607      	mov	r7, r0
 8006824:	b158      	cbz	r0, 800683e <_dtoa_r+0xce>
 8006826:	2301      	movs	r3, #1
 8006828:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800682e:	b113      	cbz	r3, 8006836 <_dtoa_r+0xc6>
 8006830:	4b89      	ldr	r3, [pc, #548]	@ (8006a58 <_dtoa_r+0x2e8>)
 8006832:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006a5c <_dtoa_r+0x2ec>
 800683a:	f000 bd44 	b.w	80072c6 <_dtoa_r+0xb56>
 800683e:	ab14      	add	r3, sp, #80	@ 0x50
 8006840:	9301      	str	r3, [sp, #4]
 8006842:	ab15      	add	r3, sp, #84	@ 0x54
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	4648      	mov	r0, r9
 8006848:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800684c:	f001 f984 	bl	8007b58 <__d2b>
 8006850:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006854:	9003      	str	r0, [sp, #12]
 8006856:	2e00      	cmp	r6, #0
 8006858:	d078      	beq.n	800694c <_dtoa_r+0x1dc>
 800685a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800685e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006860:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006868:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800686c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006870:	9712      	str	r7, [sp, #72]	@ 0x48
 8006872:	4619      	mov	r1, r3
 8006874:	2200      	movs	r2, #0
 8006876:	4b7a      	ldr	r3, [pc, #488]	@ (8006a60 <_dtoa_r+0x2f0>)
 8006878:	f7f9 fc8e 	bl	8000198 <__aeabi_dsub>
 800687c:	a36c      	add	r3, pc, #432	@ (adr r3, 8006a30 <_dtoa_r+0x2c0>)
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f7f9 fe41 	bl	8000508 <__aeabi_dmul>
 8006886:	a36c      	add	r3, pc, #432	@ (adr r3, 8006a38 <_dtoa_r+0x2c8>)
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f7f9 fc86 	bl	800019c <__adddf3>
 8006890:	4604      	mov	r4, r0
 8006892:	4630      	mov	r0, r6
 8006894:	460d      	mov	r5, r1
 8006896:	f7f9 fdcd 	bl	8000434 <__aeabi_i2d>
 800689a:	a369      	add	r3, pc, #420	@ (adr r3, 8006a40 <_dtoa_r+0x2d0>)
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	f7f9 fe32 	bl	8000508 <__aeabi_dmul>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	4620      	mov	r0, r4
 80068aa:	4629      	mov	r1, r5
 80068ac:	f7f9 fc76 	bl	800019c <__adddf3>
 80068b0:	4604      	mov	r4, r0
 80068b2:	460d      	mov	r5, r1
 80068b4:	f7fa f8d8 	bl	8000a68 <__aeabi_d2iz>
 80068b8:	2200      	movs	r2, #0
 80068ba:	4607      	mov	r7, r0
 80068bc:	2300      	movs	r3, #0
 80068be:	4620      	mov	r0, r4
 80068c0:	4629      	mov	r1, r5
 80068c2:	f7fa f893 	bl	80009ec <__aeabi_dcmplt>
 80068c6:	b140      	cbz	r0, 80068da <_dtoa_r+0x16a>
 80068c8:	4638      	mov	r0, r7
 80068ca:	f7f9 fdb3 	bl	8000434 <__aeabi_i2d>
 80068ce:	4622      	mov	r2, r4
 80068d0:	462b      	mov	r3, r5
 80068d2:	f7fa f881 	bl	80009d8 <__aeabi_dcmpeq>
 80068d6:	b900      	cbnz	r0, 80068da <_dtoa_r+0x16a>
 80068d8:	3f01      	subs	r7, #1
 80068da:	2f16      	cmp	r7, #22
 80068dc:	d854      	bhi.n	8006988 <_dtoa_r+0x218>
 80068de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068e2:	4b60      	ldr	r3, [pc, #384]	@ (8006a64 <_dtoa_r+0x2f4>)
 80068e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	f7fa f87e 	bl	80009ec <__aeabi_dcmplt>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d04b      	beq.n	800698c <_dtoa_r+0x21c>
 80068f4:	2300      	movs	r3, #0
 80068f6:	3f01      	subs	r7, #1
 80068f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80068fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80068fc:	1b9b      	subs	r3, r3, r6
 80068fe:	1e5a      	subs	r2, r3, #1
 8006900:	bf49      	itett	mi
 8006902:	f1c3 0301 	rsbmi	r3, r3, #1
 8006906:	2300      	movpl	r3, #0
 8006908:	9304      	strmi	r3, [sp, #16]
 800690a:	2300      	movmi	r3, #0
 800690c:	9209      	str	r2, [sp, #36]	@ 0x24
 800690e:	bf54      	ite	pl
 8006910:	9304      	strpl	r3, [sp, #16]
 8006912:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006914:	2f00      	cmp	r7, #0
 8006916:	db3b      	blt.n	8006990 <_dtoa_r+0x220>
 8006918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800691a:	970e      	str	r7, [sp, #56]	@ 0x38
 800691c:	443b      	add	r3, r7
 800691e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006920:	2300      	movs	r3, #0
 8006922:	930a      	str	r3, [sp, #40]	@ 0x28
 8006924:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006926:	2b09      	cmp	r3, #9
 8006928:	d865      	bhi.n	80069f6 <_dtoa_r+0x286>
 800692a:	2b05      	cmp	r3, #5
 800692c:	bfc4      	itt	gt
 800692e:	3b04      	subgt	r3, #4
 8006930:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006932:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006934:	bfc8      	it	gt
 8006936:	2400      	movgt	r4, #0
 8006938:	f1a3 0302 	sub.w	r3, r3, #2
 800693c:	bfd8      	it	le
 800693e:	2401      	movle	r4, #1
 8006940:	2b03      	cmp	r3, #3
 8006942:	d864      	bhi.n	8006a0e <_dtoa_r+0x29e>
 8006944:	e8df f003 	tbb	[pc, r3]
 8006948:	2c385553 	.word	0x2c385553
 800694c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006950:	441e      	add	r6, r3
 8006952:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006956:	2b20      	cmp	r3, #32
 8006958:	bfc1      	itttt	gt
 800695a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800695e:	fa08 f803 	lslgt.w	r8, r8, r3
 8006962:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006966:	fa24 f303 	lsrgt.w	r3, r4, r3
 800696a:	bfd6      	itet	le
 800696c:	f1c3 0320 	rsble	r3, r3, #32
 8006970:	ea48 0003 	orrgt.w	r0, r8, r3
 8006974:	fa04 f003 	lslle.w	r0, r4, r3
 8006978:	f7f9 fd4c 	bl	8000414 <__aeabi_ui2d>
 800697c:	2201      	movs	r2, #1
 800697e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006982:	3e01      	subs	r6, #1
 8006984:	9212      	str	r2, [sp, #72]	@ 0x48
 8006986:	e774      	b.n	8006872 <_dtoa_r+0x102>
 8006988:	2301      	movs	r3, #1
 800698a:	e7b5      	b.n	80068f8 <_dtoa_r+0x188>
 800698c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800698e:	e7b4      	b.n	80068fa <_dtoa_r+0x18a>
 8006990:	9b04      	ldr	r3, [sp, #16]
 8006992:	1bdb      	subs	r3, r3, r7
 8006994:	9304      	str	r3, [sp, #16]
 8006996:	427b      	negs	r3, r7
 8006998:	930a      	str	r3, [sp, #40]	@ 0x28
 800699a:	2300      	movs	r3, #0
 800699c:	930e      	str	r3, [sp, #56]	@ 0x38
 800699e:	e7c1      	b.n	8006924 <_dtoa_r+0x1b4>
 80069a0:	2301      	movs	r3, #1
 80069a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069a6:	eb07 0b03 	add.w	fp, r7, r3
 80069aa:	f10b 0301 	add.w	r3, fp, #1
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	9308      	str	r3, [sp, #32]
 80069b2:	bfb8      	it	lt
 80069b4:	2301      	movlt	r3, #1
 80069b6:	e006      	b.n	80069c6 <_dtoa_r+0x256>
 80069b8:	2301      	movs	r3, #1
 80069ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069be:	2b00      	cmp	r3, #0
 80069c0:	dd28      	ble.n	8006a14 <_dtoa_r+0x2a4>
 80069c2:	469b      	mov	fp, r3
 80069c4:	9308      	str	r3, [sp, #32]
 80069c6:	2100      	movs	r1, #0
 80069c8:	2204      	movs	r2, #4
 80069ca:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80069ce:	f102 0514 	add.w	r5, r2, #20
 80069d2:	429d      	cmp	r5, r3
 80069d4:	d926      	bls.n	8006a24 <_dtoa_r+0x2b4>
 80069d6:	6041      	str	r1, [r0, #4]
 80069d8:	4648      	mov	r0, r9
 80069da:	f000 fd9b 	bl	8007514 <_Balloc>
 80069de:	4682      	mov	sl, r0
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d143      	bne.n	8006a6c <_dtoa_r+0x2fc>
 80069e4:	4602      	mov	r2, r0
 80069e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80069ea:	4b1f      	ldr	r3, [pc, #124]	@ (8006a68 <_dtoa_r+0x2f8>)
 80069ec:	e6d4      	b.n	8006798 <_dtoa_r+0x28>
 80069ee:	2300      	movs	r3, #0
 80069f0:	e7e3      	b.n	80069ba <_dtoa_r+0x24a>
 80069f2:	2300      	movs	r3, #0
 80069f4:	e7d5      	b.n	80069a2 <_dtoa_r+0x232>
 80069f6:	2401      	movs	r4, #1
 80069f8:	2300      	movs	r3, #0
 80069fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80069fc:	9320      	str	r3, [sp, #128]	@ 0x80
 80069fe:	f04f 3bff 	mov.w	fp, #4294967295
 8006a02:	2200      	movs	r2, #0
 8006a04:	2312      	movs	r3, #18
 8006a06:	f8cd b020 	str.w	fp, [sp, #32]
 8006a0a:	9221      	str	r2, [sp, #132]	@ 0x84
 8006a0c:	e7db      	b.n	80069c6 <_dtoa_r+0x256>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a12:	e7f4      	b.n	80069fe <_dtoa_r+0x28e>
 8006a14:	f04f 0b01 	mov.w	fp, #1
 8006a18:	465b      	mov	r3, fp
 8006a1a:	f8cd b020 	str.w	fp, [sp, #32]
 8006a1e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006a22:	e7d0      	b.n	80069c6 <_dtoa_r+0x256>
 8006a24:	3101      	adds	r1, #1
 8006a26:	0052      	lsls	r2, r2, #1
 8006a28:	e7d1      	b.n	80069ce <_dtoa_r+0x25e>
 8006a2a:	bf00      	nop
 8006a2c:	f3af 8000 	nop.w
 8006a30:	636f4361 	.word	0x636f4361
 8006a34:	3fd287a7 	.word	0x3fd287a7
 8006a38:	8b60c8b3 	.word	0x8b60c8b3
 8006a3c:	3fc68a28 	.word	0x3fc68a28
 8006a40:	509f79fb 	.word	0x509f79fb
 8006a44:	3fd34413 	.word	0x3fd34413
 8006a48:	080083fd 	.word	0x080083fd
 8006a4c:	08008414 	.word	0x08008414
 8006a50:	7ff00000 	.word	0x7ff00000
 8006a54:	080083f9 	.word	0x080083f9
 8006a58:	080083cd 	.word	0x080083cd
 8006a5c:	080083cc 	.word	0x080083cc
 8006a60:	3ff80000 	.word	0x3ff80000
 8006a64:	08008568 	.word	0x08008568
 8006a68:	0800846c 	.word	0x0800846c
 8006a6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a70:	6018      	str	r0, [r3, #0]
 8006a72:	9b08      	ldr	r3, [sp, #32]
 8006a74:	2b0e      	cmp	r3, #14
 8006a76:	f200 80a1 	bhi.w	8006bbc <_dtoa_r+0x44c>
 8006a7a:	2c00      	cmp	r4, #0
 8006a7c:	f000 809e 	beq.w	8006bbc <_dtoa_r+0x44c>
 8006a80:	2f00      	cmp	r7, #0
 8006a82:	dd33      	ble.n	8006aec <_dtoa_r+0x37c>
 8006a84:	4b9c      	ldr	r3, [pc, #624]	@ (8006cf8 <_dtoa_r+0x588>)
 8006a86:	f007 020f 	and.w	r2, r7, #15
 8006a8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a8e:	05f8      	lsls	r0, r7, #23
 8006a90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a94:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006a98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006a9c:	d516      	bpl.n	8006acc <_dtoa_r+0x35c>
 8006a9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006aa2:	4b96      	ldr	r3, [pc, #600]	@ (8006cfc <_dtoa_r+0x58c>)
 8006aa4:	2603      	movs	r6, #3
 8006aa6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006aaa:	f7f9 fe57 	bl	800075c <__aeabi_ddiv>
 8006aae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ab2:	f004 040f 	and.w	r4, r4, #15
 8006ab6:	4d91      	ldr	r5, [pc, #580]	@ (8006cfc <_dtoa_r+0x58c>)
 8006ab8:	b954      	cbnz	r4, 8006ad0 <_dtoa_r+0x360>
 8006aba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006abe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ac2:	f7f9 fe4b 	bl	800075c <__aeabi_ddiv>
 8006ac6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006aca:	e028      	b.n	8006b1e <_dtoa_r+0x3ae>
 8006acc:	2602      	movs	r6, #2
 8006ace:	e7f2      	b.n	8006ab6 <_dtoa_r+0x346>
 8006ad0:	07e1      	lsls	r1, r4, #31
 8006ad2:	d508      	bpl.n	8006ae6 <_dtoa_r+0x376>
 8006ad4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ad8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006adc:	f7f9 fd14 	bl	8000508 <__aeabi_dmul>
 8006ae0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ae4:	3601      	adds	r6, #1
 8006ae6:	1064      	asrs	r4, r4, #1
 8006ae8:	3508      	adds	r5, #8
 8006aea:	e7e5      	b.n	8006ab8 <_dtoa_r+0x348>
 8006aec:	f000 80af 	beq.w	8006c4e <_dtoa_r+0x4de>
 8006af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006af4:	427c      	negs	r4, r7
 8006af6:	4b80      	ldr	r3, [pc, #512]	@ (8006cf8 <_dtoa_r+0x588>)
 8006af8:	f004 020f 	and.w	r2, r4, #15
 8006afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	f7f9 fd00 	bl	8000508 <__aeabi_dmul>
 8006b08:	2602      	movs	r6, #2
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b10:	4d7a      	ldr	r5, [pc, #488]	@ (8006cfc <_dtoa_r+0x58c>)
 8006b12:	1124      	asrs	r4, r4, #4
 8006b14:	2c00      	cmp	r4, #0
 8006b16:	f040 808f 	bne.w	8006c38 <_dtoa_r+0x4c8>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1d3      	bne.n	8006ac6 <_dtoa_r+0x356>
 8006b1e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006b22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 8094 	beq.w	8006c52 <_dtoa_r+0x4e2>
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4b73      	ldr	r3, [pc, #460]	@ (8006d00 <_dtoa_r+0x590>)
 8006b32:	f7f9 ff5b 	bl	80009ec <__aeabi_dcmplt>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	f000 808b 	beq.w	8006c52 <_dtoa_r+0x4e2>
 8006b3c:	9b08      	ldr	r3, [sp, #32]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 8087 	beq.w	8006c52 <_dtoa_r+0x4e2>
 8006b44:	f1bb 0f00 	cmp.w	fp, #0
 8006b48:	dd34      	ble.n	8006bb4 <_dtoa_r+0x444>
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4629      	mov	r1, r5
 8006b50:	4b6c      	ldr	r3, [pc, #432]	@ (8006d04 <_dtoa_r+0x594>)
 8006b52:	f7f9 fcd9 	bl	8000508 <__aeabi_dmul>
 8006b56:	465c      	mov	r4, fp
 8006b58:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b5c:	f107 38ff 	add.w	r8, r7, #4294967295
 8006b60:	3601      	adds	r6, #1
 8006b62:	4630      	mov	r0, r6
 8006b64:	f7f9 fc66 	bl	8000434 <__aeabi_i2d>
 8006b68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b6c:	f7f9 fccc 	bl	8000508 <__aeabi_dmul>
 8006b70:	2200      	movs	r2, #0
 8006b72:	4b65      	ldr	r3, [pc, #404]	@ (8006d08 <_dtoa_r+0x598>)
 8006b74:	f7f9 fb12 	bl	800019c <__adddf3>
 8006b78:	4605      	mov	r5, r0
 8006b7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b7e:	2c00      	cmp	r4, #0
 8006b80:	d16a      	bne.n	8006c58 <_dtoa_r+0x4e8>
 8006b82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b86:	2200      	movs	r2, #0
 8006b88:	4b60      	ldr	r3, [pc, #384]	@ (8006d0c <_dtoa_r+0x59c>)
 8006b8a:	f7f9 fb05 	bl	8000198 <__aeabi_dsub>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b96:	462a      	mov	r2, r5
 8006b98:	4633      	mov	r3, r6
 8006b9a:	f7f9 ff45 	bl	8000a28 <__aeabi_dcmpgt>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	f040 8298 	bne.w	80070d4 <_dtoa_r+0x964>
 8006ba4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ba8:	462a      	mov	r2, r5
 8006baa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006bae:	f7f9 ff1d 	bl	80009ec <__aeabi_dcmplt>
 8006bb2:	bb38      	cbnz	r0, 8006c04 <_dtoa_r+0x494>
 8006bb4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006bb8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006bbc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f2c0 8157 	blt.w	8006e72 <_dtoa_r+0x702>
 8006bc4:	2f0e      	cmp	r7, #14
 8006bc6:	f300 8154 	bgt.w	8006e72 <_dtoa_r+0x702>
 8006bca:	4b4b      	ldr	r3, [pc, #300]	@ (8006cf8 <_dtoa_r+0x588>)
 8006bcc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006bd4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006bd8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f280 80e5 	bge.w	8006daa <_dtoa_r+0x63a>
 8006be0:	9b08      	ldr	r3, [sp, #32]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f300 80e1 	bgt.w	8006daa <_dtoa_r+0x63a>
 8006be8:	d10c      	bne.n	8006c04 <_dtoa_r+0x494>
 8006bea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	4b46      	ldr	r3, [pc, #280]	@ (8006d0c <_dtoa_r+0x59c>)
 8006bf2:	f7f9 fc89 	bl	8000508 <__aeabi_dmul>
 8006bf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bfa:	f7f9 ff0b 	bl	8000a14 <__aeabi_dcmpge>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	f000 8266 	beq.w	80070d0 <_dtoa_r+0x960>
 8006c04:	2400      	movs	r4, #0
 8006c06:	4625      	mov	r5, r4
 8006c08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c0a:	4656      	mov	r6, sl
 8006c0c:	ea6f 0803 	mvn.w	r8, r3
 8006c10:	2700      	movs	r7, #0
 8006c12:	4621      	mov	r1, r4
 8006c14:	4648      	mov	r0, r9
 8006c16:	f000 fcbd 	bl	8007594 <_Bfree>
 8006c1a:	2d00      	cmp	r5, #0
 8006c1c:	f000 80bd 	beq.w	8006d9a <_dtoa_r+0x62a>
 8006c20:	b12f      	cbz	r7, 8006c2e <_dtoa_r+0x4be>
 8006c22:	42af      	cmp	r7, r5
 8006c24:	d003      	beq.n	8006c2e <_dtoa_r+0x4be>
 8006c26:	4639      	mov	r1, r7
 8006c28:	4648      	mov	r0, r9
 8006c2a:	f000 fcb3 	bl	8007594 <_Bfree>
 8006c2e:	4629      	mov	r1, r5
 8006c30:	4648      	mov	r0, r9
 8006c32:	f000 fcaf 	bl	8007594 <_Bfree>
 8006c36:	e0b0      	b.n	8006d9a <_dtoa_r+0x62a>
 8006c38:	07e2      	lsls	r2, r4, #31
 8006c3a:	d505      	bpl.n	8006c48 <_dtoa_r+0x4d8>
 8006c3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c40:	f7f9 fc62 	bl	8000508 <__aeabi_dmul>
 8006c44:	2301      	movs	r3, #1
 8006c46:	3601      	adds	r6, #1
 8006c48:	1064      	asrs	r4, r4, #1
 8006c4a:	3508      	adds	r5, #8
 8006c4c:	e762      	b.n	8006b14 <_dtoa_r+0x3a4>
 8006c4e:	2602      	movs	r6, #2
 8006c50:	e765      	b.n	8006b1e <_dtoa_r+0x3ae>
 8006c52:	46b8      	mov	r8, r7
 8006c54:	9c08      	ldr	r4, [sp, #32]
 8006c56:	e784      	b.n	8006b62 <_dtoa_r+0x3f2>
 8006c58:	4b27      	ldr	r3, [pc, #156]	@ (8006cf8 <_dtoa_r+0x588>)
 8006c5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c64:	4454      	add	r4, sl
 8006c66:	2900      	cmp	r1, #0
 8006c68:	d054      	beq.n	8006d14 <_dtoa_r+0x5a4>
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	4928      	ldr	r1, [pc, #160]	@ (8006d10 <_dtoa_r+0x5a0>)
 8006c6e:	f7f9 fd75 	bl	800075c <__aeabi_ddiv>
 8006c72:	4633      	mov	r3, r6
 8006c74:	462a      	mov	r2, r5
 8006c76:	f7f9 fa8f 	bl	8000198 <__aeabi_dsub>
 8006c7a:	4656      	mov	r6, sl
 8006c7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c84:	f7f9 fef0 	bl	8000a68 <__aeabi_d2iz>
 8006c88:	4605      	mov	r5, r0
 8006c8a:	f7f9 fbd3 	bl	8000434 <__aeabi_i2d>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c96:	f7f9 fa7f 	bl	8000198 <__aeabi_dsub>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	3530      	adds	r5, #48	@ 0x30
 8006ca0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ca4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ca8:	f806 5b01 	strb.w	r5, [r6], #1
 8006cac:	f7f9 fe9e 	bl	80009ec <__aeabi_dcmplt>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d172      	bne.n	8006d9a <_dtoa_r+0x62a>
 8006cb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cb8:	2000      	movs	r0, #0
 8006cba:	4911      	ldr	r1, [pc, #68]	@ (8006d00 <_dtoa_r+0x590>)
 8006cbc:	f7f9 fa6c 	bl	8000198 <__aeabi_dsub>
 8006cc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cc4:	f7f9 fe92 	bl	80009ec <__aeabi_dcmplt>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	f040 80b4 	bne.w	8006e36 <_dtoa_r+0x6c6>
 8006cce:	42a6      	cmp	r6, r4
 8006cd0:	f43f af70 	beq.w	8006bb4 <_dtoa_r+0x444>
 8006cd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4b0a      	ldr	r3, [pc, #40]	@ (8006d04 <_dtoa_r+0x594>)
 8006cdc:	f7f9 fc14 	bl	8000508 <__aeabi_dmul>
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ce6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cea:	4b06      	ldr	r3, [pc, #24]	@ (8006d04 <_dtoa_r+0x594>)
 8006cec:	f7f9 fc0c 	bl	8000508 <__aeabi_dmul>
 8006cf0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006cf4:	e7c4      	b.n	8006c80 <_dtoa_r+0x510>
 8006cf6:	bf00      	nop
 8006cf8:	08008568 	.word	0x08008568
 8006cfc:	08008540 	.word	0x08008540
 8006d00:	3ff00000 	.word	0x3ff00000
 8006d04:	40240000 	.word	0x40240000
 8006d08:	401c0000 	.word	0x401c0000
 8006d0c:	40140000 	.word	0x40140000
 8006d10:	3fe00000 	.word	0x3fe00000
 8006d14:	4631      	mov	r1, r6
 8006d16:	4628      	mov	r0, r5
 8006d18:	f7f9 fbf6 	bl	8000508 <__aeabi_dmul>
 8006d1c:	4656      	mov	r6, sl
 8006d1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d22:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006d24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d28:	f7f9 fe9e 	bl	8000a68 <__aeabi_d2iz>
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	f7f9 fb81 	bl	8000434 <__aeabi_i2d>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d3a:	f7f9 fa2d 	bl	8000198 <__aeabi_dsub>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	3530      	adds	r5, #48	@ 0x30
 8006d44:	f806 5b01 	strb.w	r5, [r6], #1
 8006d48:	42a6      	cmp	r6, r4
 8006d4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d4e:	f04f 0200 	mov.w	r2, #0
 8006d52:	d124      	bne.n	8006d9e <_dtoa_r+0x62e>
 8006d54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d58:	4bae      	ldr	r3, [pc, #696]	@ (8007014 <_dtoa_r+0x8a4>)
 8006d5a:	f7f9 fa1f 	bl	800019c <__adddf3>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d66:	f7f9 fe5f 	bl	8000a28 <__aeabi_dcmpgt>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d163      	bne.n	8006e36 <_dtoa_r+0x6c6>
 8006d6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d72:	2000      	movs	r0, #0
 8006d74:	49a7      	ldr	r1, [pc, #668]	@ (8007014 <_dtoa_r+0x8a4>)
 8006d76:	f7f9 fa0f 	bl	8000198 <__aeabi_dsub>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d82:	f7f9 fe33 	bl	80009ec <__aeabi_dcmplt>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	f43f af14 	beq.w	8006bb4 <_dtoa_r+0x444>
 8006d8c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006d8e:	1e73      	subs	r3, r6, #1
 8006d90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d96:	2b30      	cmp	r3, #48	@ 0x30
 8006d98:	d0f8      	beq.n	8006d8c <_dtoa_r+0x61c>
 8006d9a:	4647      	mov	r7, r8
 8006d9c:	e03b      	b.n	8006e16 <_dtoa_r+0x6a6>
 8006d9e:	4b9e      	ldr	r3, [pc, #632]	@ (8007018 <_dtoa_r+0x8a8>)
 8006da0:	f7f9 fbb2 	bl	8000508 <__aeabi_dmul>
 8006da4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006da8:	e7bc      	b.n	8006d24 <_dtoa_r+0x5b4>
 8006daa:	4656      	mov	r6, sl
 8006dac:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006db4:	4620      	mov	r0, r4
 8006db6:	4629      	mov	r1, r5
 8006db8:	f7f9 fcd0 	bl	800075c <__aeabi_ddiv>
 8006dbc:	f7f9 fe54 	bl	8000a68 <__aeabi_d2iz>
 8006dc0:	4680      	mov	r8, r0
 8006dc2:	f7f9 fb37 	bl	8000434 <__aeabi_i2d>
 8006dc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dca:	f7f9 fb9d 	bl	8000508 <__aeabi_dmul>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	f7f9 f9df 	bl	8000198 <__aeabi_dsub>
 8006dda:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006dde:	9d08      	ldr	r5, [sp, #32]
 8006de0:	f806 4b01 	strb.w	r4, [r6], #1
 8006de4:	eba6 040a 	sub.w	r4, r6, sl
 8006de8:	42a5      	cmp	r5, r4
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	d133      	bne.n	8006e58 <_dtoa_r+0x6e8>
 8006df0:	f7f9 f9d4 	bl	800019c <__adddf3>
 8006df4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006df8:	4604      	mov	r4, r0
 8006dfa:	460d      	mov	r5, r1
 8006dfc:	f7f9 fe14 	bl	8000a28 <__aeabi_dcmpgt>
 8006e00:	b9c0      	cbnz	r0, 8006e34 <_dtoa_r+0x6c4>
 8006e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e06:	4620      	mov	r0, r4
 8006e08:	4629      	mov	r1, r5
 8006e0a:	f7f9 fde5 	bl	80009d8 <__aeabi_dcmpeq>
 8006e0e:	b110      	cbz	r0, 8006e16 <_dtoa_r+0x6a6>
 8006e10:	f018 0f01 	tst.w	r8, #1
 8006e14:	d10e      	bne.n	8006e34 <_dtoa_r+0x6c4>
 8006e16:	4648      	mov	r0, r9
 8006e18:	9903      	ldr	r1, [sp, #12]
 8006e1a:	f000 fbbb 	bl	8007594 <_Bfree>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	7033      	strb	r3, [r6, #0]
 8006e22:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e24:	3701      	adds	r7, #1
 8006e26:	601f      	str	r7, [r3, #0]
 8006e28:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 824b 	beq.w	80072c6 <_dtoa_r+0xb56>
 8006e30:	601e      	str	r6, [r3, #0]
 8006e32:	e248      	b.n	80072c6 <_dtoa_r+0xb56>
 8006e34:	46b8      	mov	r8, r7
 8006e36:	4633      	mov	r3, r6
 8006e38:	461e      	mov	r6, r3
 8006e3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e3e:	2a39      	cmp	r2, #57	@ 0x39
 8006e40:	d106      	bne.n	8006e50 <_dtoa_r+0x6e0>
 8006e42:	459a      	cmp	sl, r3
 8006e44:	d1f8      	bne.n	8006e38 <_dtoa_r+0x6c8>
 8006e46:	2230      	movs	r2, #48	@ 0x30
 8006e48:	f108 0801 	add.w	r8, r8, #1
 8006e4c:	f88a 2000 	strb.w	r2, [sl]
 8006e50:	781a      	ldrb	r2, [r3, #0]
 8006e52:	3201      	adds	r2, #1
 8006e54:	701a      	strb	r2, [r3, #0]
 8006e56:	e7a0      	b.n	8006d9a <_dtoa_r+0x62a>
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4b6f      	ldr	r3, [pc, #444]	@ (8007018 <_dtoa_r+0x8a8>)
 8006e5c:	f7f9 fb54 	bl	8000508 <__aeabi_dmul>
 8006e60:	2200      	movs	r2, #0
 8006e62:	2300      	movs	r3, #0
 8006e64:	4604      	mov	r4, r0
 8006e66:	460d      	mov	r5, r1
 8006e68:	f7f9 fdb6 	bl	80009d8 <__aeabi_dcmpeq>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d09f      	beq.n	8006db0 <_dtoa_r+0x640>
 8006e70:	e7d1      	b.n	8006e16 <_dtoa_r+0x6a6>
 8006e72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e74:	2a00      	cmp	r2, #0
 8006e76:	f000 80ea 	beq.w	800704e <_dtoa_r+0x8de>
 8006e7a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006e7c:	2a01      	cmp	r2, #1
 8006e7e:	f300 80cd 	bgt.w	800701c <_dtoa_r+0x8ac>
 8006e82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006e84:	2a00      	cmp	r2, #0
 8006e86:	f000 80c1 	beq.w	800700c <_dtoa_r+0x89c>
 8006e8a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006e8e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e90:	9e04      	ldr	r6, [sp, #16]
 8006e92:	9a04      	ldr	r2, [sp, #16]
 8006e94:	2101      	movs	r1, #1
 8006e96:	441a      	add	r2, r3
 8006e98:	9204      	str	r2, [sp, #16]
 8006e9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e9c:	4648      	mov	r0, r9
 8006e9e:	441a      	add	r2, r3
 8006ea0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ea2:	f000 fc2b 	bl	80076fc <__i2b>
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	b166      	cbz	r6, 8006ec4 <_dtoa_r+0x754>
 8006eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	dd09      	ble.n	8006ec4 <_dtoa_r+0x754>
 8006eb0:	42b3      	cmp	r3, r6
 8006eb2:	bfa8      	it	ge
 8006eb4:	4633      	movge	r3, r6
 8006eb6:	9a04      	ldr	r2, [sp, #16]
 8006eb8:	1af6      	subs	r6, r6, r3
 8006eba:	1ad2      	subs	r2, r2, r3
 8006ebc:	9204      	str	r2, [sp, #16]
 8006ebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ec6:	b30b      	cbz	r3, 8006f0c <_dtoa_r+0x79c>
 8006ec8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 80c6 	beq.w	800705c <_dtoa_r+0x8ec>
 8006ed0:	2c00      	cmp	r4, #0
 8006ed2:	f000 80c0 	beq.w	8007056 <_dtoa_r+0x8e6>
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	4622      	mov	r2, r4
 8006eda:	4648      	mov	r0, r9
 8006edc:	f000 fcc6 	bl	800786c <__pow5mult>
 8006ee0:	9a03      	ldr	r2, [sp, #12]
 8006ee2:	4601      	mov	r1, r0
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	4648      	mov	r0, r9
 8006ee8:	f000 fc1e 	bl	8007728 <__multiply>
 8006eec:	9903      	ldr	r1, [sp, #12]
 8006eee:	4680      	mov	r8, r0
 8006ef0:	4648      	mov	r0, r9
 8006ef2:	f000 fb4f 	bl	8007594 <_Bfree>
 8006ef6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ef8:	1b1b      	subs	r3, r3, r4
 8006efa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006efc:	f000 80b1 	beq.w	8007062 <_dtoa_r+0x8f2>
 8006f00:	4641      	mov	r1, r8
 8006f02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f04:	4648      	mov	r0, r9
 8006f06:	f000 fcb1 	bl	800786c <__pow5mult>
 8006f0a:	9003      	str	r0, [sp, #12]
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	4648      	mov	r0, r9
 8006f10:	f000 fbf4 	bl	80076fc <__i2b>
 8006f14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f16:	4604      	mov	r4, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 81d8 	beq.w	80072ce <_dtoa_r+0xb5e>
 8006f1e:	461a      	mov	r2, r3
 8006f20:	4601      	mov	r1, r0
 8006f22:	4648      	mov	r0, r9
 8006f24:	f000 fca2 	bl	800786c <__pow5mult>
 8006f28:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	f300 809f 	bgt.w	8007070 <_dtoa_r+0x900>
 8006f32:	9b06      	ldr	r3, [sp, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f040 8097 	bne.w	8007068 <_dtoa_r+0x8f8>
 8006f3a:	9b07      	ldr	r3, [sp, #28]
 8006f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f040 8093 	bne.w	800706c <_dtoa_r+0x8fc>
 8006f46:	9b07      	ldr	r3, [sp, #28]
 8006f48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f4c:	0d1b      	lsrs	r3, r3, #20
 8006f4e:	051b      	lsls	r3, r3, #20
 8006f50:	b133      	cbz	r3, 8006f60 <_dtoa_r+0x7f0>
 8006f52:	9b04      	ldr	r3, [sp, #16]
 8006f54:	3301      	adds	r3, #1
 8006f56:	9304      	str	r3, [sp, #16]
 8006f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f5e:	2301      	movs	r3, #1
 8006f60:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 81b8 	beq.w	80072da <_dtoa_r+0xb6a>
 8006f6a:	6923      	ldr	r3, [r4, #16]
 8006f6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f70:	6918      	ldr	r0, [r3, #16]
 8006f72:	f000 fb77 	bl	8007664 <__hi0bits>
 8006f76:	f1c0 0020 	rsb	r0, r0, #32
 8006f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f7c:	4418      	add	r0, r3
 8006f7e:	f010 001f 	ands.w	r0, r0, #31
 8006f82:	f000 8082 	beq.w	800708a <_dtoa_r+0x91a>
 8006f86:	f1c0 0320 	rsb	r3, r0, #32
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	dd73      	ble.n	8007076 <_dtoa_r+0x906>
 8006f8e:	9b04      	ldr	r3, [sp, #16]
 8006f90:	f1c0 001c 	rsb	r0, r0, #28
 8006f94:	4403      	add	r3, r0
 8006f96:	9304      	str	r3, [sp, #16]
 8006f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f9a:	4406      	add	r6, r0
 8006f9c:	4403      	add	r3, r0
 8006f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fa0:	9b04      	ldr	r3, [sp, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	dd05      	ble.n	8006fb2 <_dtoa_r+0x842>
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	4648      	mov	r0, r9
 8006faa:	9903      	ldr	r1, [sp, #12]
 8006fac:	f000 fcb8 	bl	8007920 <__lshift>
 8006fb0:	9003      	str	r0, [sp, #12]
 8006fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	dd05      	ble.n	8006fc4 <_dtoa_r+0x854>
 8006fb8:	4621      	mov	r1, r4
 8006fba:	461a      	mov	r2, r3
 8006fbc:	4648      	mov	r0, r9
 8006fbe:	f000 fcaf 	bl	8007920 <__lshift>
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d061      	beq.n	800708e <_dtoa_r+0x91e>
 8006fca:	4621      	mov	r1, r4
 8006fcc:	9803      	ldr	r0, [sp, #12]
 8006fce:	f000 fd13 	bl	80079f8 <__mcmp>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	da5b      	bge.n	800708e <_dtoa_r+0x91e>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	220a      	movs	r2, #10
 8006fda:	4648      	mov	r0, r9
 8006fdc:	9903      	ldr	r1, [sp, #12]
 8006fde:	f000 fafb 	bl	80075d8 <__multadd>
 8006fe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fe4:	f107 38ff 	add.w	r8, r7, #4294967295
 8006fe8:	9003      	str	r0, [sp, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 8177 	beq.w	80072de <_dtoa_r+0xb6e>
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	220a      	movs	r2, #10
 8006ff6:	4648      	mov	r0, r9
 8006ff8:	f000 faee 	bl	80075d8 <__multadd>
 8006ffc:	f1bb 0f00 	cmp.w	fp, #0
 8007000:	4605      	mov	r5, r0
 8007002:	dc6f      	bgt.n	80070e4 <_dtoa_r+0x974>
 8007004:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007006:	2b02      	cmp	r3, #2
 8007008:	dc49      	bgt.n	800709e <_dtoa_r+0x92e>
 800700a:	e06b      	b.n	80070e4 <_dtoa_r+0x974>
 800700c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800700e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007012:	e73c      	b.n	8006e8e <_dtoa_r+0x71e>
 8007014:	3fe00000 	.word	0x3fe00000
 8007018:	40240000 	.word	0x40240000
 800701c:	9b08      	ldr	r3, [sp, #32]
 800701e:	1e5c      	subs	r4, r3, #1
 8007020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007022:	42a3      	cmp	r3, r4
 8007024:	db09      	blt.n	800703a <_dtoa_r+0x8ca>
 8007026:	1b1c      	subs	r4, r3, r4
 8007028:	9b08      	ldr	r3, [sp, #32]
 800702a:	2b00      	cmp	r3, #0
 800702c:	f6bf af30 	bge.w	8006e90 <_dtoa_r+0x720>
 8007030:	9b04      	ldr	r3, [sp, #16]
 8007032:	9a08      	ldr	r2, [sp, #32]
 8007034:	1a9e      	subs	r6, r3, r2
 8007036:	2300      	movs	r3, #0
 8007038:	e72b      	b.n	8006e92 <_dtoa_r+0x722>
 800703a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800703c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800703e:	1ae3      	subs	r3, r4, r3
 8007040:	441a      	add	r2, r3
 8007042:	940a      	str	r4, [sp, #40]	@ 0x28
 8007044:	9e04      	ldr	r6, [sp, #16]
 8007046:	2400      	movs	r4, #0
 8007048:	9b08      	ldr	r3, [sp, #32]
 800704a:	920e      	str	r2, [sp, #56]	@ 0x38
 800704c:	e721      	b.n	8006e92 <_dtoa_r+0x722>
 800704e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007050:	9e04      	ldr	r6, [sp, #16]
 8007052:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007054:	e728      	b.n	8006ea8 <_dtoa_r+0x738>
 8007056:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800705a:	e751      	b.n	8006f00 <_dtoa_r+0x790>
 800705c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800705e:	9903      	ldr	r1, [sp, #12]
 8007060:	e750      	b.n	8006f04 <_dtoa_r+0x794>
 8007062:	f8cd 800c 	str.w	r8, [sp, #12]
 8007066:	e751      	b.n	8006f0c <_dtoa_r+0x79c>
 8007068:	2300      	movs	r3, #0
 800706a:	e779      	b.n	8006f60 <_dtoa_r+0x7f0>
 800706c:	9b06      	ldr	r3, [sp, #24]
 800706e:	e777      	b.n	8006f60 <_dtoa_r+0x7f0>
 8007070:	2300      	movs	r3, #0
 8007072:	930a      	str	r3, [sp, #40]	@ 0x28
 8007074:	e779      	b.n	8006f6a <_dtoa_r+0x7fa>
 8007076:	d093      	beq.n	8006fa0 <_dtoa_r+0x830>
 8007078:	9a04      	ldr	r2, [sp, #16]
 800707a:	331c      	adds	r3, #28
 800707c:	441a      	add	r2, r3
 800707e:	9204      	str	r2, [sp, #16]
 8007080:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007082:	441e      	add	r6, r3
 8007084:	441a      	add	r2, r3
 8007086:	9209      	str	r2, [sp, #36]	@ 0x24
 8007088:	e78a      	b.n	8006fa0 <_dtoa_r+0x830>
 800708a:	4603      	mov	r3, r0
 800708c:	e7f4      	b.n	8007078 <_dtoa_r+0x908>
 800708e:	9b08      	ldr	r3, [sp, #32]
 8007090:	46b8      	mov	r8, r7
 8007092:	2b00      	cmp	r3, #0
 8007094:	dc20      	bgt.n	80070d8 <_dtoa_r+0x968>
 8007096:	469b      	mov	fp, r3
 8007098:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800709a:	2b02      	cmp	r3, #2
 800709c:	dd1e      	ble.n	80070dc <_dtoa_r+0x96c>
 800709e:	f1bb 0f00 	cmp.w	fp, #0
 80070a2:	f47f adb1 	bne.w	8006c08 <_dtoa_r+0x498>
 80070a6:	4621      	mov	r1, r4
 80070a8:	465b      	mov	r3, fp
 80070aa:	2205      	movs	r2, #5
 80070ac:	4648      	mov	r0, r9
 80070ae:	f000 fa93 	bl	80075d8 <__multadd>
 80070b2:	4601      	mov	r1, r0
 80070b4:	4604      	mov	r4, r0
 80070b6:	9803      	ldr	r0, [sp, #12]
 80070b8:	f000 fc9e 	bl	80079f8 <__mcmp>
 80070bc:	2800      	cmp	r0, #0
 80070be:	f77f ada3 	ble.w	8006c08 <_dtoa_r+0x498>
 80070c2:	4656      	mov	r6, sl
 80070c4:	2331      	movs	r3, #49	@ 0x31
 80070c6:	f108 0801 	add.w	r8, r8, #1
 80070ca:	f806 3b01 	strb.w	r3, [r6], #1
 80070ce:	e59f      	b.n	8006c10 <_dtoa_r+0x4a0>
 80070d0:	46b8      	mov	r8, r7
 80070d2:	9c08      	ldr	r4, [sp, #32]
 80070d4:	4625      	mov	r5, r4
 80070d6:	e7f4      	b.n	80070c2 <_dtoa_r+0x952>
 80070d8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80070dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 8101 	beq.w	80072e6 <_dtoa_r+0xb76>
 80070e4:	2e00      	cmp	r6, #0
 80070e6:	dd05      	ble.n	80070f4 <_dtoa_r+0x984>
 80070e8:	4629      	mov	r1, r5
 80070ea:	4632      	mov	r2, r6
 80070ec:	4648      	mov	r0, r9
 80070ee:	f000 fc17 	bl	8007920 <__lshift>
 80070f2:	4605      	mov	r5, r0
 80070f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d05c      	beq.n	80071b4 <_dtoa_r+0xa44>
 80070fa:	4648      	mov	r0, r9
 80070fc:	6869      	ldr	r1, [r5, #4]
 80070fe:	f000 fa09 	bl	8007514 <_Balloc>
 8007102:	4606      	mov	r6, r0
 8007104:	b928      	cbnz	r0, 8007112 <_dtoa_r+0x9a2>
 8007106:	4602      	mov	r2, r0
 8007108:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800710c:	4b80      	ldr	r3, [pc, #512]	@ (8007310 <_dtoa_r+0xba0>)
 800710e:	f7ff bb43 	b.w	8006798 <_dtoa_r+0x28>
 8007112:	692a      	ldr	r2, [r5, #16]
 8007114:	f105 010c 	add.w	r1, r5, #12
 8007118:	3202      	adds	r2, #2
 800711a:	0092      	lsls	r2, r2, #2
 800711c:	300c      	adds	r0, #12
 800711e:	f001 f823 	bl	8008168 <memcpy>
 8007122:	2201      	movs	r2, #1
 8007124:	4631      	mov	r1, r6
 8007126:	4648      	mov	r0, r9
 8007128:	f000 fbfa 	bl	8007920 <__lshift>
 800712c:	462f      	mov	r7, r5
 800712e:	4605      	mov	r5, r0
 8007130:	f10a 0301 	add.w	r3, sl, #1
 8007134:	9304      	str	r3, [sp, #16]
 8007136:	eb0a 030b 	add.w	r3, sl, fp
 800713a:	930a      	str	r3, [sp, #40]	@ 0x28
 800713c:	9b06      	ldr	r3, [sp, #24]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	9309      	str	r3, [sp, #36]	@ 0x24
 8007144:	9b04      	ldr	r3, [sp, #16]
 8007146:	4621      	mov	r1, r4
 8007148:	9803      	ldr	r0, [sp, #12]
 800714a:	f103 3bff 	add.w	fp, r3, #4294967295
 800714e:	f7ff fa86 	bl	800665e <quorem>
 8007152:	4603      	mov	r3, r0
 8007154:	4639      	mov	r1, r7
 8007156:	3330      	adds	r3, #48	@ 0x30
 8007158:	9006      	str	r0, [sp, #24]
 800715a:	9803      	ldr	r0, [sp, #12]
 800715c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800715e:	f000 fc4b 	bl	80079f8 <__mcmp>
 8007162:	462a      	mov	r2, r5
 8007164:	9008      	str	r0, [sp, #32]
 8007166:	4621      	mov	r1, r4
 8007168:	4648      	mov	r0, r9
 800716a:	f000 fc61 	bl	8007a30 <__mdiff>
 800716e:	68c2      	ldr	r2, [r0, #12]
 8007170:	4606      	mov	r6, r0
 8007172:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007174:	bb02      	cbnz	r2, 80071b8 <_dtoa_r+0xa48>
 8007176:	4601      	mov	r1, r0
 8007178:	9803      	ldr	r0, [sp, #12]
 800717a:	f000 fc3d 	bl	80079f8 <__mcmp>
 800717e:	4602      	mov	r2, r0
 8007180:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007182:	4631      	mov	r1, r6
 8007184:	4648      	mov	r0, r9
 8007186:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800718a:	f000 fa03 	bl	8007594 <_Bfree>
 800718e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007190:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007192:	9e04      	ldr	r6, [sp, #16]
 8007194:	ea42 0103 	orr.w	r1, r2, r3
 8007198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719a:	4319      	orrs	r1, r3
 800719c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800719e:	d10d      	bne.n	80071bc <_dtoa_r+0xa4c>
 80071a0:	2b39      	cmp	r3, #57	@ 0x39
 80071a2:	d027      	beq.n	80071f4 <_dtoa_r+0xa84>
 80071a4:	9a08      	ldr	r2, [sp, #32]
 80071a6:	2a00      	cmp	r2, #0
 80071a8:	dd01      	ble.n	80071ae <_dtoa_r+0xa3e>
 80071aa:	9b06      	ldr	r3, [sp, #24]
 80071ac:	3331      	adds	r3, #49	@ 0x31
 80071ae:	f88b 3000 	strb.w	r3, [fp]
 80071b2:	e52e      	b.n	8006c12 <_dtoa_r+0x4a2>
 80071b4:	4628      	mov	r0, r5
 80071b6:	e7b9      	b.n	800712c <_dtoa_r+0x9bc>
 80071b8:	2201      	movs	r2, #1
 80071ba:	e7e2      	b.n	8007182 <_dtoa_r+0xa12>
 80071bc:	9908      	ldr	r1, [sp, #32]
 80071be:	2900      	cmp	r1, #0
 80071c0:	db04      	blt.n	80071cc <_dtoa_r+0xa5c>
 80071c2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80071c4:	4301      	orrs	r1, r0
 80071c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071c8:	4301      	orrs	r1, r0
 80071ca:	d120      	bne.n	800720e <_dtoa_r+0xa9e>
 80071cc:	2a00      	cmp	r2, #0
 80071ce:	ddee      	ble.n	80071ae <_dtoa_r+0xa3e>
 80071d0:	2201      	movs	r2, #1
 80071d2:	9903      	ldr	r1, [sp, #12]
 80071d4:	4648      	mov	r0, r9
 80071d6:	9304      	str	r3, [sp, #16]
 80071d8:	f000 fba2 	bl	8007920 <__lshift>
 80071dc:	4621      	mov	r1, r4
 80071de:	9003      	str	r0, [sp, #12]
 80071e0:	f000 fc0a 	bl	80079f8 <__mcmp>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	9b04      	ldr	r3, [sp, #16]
 80071e8:	dc02      	bgt.n	80071f0 <_dtoa_r+0xa80>
 80071ea:	d1e0      	bne.n	80071ae <_dtoa_r+0xa3e>
 80071ec:	07da      	lsls	r2, r3, #31
 80071ee:	d5de      	bpl.n	80071ae <_dtoa_r+0xa3e>
 80071f0:	2b39      	cmp	r3, #57	@ 0x39
 80071f2:	d1da      	bne.n	80071aa <_dtoa_r+0xa3a>
 80071f4:	2339      	movs	r3, #57	@ 0x39
 80071f6:	f88b 3000 	strb.w	r3, [fp]
 80071fa:	4633      	mov	r3, r6
 80071fc:	461e      	mov	r6, r3
 80071fe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007202:	3b01      	subs	r3, #1
 8007204:	2a39      	cmp	r2, #57	@ 0x39
 8007206:	d04e      	beq.n	80072a6 <_dtoa_r+0xb36>
 8007208:	3201      	adds	r2, #1
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	e501      	b.n	8006c12 <_dtoa_r+0x4a2>
 800720e:	2a00      	cmp	r2, #0
 8007210:	dd03      	ble.n	800721a <_dtoa_r+0xaaa>
 8007212:	2b39      	cmp	r3, #57	@ 0x39
 8007214:	d0ee      	beq.n	80071f4 <_dtoa_r+0xa84>
 8007216:	3301      	adds	r3, #1
 8007218:	e7c9      	b.n	80071ae <_dtoa_r+0xa3e>
 800721a:	9a04      	ldr	r2, [sp, #16]
 800721c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800721e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007222:	428a      	cmp	r2, r1
 8007224:	d028      	beq.n	8007278 <_dtoa_r+0xb08>
 8007226:	2300      	movs	r3, #0
 8007228:	220a      	movs	r2, #10
 800722a:	9903      	ldr	r1, [sp, #12]
 800722c:	4648      	mov	r0, r9
 800722e:	f000 f9d3 	bl	80075d8 <__multadd>
 8007232:	42af      	cmp	r7, r5
 8007234:	9003      	str	r0, [sp, #12]
 8007236:	f04f 0300 	mov.w	r3, #0
 800723a:	f04f 020a 	mov.w	r2, #10
 800723e:	4639      	mov	r1, r7
 8007240:	4648      	mov	r0, r9
 8007242:	d107      	bne.n	8007254 <_dtoa_r+0xae4>
 8007244:	f000 f9c8 	bl	80075d8 <__multadd>
 8007248:	4607      	mov	r7, r0
 800724a:	4605      	mov	r5, r0
 800724c:	9b04      	ldr	r3, [sp, #16]
 800724e:	3301      	adds	r3, #1
 8007250:	9304      	str	r3, [sp, #16]
 8007252:	e777      	b.n	8007144 <_dtoa_r+0x9d4>
 8007254:	f000 f9c0 	bl	80075d8 <__multadd>
 8007258:	4629      	mov	r1, r5
 800725a:	4607      	mov	r7, r0
 800725c:	2300      	movs	r3, #0
 800725e:	220a      	movs	r2, #10
 8007260:	4648      	mov	r0, r9
 8007262:	f000 f9b9 	bl	80075d8 <__multadd>
 8007266:	4605      	mov	r5, r0
 8007268:	e7f0      	b.n	800724c <_dtoa_r+0xadc>
 800726a:	f1bb 0f00 	cmp.w	fp, #0
 800726e:	bfcc      	ite	gt
 8007270:	465e      	movgt	r6, fp
 8007272:	2601      	movle	r6, #1
 8007274:	2700      	movs	r7, #0
 8007276:	4456      	add	r6, sl
 8007278:	2201      	movs	r2, #1
 800727a:	9903      	ldr	r1, [sp, #12]
 800727c:	4648      	mov	r0, r9
 800727e:	9304      	str	r3, [sp, #16]
 8007280:	f000 fb4e 	bl	8007920 <__lshift>
 8007284:	4621      	mov	r1, r4
 8007286:	9003      	str	r0, [sp, #12]
 8007288:	f000 fbb6 	bl	80079f8 <__mcmp>
 800728c:	2800      	cmp	r0, #0
 800728e:	dcb4      	bgt.n	80071fa <_dtoa_r+0xa8a>
 8007290:	d102      	bne.n	8007298 <_dtoa_r+0xb28>
 8007292:	9b04      	ldr	r3, [sp, #16]
 8007294:	07db      	lsls	r3, r3, #31
 8007296:	d4b0      	bmi.n	80071fa <_dtoa_r+0xa8a>
 8007298:	4633      	mov	r3, r6
 800729a:	461e      	mov	r6, r3
 800729c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072a0:	2a30      	cmp	r2, #48	@ 0x30
 80072a2:	d0fa      	beq.n	800729a <_dtoa_r+0xb2a>
 80072a4:	e4b5      	b.n	8006c12 <_dtoa_r+0x4a2>
 80072a6:	459a      	cmp	sl, r3
 80072a8:	d1a8      	bne.n	80071fc <_dtoa_r+0xa8c>
 80072aa:	2331      	movs	r3, #49	@ 0x31
 80072ac:	f108 0801 	add.w	r8, r8, #1
 80072b0:	f88a 3000 	strb.w	r3, [sl]
 80072b4:	e4ad      	b.n	8006c12 <_dtoa_r+0x4a2>
 80072b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007314 <_dtoa_r+0xba4>
 80072bc:	b11b      	cbz	r3, 80072c6 <_dtoa_r+0xb56>
 80072be:	f10a 0308 	add.w	r3, sl, #8
 80072c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	4650      	mov	r0, sl
 80072c8:	b017      	add	sp, #92	@ 0x5c
 80072ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	f77f ae2e 	ble.w	8006f32 <_dtoa_r+0x7c2>
 80072d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80072da:	2001      	movs	r0, #1
 80072dc:	e64d      	b.n	8006f7a <_dtoa_r+0x80a>
 80072de:	f1bb 0f00 	cmp.w	fp, #0
 80072e2:	f77f aed9 	ble.w	8007098 <_dtoa_r+0x928>
 80072e6:	4656      	mov	r6, sl
 80072e8:	4621      	mov	r1, r4
 80072ea:	9803      	ldr	r0, [sp, #12]
 80072ec:	f7ff f9b7 	bl	800665e <quorem>
 80072f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80072f4:	f806 3b01 	strb.w	r3, [r6], #1
 80072f8:	eba6 020a 	sub.w	r2, r6, sl
 80072fc:	4593      	cmp	fp, r2
 80072fe:	ddb4      	ble.n	800726a <_dtoa_r+0xafa>
 8007300:	2300      	movs	r3, #0
 8007302:	220a      	movs	r2, #10
 8007304:	4648      	mov	r0, r9
 8007306:	9903      	ldr	r1, [sp, #12]
 8007308:	f000 f966 	bl	80075d8 <__multadd>
 800730c:	9003      	str	r0, [sp, #12]
 800730e:	e7eb      	b.n	80072e8 <_dtoa_r+0xb78>
 8007310:	0800846c 	.word	0x0800846c
 8007314:	080083f0 	.word	0x080083f0

08007318 <_free_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4605      	mov	r5, r0
 800731c:	2900      	cmp	r1, #0
 800731e:	d040      	beq.n	80073a2 <_free_r+0x8a>
 8007320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007324:	1f0c      	subs	r4, r1, #4
 8007326:	2b00      	cmp	r3, #0
 8007328:	bfb8      	it	lt
 800732a:	18e4      	addlt	r4, r4, r3
 800732c:	f000 f8e6 	bl	80074fc <__malloc_lock>
 8007330:	4a1c      	ldr	r2, [pc, #112]	@ (80073a4 <_free_r+0x8c>)
 8007332:	6813      	ldr	r3, [r2, #0]
 8007334:	b933      	cbnz	r3, 8007344 <_free_r+0x2c>
 8007336:	6063      	str	r3, [r4, #4]
 8007338:	6014      	str	r4, [r2, #0]
 800733a:	4628      	mov	r0, r5
 800733c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007340:	f000 b8e2 	b.w	8007508 <__malloc_unlock>
 8007344:	42a3      	cmp	r3, r4
 8007346:	d908      	bls.n	800735a <_free_r+0x42>
 8007348:	6820      	ldr	r0, [r4, #0]
 800734a:	1821      	adds	r1, r4, r0
 800734c:	428b      	cmp	r3, r1
 800734e:	bf01      	itttt	eq
 8007350:	6819      	ldreq	r1, [r3, #0]
 8007352:	685b      	ldreq	r3, [r3, #4]
 8007354:	1809      	addeq	r1, r1, r0
 8007356:	6021      	streq	r1, [r4, #0]
 8007358:	e7ed      	b.n	8007336 <_free_r+0x1e>
 800735a:	461a      	mov	r2, r3
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	b10b      	cbz	r3, 8007364 <_free_r+0x4c>
 8007360:	42a3      	cmp	r3, r4
 8007362:	d9fa      	bls.n	800735a <_free_r+0x42>
 8007364:	6811      	ldr	r1, [r2, #0]
 8007366:	1850      	adds	r0, r2, r1
 8007368:	42a0      	cmp	r0, r4
 800736a:	d10b      	bne.n	8007384 <_free_r+0x6c>
 800736c:	6820      	ldr	r0, [r4, #0]
 800736e:	4401      	add	r1, r0
 8007370:	1850      	adds	r0, r2, r1
 8007372:	4283      	cmp	r3, r0
 8007374:	6011      	str	r1, [r2, #0]
 8007376:	d1e0      	bne.n	800733a <_free_r+0x22>
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	4408      	add	r0, r1
 800737e:	6010      	str	r0, [r2, #0]
 8007380:	6053      	str	r3, [r2, #4]
 8007382:	e7da      	b.n	800733a <_free_r+0x22>
 8007384:	d902      	bls.n	800738c <_free_r+0x74>
 8007386:	230c      	movs	r3, #12
 8007388:	602b      	str	r3, [r5, #0]
 800738a:	e7d6      	b.n	800733a <_free_r+0x22>
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	1821      	adds	r1, r4, r0
 8007390:	428b      	cmp	r3, r1
 8007392:	bf01      	itttt	eq
 8007394:	6819      	ldreq	r1, [r3, #0]
 8007396:	685b      	ldreq	r3, [r3, #4]
 8007398:	1809      	addeq	r1, r1, r0
 800739a:	6021      	streq	r1, [r4, #0]
 800739c:	6063      	str	r3, [r4, #4]
 800739e:	6054      	str	r4, [r2, #4]
 80073a0:	e7cb      	b.n	800733a <_free_r+0x22>
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
 80073a4:	20000a90 	.word	0x20000a90

080073a8 <malloc>:
 80073a8:	4b02      	ldr	r3, [pc, #8]	@ (80073b4 <malloc+0xc>)
 80073aa:	4601      	mov	r1, r0
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	f000 b825 	b.w	80073fc <_malloc_r>
 80073b2:	bf00      	nop
 80073b4:	20000018 	.word	0x20000018

080073b8 <sbrk_aligned>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	4e0f      	ldr	r6, [pc, #60]	@ (80073f8 <sbrk_aligned+0x40>)
 80073bc:	460c      	mov	r4, r1
 80073be:	6831      	ldr	r1, [r6, #0]
 80073c0:	4605      	mov	r5, r0
 80073c2:	b911      	cbnz	r1, 80073ca <sbrk_aligned+0x12>
 80073c4:	f000 fec0 	bl	8008148 <_sbrk_r>
 80073c8:	6030      	str	r0, [r6, #0]
 80073ca:	4621      	mov	r1, r4
 80073cc:	4628      	mov	r0, r5
 80073ce:	f000 febb 	bl	8008148 <_sbrk_r>
 80073d2:	1c43      	adds	r3, r0, #1
 80073d4:	d103      	bne.n	80073de <sbrk_aligned+0x26>
 80073d6:	f04f 34ff 	mov.w	r4, #4294967295
 80073da:	4620      	mov	r0, r4
 80073dc:	bd70      	pop	{r4, r5, r6, pc}
 80073de:	1cc4      	adds	r4, r0, #3
 80073e0:	f024 0403 	bic.w	r4, r4, #3
 80073e4:	42a0      	cmp	r0, r4
 80073e6:	d0f8      	beq.n	80073da <sbrk_aligned+0x22>
 80073e8:	1a21      	subs	r1, r4, r0
 80073ea:	4628      	mov	r0, r5
 80073ec:	f000 feac 	bl	8008148 <_sbrk_r>
 80073f0:	3001      	adds	r0, #1
 80073f2:	d1f2      	bne.n	80073da <sbrk_aligned+0x22>
 80073f4:	e7ef      	b.n	80073d6 <sbrk_aligned+0x1e>
 80073f6:	bf00      	nop
 80073f8:	20000a8c 	.word	0x20000a8c

080073fc <_malloc_r>:
 80073fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007400:	1ccd      	adds	r5, r1, #3
 8007402:	f025 0503 	bic.w	r5, r5, #3
 8007406:	3508      	adds	r5, #8
 8007408:	2d0c      	cmp	r5, #12
 800740a:	bf38      	it	cc
 800740c:	250c      	movcc	r5, #12
 800740e:	2d00      	cmp	r5, #0
 8007410:	4606      	mov	r6, r0
 8007412:	db01      	blt.n	8007418 <_malloc_r+0x1c>
 8007414:	42a9      	cmp	r1, r5
 8007416:	d904      	bls.n	8007422 <_malloc_r+0x26>
 8007418:	230c      	movs	r3, #12
 800741a:	6033      	str	r3, [r6, #0]
 800741c:	2000      	movs	r0, #0
 800741e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007422:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074f8 <_malloc_r+0xfc>
 8007426:	f000 f869 	bl	80074fc <__malloc_lock>
 800742a:	f8d8 3000 	ldr.w	r3, [r8]
 800742e:	461c      	mov	r4, r3
 8007430:	bb44      	cbnz	r4, 8007484 <_malloc_r+0x88>
 8007432:	4629      	mov	r1, r5
 8007434:	4630      	mov	r0, r6
 8007436:	f7ff ffbf 	bl	80073b8 <sbrk_aligned>
 800743a:	1c43      	adds	r3, r0, #1
 800743c:	4604      	mov	r4, r0
 800743e:	d158      	bne.n	80074f2 <_malloc_r+0xf6>
 8007440:	f8d8 4000 	ldr.w	r4, [r8]
 8007444:	4627      	mov	r7, r4
 8007446:	2f00      	cmp	r7, #0
 8007448:	d143      	bne.n	80074d2 <_malloc_r+0xd6>
 800744a:	2c00      	cmp	r4, #0
 800744c:	d04b      	beq.n	80074e6 <_malloc_r+0xea>
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	4639      	mov	r1, r7
 8007452:	4630      	mov	r0, r6
 8007454:	eb04 0903 	add.w	r9, r4, r3
 8007458:	f000 fe76 	bl	8008148 <_sbrk_r>
 800745c:	4581      	cmp	r9, r0
 800745e:	d142      	bne.n	80074e6 <_malloc_r+0xea>
 8007460:	6821      	ldr	r1, [r4, #0]
 8007462:	4630      	mov	r0, r6
 8007464:	1a6d      	subs	r5, r5, r1
 8007466:	4629      	mov	r1, r5
 8007468:	f7ff ffa6 	bl	80073b8 <sbrk_aligned>
 800746c:	3001      	adds	r0, #1
 800746e:	d03a      	beq.n	80074e6 <_malloc_r+0xea>
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	442b      	add	r3, r5
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	f8d8 3000 	ldr.w	r3, [r8]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	bb62      	cbnz	r2, 80074d8 <_malloc_r+0xdc>
 800747e:	f8c8 7000 	str.w	r7, [r8]
 8007482:	e00f      	b.n	80074a4 <_malloc_r+0xa8>
 8007484:	6822      	ldr	r2, [r4, #0]
 8007486:	1b52      	subs	r2, r2, r5
 8007488:	d420      	bmi.n	80074cc <_malloc_r+0xd0>
 800748a:	2a0b      	cmp	r2, #11
 800748c:	d917      	bls.n	80074be <_malloc_r+0xc2>
 800748e:	1961      	adds	r1, r4, r5
 8007490:	42a3      	cmp	r3, r4
 8007492:	6025      	str	r5, [r4, #0]
 8007494:	bf18      	it	ne
 8007496:	6059      	strne	r1, [r3, #4]
 8007498:	6863      	ldr	r3, [r4, #4]
 800749a:	bf08      	it	eq
 800749c:	f8c8 1000 	streq.w	r1, [r8]
 80074a0:	5162      	str	r2, [r4, r5]
 80074a2:	604b      	str	r3, [r1, #4]
 80074a4:	4630      	mov	r0, r6
 80074a6:	f000 f82f 	bl	8007508 <__malloc_unlock>
 80074aa:	f104 000b 	add.w	r0, r4, #11
 80074ae:	1d23      	adds	r3, r4, #4
 80074b0:	f020 0007 	bic.w	r0, r0, #7
 80074b4:	1ac2      	subs	r2, r0, r3
 80074b6:	bf1c      	itt	ne
 80074b8:	1a1b      	subne	r3, r3, r0
 80074ba:	50a3      	strne	r3, [r4, r2]
 80074bc:	e7af      	b.n	800741e <_malloc_r+0x22>
 80074be:	6862      	ldr	r2, [r4, #4]
 80074c0:	42a3      	cmp	r3, r4
 80074c2:	bf0c      	ite	eq
 80074c4:	f8c8 2000 	streq.w	r2, [r8]
 80074c8:	605a      	strne	r2, [r3, #4]
 80074ca:	e7eb      	b.n	80074a4 <_malloc_r+0xa8>
 80074cc:	4623      	mov	r3, r4
 80074ce:	6864      	ldr	r4, [r4, #4]
 80074d0:	e7ae      	b.n	8007430 <_malloc_r+0x34>
 80074d2:	463c      	mov	r4, r7
 80074d4:	687f      	ldr	r7, [r7, #4]
 80074d6:	e7b6      	b.n	8007446 <_malloc_r+0x4a>
 80074d8:	461a      	mov	r2, r3
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	42a3      	cmp	r3, r4
 80074de:	d1fb      	bne.n	80074d8 <_malloc_r+0xdc>
 80074e0:	2300      	movs	r3, #0
 80074e2:	6053      	str	r3, [r2, #4]
 80074e4:	e7de      	b.n	80074a4 <_malloc_r+0xa8>
 80074e6:	230c      	movs	r3, #12
 80074e8:	4630      	mov	r0, r6
 80074ea:	6033      	str	r3, [r6, #0]
 80074ec:	f000 f80c 	bl	8007508 <__malloc_unlock>
 80074f0:	e794      	b.n	800741c <_malloc_r+0x20>
 80074f2:	6005      	str	r5, [r0, #0]
 80074f4:	e7d6      	b.n	80074a4 <_malloc_r+0xa8>
 80074f6:	bf00      	nop
 80074f8:	20000a90 	.word	0x20000a90

080074fc <__malloc_lock>:
 80074fc:	4801      	ldr	r0, [pc, #4]	@ (8007504 <__malloc_lock+0x8>)
 80074fe:	f7ff b89e 	b.w	800663e <__retarget_lock_acquire_recursive>
 8007502:	bf00      	nop
 8007504:	20000a88 	.word	0x20000a88

08007508 <__malloc_unlock>:
 8007508:	4801      	ldr	r0, [pc, #4]	@ (8007510 <__malloc_unlock+0x8>)
 800750a:	f7ff b899 	b.w	8006640 <__retarget_lock_release_recursive>
 800750e:	bf00      	nop
 8007510:	20000a88 	.word	0x20000a88

08007514 <_Balloc>:
 8007514:	b570      	push	{r4, r5, r6, lr}
 8007516:	69c6      	ldr	r6, [r0, #28]
 8007518:	4604      	mov	r4, r0
 800751a:	460d      	mov	r5, r1
 800751c:	b976      	cbnz	r6, 800753c <_Balloc+0x28>
 800751e:	2010      	movs	r0, #16
 8007520:	f7ff ff42 	bl	80073a8 <malloc>
 8007524:	4602      	mov	r2, r0
 8007526:	61e0      	str	r0, [r4, #28]
 8007528:	b920      	cbnz	r0, 8007534 <_Balloc+0x20>
 800752a:	216b      	movs	r1, #107	@ 0x6b
 800752c:	4b17      	ldr	r3, [pc, #92]	@ (800758c <_Balloc+0x78>)
 800752e:	4818      	ldr	r0, [pc, #96]	@ (8007590 <_Balloc+0x7c>)
 8007530:	f000 fe28 	bl	8008184 <__assert_func>
 8007534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007538:	6006      	str	r6, [r0, #0]
 800753a:	60c6      	str	r6, [r0, #12]
 800753c:	69e6      	ldr	r6, [r4, #28]
 800753e:	68f3      	ldr	r3, [r6, #12]
 8007540:	b183      	cbz	r3, 8007564 <_Balloc+0x50>
 8007542:	69e3      	ldr	r3, [r4, #28]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800754a:	b9b8      	cbnz	r0, 800757c <_Balloc+0x68>
 800754c:	2101      	movs	r1, #1
 800754e:	fa01 f605 	lsl.w	r6, r1, r5
 8007552:	1d72      	adds	r2, r6, #5
 8007554:	4620      	mov	r0, r4
 8007556:	0092      	lsls	r2, r2, #2
 8007558:	f000 fe32 	bl	80081c0 <_calloc_r>
 800755c:	b160      	cbz	r0, 8007578 <_Balloc+0x64>
 800755e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007562:	e00e      	b.n	8007582 <_Balloc+0x6e>
 8007564:	2221      	movs	r2, #33	@ 0x21
 8007566:	2104      	movs	r1, #4
 8007568:	4620      	mov	r0, r4
 800756a:	f000 fe29 	bl	80081c0 <_calloc_r>
 800756e:	69e3      	ldr	r3, [r4, #28]
 8007570:	60f0      	str	r0, [r6, #12]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e4      	bne.n	8007542 <_Balloc+0x2e>
 8007578:	2000      	movs	r0, #0
 800757a:	bd70      	pop	{r4, r5, r6, pc}
 800757c:	6802      	ldr	r2, [r0, #0]
 800757e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007582:	2300      	movs	r3, #0
 8007584:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007588:	e7f7      	b.n	800757a <_Balloc+0x66>
 800758a:	bf00      	nop
 800758c:	080083fd 	.word	0x080083fd
 8007590:	0800847d 	.word	0x0800847d

08007594 <_Bfree>:
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	69c6      	ldr	r6, [r0, #28]
 8007598:	4605      	mov	r5, r0
 800759a:	460c      	mov	r4, r1
 800759c:	b976      	cbnz	r6, 80075bc <_Bfree+0x28>
 800759e:	2010      	movs	r0, #16
 80075a0:	f7ff ff02 	bl	80073a8 <malloc>
 80075a4:	4602      	mov	r2, r0
 80075a6:	61e8      	str	r0, [r5, #28]
 80075a8:	b920      	cbnz	r0, 80075b4 <_Bfree+0x20>
 80075aa:	218f      	movs	r1, #143	@ 0x8f
 80075ac:	4b08      	ldr	r3, [pc, #32]	@ (80075d0 <_Bfree+0x3c>)
 80075ae:	4809      	ldr	r0, [pc, #36]	@ (80075d4 <_Bfree+0x40>)
 80075b0:	f000 fde8 	bl	8008184 <__assert_func>
 80075b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075b8:	6006      	str	r6, [r0, #0]
 80075ba:	60c6      	str	r6, [r0, #12]
 80075bc:	b13c      	cbz	r4, 80075ce <_Bfree+0x3a>
 80075be:	69eb      	ldr	r3, [r5, #28]
 80075c0:	6862      	ldr	r2, [r4, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075c8:	6021      	str	r1, [r4, #0]
 80075ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	080083fd 	.word	0x080083fd
 80075d4:	0800847d 	.word	0x0800847d

080075d8 <__multadd>:
 80075d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075dc:	4607      	mov	r7, r0
 80075de:	460c      	mov	r4, r1
 80075e0:	461e      	mov	r6, r3
 80075e2:	2000      	movs	r0, #0
 80075e4:	690d      	ldr	r5, [r1, #16]
 80075e6:	f101 0c14 	add.w	ip, r1, #20
 80075ea:	f8dc 3000 	ldr.w	r3, [ip]
 80075ee:	3001      	adds	r0, #1
 80075f0:	b299      	uxth	r1, r3
 80075f2:	fb02 6101 	mla	r1, r2, r1, r6
 80075f6:	0c1e      	lsrs	r6, r3, #16
 80075f8:	0c0b      	lsrs	r3, r1, #16
 80075fa:	fb02 3306 	mla	r3, r2, r6, r3
 80075fe:	b289      	uxth	r1, r1
 8007600:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007604:	4285      	cmp	r5, r0
 8007606:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800760a:	f84c 1b04 	str.w	r1, [ip], #4
 800760e:	dcec      	bgt.n	80075ea <__multadd+0x12>
 8007610:	b30e      	cbz	r6, 8007656 <__multadd+0x7e>
 8007612:	68a3      	ldr	r3, [r4, #8]
 8007614:	42ab      	cmp	r3, r5
 8007616:	dc19      	bgt.n	800764c <__multadd+0x74>
 8007618:	6861      	ldr	r1, [r4, #4]
 800761a:	4638      	mov	r0, r7
 800761c:	3101      	adds	r1, #1
 800761e:	f7ff ff79 	bl	8007514 <_Balloc>
 8007622:	4680      	mov	r8, r0
 8007624:	b928      	cbnz	r0, 8007632 <__multadd+0x5a>
 8007626:	4602      	mov	r2, r0
 8007628:	21ba      	movs	r1, #186	@ 0xba
 800762a:	4b0c      	ldr	r3, [pc, #48]	@ (800765c <__multadd+0x84>)
 800762c:	480c      	ldr	r0, [pc, #48]	@ (8007660 <__multadd+0x88>)
 800762e:	f000 fda9 	bl	8008184 <__assert_func>
 8007632:	6922      	ldr	r2, [r4, #16]
 8007634:	f104 010c 	add.w	r1, r4, #12
 8007638:	3202      	adds	r2, #2
 800763a:	0092      	lsls	r2, r2, #2
 800763c:	300c      	adds	r0, #12
 800763e:	f000 fd93 	bl	8008168 <memcpy>
 8007642:	4621      	mov	r1, r4
 8007644:	4638      	mov	r0, r7
 8007646:	f7ff ffa5 	bl	8007594 <_Bfree>
 800764a:	4644      	mov	r4, r8
 800764c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007650:	3501      	adds	r5, #1
 8007652:	615e      	str	r6, [r3, #20]
 8007654:	6125      	str	r5, [r4, #16]
 8007656:	4620      	mov	r0, r4
 8007658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800765c:	0800846c 	.word	0x0800846c
 8007660:	0800847d 	.word	0x0800847d

08007664 <__hi0bits>:
 8007664:	4603      	mov	r3, r0
 8007666:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800766a:	bf3a      	itte	cc
 800766c:	0403      	lslcc	r3, r0, #16
 800766e:	2010      	movcc	r0, #16
 8007670:	2000      	movcs	r0, #0
 8007672:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007676:	bf3c      	itt	cc
 8007678:	021b      	lslcc	r3, r3, #8
 800767a:	3008      	addcc	r0, #8
 800767c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007680:	bf3c      	itt	cc
 8007682:	011b      	lslcc	r3, r3, #4
 8007684:	3004      	addcc	r0, #4
 8007686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800768a:	bf3c      	itt	cc
 800768c:	009b      	lslcc	r3, r3, #2
 800768e:	3002      	addcc	r0, #2
 8007690:	2b00      	cmp	r3, #0
 8007692:	db05      	blt.n	80076a0 <__hi0bits+0x3c>
 8007694:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007698:	f100 0001 	add.w	r0, r0, #1
 800769c:	bf08      	it	eq
 800769e:	2020      	moveq	r0, #32
 80076a0:	4770      	bx	lr

080076a2 <__lo0bits>:
 80076a2:	6803      	ldr	r3, [r0, #0]
 80076a4:	4602      	mov	r2, r0
 80076a6:	f013 0007 	ands.w	r0, r3, #7
 80076aa:	d00b      	beq.n	80076c4 <__lo0bits+0x22>
 80076ac:	07d9      	lsls	r1, r3, #31
 80076ae:	d421      	bmi.n	80076f4 <__lo0bits+0x52>
 80076b0:	0798      	lsls	r0, r3, #30
 80076b2:	bf49      	itett	mi
 80076b4:	085b      	lsrmi	r3, r3, #1
 80076b6:	089b      	lsrpl	r3, r3, #2
 80076b8:	2001      	movmi	r0, #1
 80076ba:	6013      	strmi	r3, [r2, #0]
 80076bc:	bf5c      	itt	pl
 80076be:	2002      	movpl	r0, #2
 80076c0:	6013      	strpl	r3, [r2, #0]
 80076c2:	4770      	bx	lr
 80076c4:	b299      	uxth	r1, r3
 80076c6:	b909      	cbnz	r1, 80076cc <__lo0bits+0x2a>
 80076c8:	2010      	movs	r0, #16
 80076ca:	0c1b      	lsrs	r3, r3, #16
 80076cc:	b2d9      	uxtb	r1, r3
 80076ce:	b909      	cbnz	r1, 80076d4 <__lo0bits+0x32>
 80076d0:	3008      	adds	r0, #8
 80076d2:	0a1b      	lsrs	r3, r3, #8
 80076d4:	0719      	lsls	r1, r3, #28
 80076d6:	bf04      	itt	eq
 80076d8:	091b      	lsreq	r3, r3, #4
 80076da:	3004      	addeq	r0, #4
 80076dc:	0799      	lsls	r1, r3, #30
 80076de:	bf04      	itt	eq
 80076e0:	089b      	lsreq	r3, r3, #2
 80076e2:	3002      	addeq	r0, #2
 80076e4:	07d9      	lsls	r1, r3, #31
 80076e6:	d403      	bmi.n	80076f0 <__lo0bits+0x4e>
 80076e8:	085b      	lsrs	r3, r3, #1
 80076ea:	f100 0001 	add.w	r0, r0, #1
 80076ee:	d003      	beq.n	80076f8 <__lo0bits+0x56>
 80076f0:	6013      	str	r3, [r2, #0]
 80076f2:	4770      	bx	lr
 80076f4:	2000      	movs	r0, #0
 80076f6:	4770      	bx	lr
 80076f8:	2020      	movs	r0, #32
 80076fa:	4770      	bx	lr

080076fc <__i2b>:
 80076fc:	b510      	push	{r4, lr}
 80076fe:	460c      	mov	r4, r1
 8007700:	2101      	movs	r1, #1
 8007702:	f7ff ff07 	bl	8007514 <_Balloc>
 8007706:	4602      	mov	r2, r0
 8007708:	b928      	cbnz	r0, 8007716 <__i2b+0x1a>
 800770a:	f240 1145 	movw	r1, #325	@ 0x145
 800770e:	4b04      	ldr	r3, [pc, #16]	@ (8007720 <__i2b+0x24>)
 8007710:	4804      	ldr	r0, [pc, #16]	@ (8007724 <__i2b+0x28>)
 8007712:	f000 fd37 	bl	8008184 <__assert_func>
 8007716:	2301      	movs	r3, #1
 8007718:	6144      	str	r4, [r0, #20]
 800771a:	6103      	str	r3, [r0, #16]
 800771c:	bd10      	pop	{r4, pc}
 800771e:	bf00      	nop
 8007720:	0800846c 	.word	0x0800846c
 8007724:	0800847d 	.word	0x0800847d

08007728 <__multiply>:
 8007728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	4617      	mov	r7, r2
 800772e:	690a      	ldr	r2, [r1, #16]
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	4689      	mov	r9, r1
 8007734:	429a      	cmp	r2, r3
 8007736:	bfa2      	ittt	ge
 8007738:	463b      	movge	r3, r7
 800773a:	460f      	movge	r7, r1
 800773c:	4699      	movge	r9, r3
 800773e:	693d      	ldr	r5, [r7, #16]
 8007740:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	eb05 060a 	add.w	r6, r5, sl
 800774c:	42b3      	cmp	r3, r6
 800774e:	b085      	sub	sp, #20
 8007750:	bfb8      	it	lt
 8007752:	3101      	addlt	r1, #1
 8007754:	f7ff fede 	bl	8007514 <_Balloc>
 8007758:	b930      	cbnz	r0, 8007768 <__multiply+0x40>
 800775a:	4602      	mov	r2, r0
 800775c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007760:	4b40      	ldr	r3, [pc, #256]	@ (8007864 <__multiply+0x13c>)
 8007762:	4841      	ldr	r0, [pc, #260]	@ (8007868 <__multiply+0x140>)
 8007764:	f000 fd0e 	bl	8008184 <__assert_func>
 8007768:	f100 0414 	add.w	r4, r0, #20
 800776c:	4623      	mov	r3, r4
 800776e:	2200      	movs	r2, #0
 8007770:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007774:	4573      	cmp	r3, lr
 8007776:	d320      	bcc.n	80077ba <__multiply+0x92>
 8007778:	f107 0814 	add.w	r8, r7, #20
 800777c:	f109 0114 	add.w	r1, r9, #20
 8007780:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007784:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007788:	9302      	str	r3, [sp, #8]
 800778a:	1beb      	subs	r3, r5, r7
 800778c:	3b15      	subs	r3, #21
 800778e:	f023 0303 	bic.w	r3, r3, #3
 8007792:	3304      	adds	r3, #4
 8007794:	3715      	adds	r7, #21
 8007796:	42bd      	cmp	r5, r7
 8007798:	bf38      	it	cc
 800779a:	2304      	movcc	r3, #4
 800779c:	9301      	str	r3, [sp, #4]
 800779e:	9b02      	ldr	r3, [sp, #8]
 80077a0:	9103      	str	r1, [sp, #12]
 80077a2:	428b      	cmp	r3, r1
 80077a4:	d80c      	bhi.n	80077c0 <__multiply+0x98>
 80077a6:	2e00      	cmp	r6, #0
 80077a8:	dd03      	ble.n	80077b2 <__multiply+0x8a>
 80077aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d055      	beq.n	800785e <__multiply+0x136>
 80077b2:	6106      	str	r6, [r0, #16]
 80077b4:	b005      	add	sp, #20
 80077b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ba:	f843 2b04 	str.w	r2, [r3], #4
 80077be:	e7d9      	b.n	8007774 <__multiply+0x4c>
 80077c0:	f8b1 a000 	ldrh.w	sl, [r1]
 80077c4:	f1ba 0f00 	cmp.w	sl, #0
 80077c8:	d01f      	beq.n	800780a <__multiply+0xe2>
 80077ca:	46c4      	mov	ip, r8
 80077cc:	46a1      	mov	r9, r4
 80077ce:	2700      	movs	r7, #0
 80077d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077d4:	f8d9 3000 	ldr.w	r3, [r9]
 80077d8:	fa1f fb82 	uxth.w	fp, r2
 80077dc:	b29b      	uxth	r3, r3
 80077de:	fb0a 330b 	mla	r3, sl, fp, r3
 80077e2:	443b      	add	r3, r7
 80077e4:	f8d9 7000 	ldr.w	r7, [r9]
 80077e8:	0c12      	lsrs	r2, r2, #16
 80077ea:	0c3f      	lsrs	r7, r7, #16
 80077ec:	fb0a 7202 	mla	r2, sl, r2, r7
 80077f0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077fa:	4565      	cmp	r5, ip
 80077fc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007800:	f849 3b04 	str.w	r3, [r9], #4
 8007804:	d8e4      	bhi.n	80077d0 <__multiply+0xa8>
 8007806:	9b01      	ldr	r3, [sp, #4]
 8007808:	50e7      	str	r7, [r4, r3]
 800780a:	9b03      	ldr	r3, [sp, #12]
 800780c:	3104      	adds	r1, #4
 800780e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007812:	f1b9 0f00 	cmp.w	r9, #0
 8007816:	d020      	beq.n	800785a <__multiply+0x132>
 8007818:	4647      	mov	r7, r8
 800781a:	46a4      	mov	ip, r4
 800781c:	f04f 0a00 	mov.w	sl, #0
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	f8b7 b000 	ldrh.w	fp, [r7]
 8007826:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800782a:	b29b      	uxth	r3, r3
 800782c:	fb09 220b 	mla	r2, r9, fp, r2
 8007830:	4452      	add	r2, sl
 8007832:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007836:	f84c 3b04 	str.w	r3, [ip], #4
 800783a:	f857 3b04 	ldr.w	r3, [r7], #4
 800783e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007842:	f8bc 3000 	ldrh.w	r3, [ip]
 8007846:	42bd      	cmp	r5, r7
 8007848:	fb09 330a 	mla	r3, r9, sl, r3
 800784c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007850:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007854:	d8e5      	bhi.n	8007822 <__multiply+0xfa>
 8007856:	9a01      	ldr	r2, [sp, #4]
 8007858:	50a3      	str	r3, [r4, r2]
 800785a:	3404      	adds	r4, #4
 800785c:	e79f      	b.n	800779e <__multiply+0x76>
 800785e:	3e01      	subs	r6, #1
 8007860:	e7a1      	b.n	80077a6 <__multiply+0x7e>
 8007862:	bf00      	nop
 8007864:	0800846c 	.word	0x0800846c
 8007868:	0800847d 	.word	0x0800847d

0800786c <__pow5mult>:
 800786c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007870:	4615      	mov	r5, r2
 8007872:	f012 0203 	ands.w	r2, r2, #3
 8007876:	4607      	mov	r7, r0
 8007878:	460e      	mov	r6, r1
 800787a:	d007      	beq.n	800788c <__pow5mult+0x20>
 800787c:	4c25      	ldr	r4, [pc, #148]	@ (8007914 <__pow5mult+0xa8>)
 800787e:	3a01      	subs	r2, #1
 8007880:	2300      	movs	r3, #0
 8007882:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007886:	f7ff fea7 	bl	80075d8 <__multadd>
 800788a:	4606      	mov	r6, r0
 800788c:	10ad      	asrs	r5, r5, #2
 800788e:	d03d      	beq.n	800790c <__pow5mult+0xa0>
 8007890:	69fc      	ldr	r4, [r7, #28]
 8007892:	b97c      	cbnz	r4, 80078b4 <__pow5mult+0x48>
 8007894:	2010      	movs	r0, #16
 8007896:	f7ff fd87 	bl	80073a8 <malloc>
 800789a:	4602      	mov	r2, r0
 800789c:	61f8      	str	r0, [r7, #28]
 800789e:	b928      	cbnz	r0, 80078ac <__pow5mult+0x40>
 80078a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80078a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007918 <__pow5mult+0xac>)
 80078a6:	481d      	ldr	r0, [pc, #116]	@ (800791c <__pow5mult+0xb0>)
 80078a8:	f000 fc6c 	bl	8008184 <__assert_func>
 80078ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078b0:	6004      	str	r4, [r0, #0]
 80078b2:	60c4      	str	r4, [r0, #12]
 80078b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80078b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078bc:	b94c      	cbnz	r4, 80078d2 <__pow5mult+0x66>
 80078be:	f240 2171 	movw	r1, #625	@ 0x271
 80078c2:	4638      	mov	r0, r7
 80078c4:	f7ff ff1a 	bl	80076fc <__i2b>
 80078c8:	2300      	movs	r3, #0
 80078ca:	4604      	mov	r4, r0
 80078cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80078d0:	6003      	str	r3, [r0, #0]
 80078d2:	f04f 0900 	mov.w	r9, #0
 80078d6:	07eb      	lsls	r3, r5, #31
 80078d8:	d50a      	bpl.n	80078f0 <__pow5mult+0x84>
 80078da:	4631      	mov	r1, r6
 80078dc:	4622      	mov	r2, r4
 80078de:	4638      	mov	r0, r7
 80078e0:	f7ff ff22 	bl	8007728 <__multiply>
 80078e4:	4680      	mov	r8, r0
 80078e6:	4631      	mov	r1, r6
 80078e8:	4638      	mov	r0, r7
 80078ea:	f7ff fe53 	bl	8007594 <_Bfree>
 80078ee:	4646      	mov	r6, r8
 80078f0:	106d      	asrs	r5, r5, #1
 80078f2:	d00b      	beq.n	800790c <__pow5mult+0xa0>
 80078f4:	6820      	ldr	r0, [r4, #0]
 80078f6:	b938      	cbnz	r0, 8007908 <__pow5mult+0x9c>
 80078f8:	4622      	mov	r2, r4
 80078fa:	4621      	mov	r1, r4
 80078fc:	4638      	mov	r0, r7
 80078fe:	f7ff ff13 	bl	8007728 <__multiply>
 8007902:	6020      	str	r0, [r4, #0]
 8007904:	f8c0 9000 	str.w	r9, [r0]
 8007908:	4604      	mov	r4, r0
 800790a:	e7e4      	b.n	80078d6 <__pow5mult+0x6a>
 800790c:	4630      	mov	r0, r6
 800790e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007912:	bf00      	nop
 8007914:	08008530 	.word	0x08008530
 8007918:	080083fd 	.word	0x080083fd
 800791c:	0800847d 	.word	0x0800847d

08007920 <__lshift>:
 8007920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	460c      	mov	r4, r1
 8007926:	4607      	mov	r7, r0
 8007928:	4691      	mov	r9, r2
 800792a:	6923      	ldr	r3, [r4, #16]
 800792c:	6849      	ldr	r1, [r1, #4]
 800792e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007932:	68a3      	ldr	r3, [r4, #8]
 8007934:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007938:	f108 0601 	add.w	r6, r8, #1
 800793c:	42b3      	cmp	r3, r6
 800793e:	db0b      	blt.n	8007958 <__lshift+0x38>
 8007940:	4638      	mov	r0, r7
 8007942:	f7ff fde7 	bl	8007514 <_Balloc>
 8007946:	4605      	mov	r5, r0
 8007948:	b948      	cbnz	r0, 800795e <__lshift+0x3e>
 800794a:	4602      	mov	r2, r0
 800794c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007950:	4b27      	ldr	r3, [pc, #156]	@ (80079f0 <__lshift+0xd0>)
 8007952:	4828      	ldr	r0, [pc, #160]	@ (80079f4 <__lshift+0xd4>)
 8007954:	f000 fc16 	bl	8008184 <__assert_func>
 8007958:	3101      	adds	r1, #1
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	e7ee      	b.n	800793c <__lshift+0x1c>
 800795e:	2300      	movs	r3, #0
 8007960:	f100 0114 	add.w	r1, r0, #20
 8007964:	f100 0210 	add.w	r2, r0, #16
 8007968:	4618      	mov	r0, r3
 800796a:	4553      	cmp	r3, sl
 800796c:	db33      	blt.n	80079d6 <__lshift+0xb6>
 800796e:	6920      	ldr	r0, [r4, #16]
 8007970:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007974:	f104 0314 	add.w	r3, r4, #20
 8007978:	f019 091f 	ands.w	r9, r9, #31
 800797c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007980:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007984:	d02b      	beq.n	80079de <__lshift+0xbe>
 8007986:	468a      	mov	sl, r1
 8007988:	2200      	movs	r2, #0
 800798a:	f1c9 0e20 	rsb	lr, r9, #32
 800798e:	6818      	ldr	r0, [r3, #0]
 8007990:	fa00 f009 	lsl.w	r0, r0, r9
 8007994:	4310      	orrs	r0, r2
 8007996:	f84a 0b04 	str.w	r0, [sl], #4
 800799a:	f853 2b04 	ldr.w	r2, [r3], #4
 800799e:	459c      	cmp	ip, r3
 80079a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80079a4:	d8f3      	bhi.n	800798e <__lshift+0x6e>
 80079a6:	ebac 0304 	sub.w	r3, ip, r4
 80079aa:	3b15      	subs	r3, #21
 80079ac:	f023 0303 	bic.w	r3, r3, #3
 80079b0:	3304      	adds	r3, #4
 80079b2:	f104 0015 	add.w	r0, r4, #21
 80079b6:	4560      	cmp	r0, ip
 80079b8:	bf88      	it	hi
 80079ba:	2304      	movhi	r3, #4
 80079bc:	50ca      	str	r2, [r1, r3]
 80079be:	b10a      	cbz	r2, 80079c4 <__lshift+0xa4>
 80079c0:	f108 0602 	add.w	r6, r8, #2
 80079c4:	3e01      	subs	r6, #1
 80079c6:	4638      	mov	r0, r7
 80079c8:	4621      	mov	r1, r4
 80079ca:	612e      	str	r6, [r5, #16]
 80079cc:	f7ff fde2 	bl	8007594 <_Bfree>
 80079d0:	4628      	mov	r0, r5
 80079d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80079da:	3301      	adds	r3, #1
 80079dc:	e7c5      	b.n	800796a <__lshift+0x4a>
 80079de:	3904      	subs	r1, #4
 80079e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079e4:	459c      	cmp	ip, r3
 80079e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80079ea:	d8f9      	bhi.n	80079e0 <__lshift+0xc0>
 80079ec:	e7ea      	b.n	80079c4 <__lshift+0xa4>
 80079ee:	bf00      	nop
 80079f0:	0800846c 	.word	0x0800846c
 80079f4:	0800847d 	.word	0x0800847d

080079f8 <__mcmp>:
 80079f8:	4603      	mov	r3, r0
 80079fa:	690a      	ldr	r2, [r1, #16]
 80079fc:	6900      	ldr	r0, [r0, #16]
 80079fe:	b530      	push	{r4, r5, lr}
 8007a00:	1a80      	subs	r0, r0, r2
 8007a02:	d10e      	bne.n	8007a22 <__mcmp+0x2a>
 8007a04:	3314      	adds	r3, #20
 8007a06:	3114      	adds	r1, #20
 8007a08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a18:	4295      	cmp	r5, r2
 8007a1a:	d003      	beq.n	8007a24 <__mcmp+0x2c>
 8007a1c:	d205      	bcs.n	8007a2a <__mcmp+0x32>
 8007a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a22:	bd30      	pop	{r4, r5, pc}
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	d3f3      	bcc.n	8007a10 <__mcmp+0x18>
 8007a28:	e7fb      	b.n	8007a22 <__mcmp+0x2a>
 8007a2a:	2001      	movs	r0, #1
 8007a2c:	e7f9      	b.n	8007a22 <__mcmp+0x2a>
	...

08007a30 <__mdiff>:
 8007a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a34:	4689      	mov	r9, r1
 8007a36:	4606      	mov	r6, r0
 8007a38:	4611      	mov	r1, r2
 8007a3a:	4648      	mov	r0, r9
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	f7ff ffdb 	bl	80079f8 <__mcmp>
 8007a42:	1e05      	subs	r5, r0, #0
 8007a44:	d112      	bne.n	8007a6c <__mdiff+0x3c>
 8007a46:	4629      	mov	r1, r5
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f7ff fd63 	bl	8007514 <_Balloc>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	b928      	cbnz	r0, 8007a5e <__mdiff+0x2e>
 8007a52:	f240 2137 	movw	r1, #567	@ 0x237
 8007a56:	4b3e      	ldr	r3, [pc, #248]	@ (8007b50 <__mdiff+0x120>)
 8007a58:	483e      	ldr	r0, [pc, #248]	@ (8007b54 <__mdiff+0x124>)
 8007a5a:	f000 fb93 	bl	8008184 <__assert_func>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a64:	4610      	mov	r0, r2
 8007a66:	b003      	add	sp, #12
 8007a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6c:	bfbc      	itt	lt
 8007a6e:	464b      	movlt	r3, r9
 8007a70:	46a1      	movlt	r9, r4
 8007a72:	4630      	mov	r0, r6
 8007a74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a78:	bfba      	itte	lt
 8007a7a:	461c      	movlt	r4, r3
 8007a7c:	2501      	movlt	r5, #1
 8007a7e:	2500      	movge	r5, #0
 8007a80:	f7ff fd48 	bl	8007514 <_Balloc>
 8007a84:	4602      	mov	r2, r0
 8007a86:	b918      	cbnz	r0, 8007a90 <__mdiff+0x60>
 8007a88:	f240 2145 	movw	r1, #581	@ 0x245
 8007a8c:	4b30      	ldr	r3, [pc, #192]	@ (8007b50 <__mdiff+0x120>)
 8007a8e:	e7e3      	b.n	8007a58 <__mdiff+0x28>
 8007a90:	f100 0b14 	add.w	fp, r0, #20
 8007a94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a98:	f109 0310 	add.w	r3, r9, #16
 8007a9c:	60c5      	str	r5, [r0, #12]
 8007a9e:	f04f 0c00 	mov.w	ip, #0
 8007aa2:	f109 0514 	add.w	r5, r9, #20
 8007aa6:	46d9      	mov	r9, fp
 8007aa8:	6926      	ldr	r6, [r4, #16]
 8007aaa:	f104 0e14 	add.w	lr, r4, #20
 8007aae:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007ab2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007ab6:	9301      	str	r3, [sp, #4]
 8007ab8:	9b01      	ldr	r3, [sp, #4]
 8007aba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007abe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007ac2:	b281      	uxth	r1, r0
 8007ac4:	9301      	str	r3, [sp, #4]
 8007ac6:	fa1f f38a 	uxth.w	r3, sl
 8007aca:	1a5b      	subs	r3, r3, r1
 8007acc:	0c00      	lsrs	r0, r0, #16
 8007ace:	4463      	add	r3, ip
 8007ad0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007ad4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ade:	4576      	cmp	r6, lr
 8007ae0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ae4:	f849 3b04 	str.w	r3, [r9], #4
 8007ae8:	d8e6      	bhi.n	8007ab8 <__mdiff+0x88>
 8007aea:	1b33      	subs	r3, r6, r4
 8007aec:	3b15      	subs	r3, #21
 8007aee:	f023 0303 	bic.w	r3, r3, #3
 8007af2:	3415      	adds	r4, #21
 8007af4:	3304      	adds	r3, #4
 8007af6:	42a6      	cmp	r6, r4
 8007af8:	bf38      	it	cc
 8007afa:	2304      	movcc	r3, #4
 8007afc:	441d      	add	r5, r3
 8007afe:	445b      	add	r3, fp
 8007b00:	461e      	mov	r6, r3
 8007b02:	462c      	mov	r4, r5
 8007b04:	4544      	cmp	r4, r8
 8007b06:	d30e      	bcc.n	8007b26 <__mdiff+0xf6>
 8007b08:	f108 0103 	add.w	r1, r8, #3
 8007b0c:	1b49      	subs	r1, r1, r5
 8007b0e:	f021 0103 	bic.w	r1, r1, #3
 8007b12:	3d03      	subs	r5, #3
 8007b14:	45a8      	cmp	r8, r5
 8007b16:	bf38      	it	cc
 8007b18:	2100      	movcc	r1, #0
 8007b1a:	440b      	add	r3, r1
 8007b1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b20:	b199      	cbz	r1, 8007b4a <__mdiff+0x11a>
 8007b22:	6117      	str	r7, [r2, #16]
 8007b24:	e79e      	b.n	8007a64 <__mdiff+0x34>
 8007b26:	46e6      	mov	lr, ip
 8007b28:	f854 1b04 	ldr.w	r1, [r4], #4
 8007b2c:	fa1f fc81 	uxth.w	ip, r1
 8007b30:	44f4      	add	ip, lr
 8007b32:	0c08      	lsrs	r0, r1, #16
 8007b34:	4471      	add	r1, lr
 8007b36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007b3a:	b289      	uxth	r1, r1
 8007b3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007b40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b44:	f846 1b04 	str.w	r1, [r6], #4
 8007b48:	e7dc      	b.n	8007b04 <__mdiff+0xd4>
 8007b4a:	3f01      	subs	r7, #1
 8007b4c:	e7e6      	b.n	8007b1c <__mdiff+0xec>
 8007b4e:	bf00      	nop
 8007b50:	0800846c 	.word	0x0800846c
 8007b54:	0800847d 	.word	0x0800847d

08007b58 <__d2b>:
 8007b58:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	4690      	mov	r8, r2
 8007b60:	4699      	mov	r9, r3
 8007b62:	9e08      	ldr	r6, [sp, #32]
 8007b64:	f7ff fcd6 	bl	8007514 <_Balloc>
 8007b68:	4604      	mov	r4, r0
 8007b6a:	b930      	cbnz	r0, 8007b7a <__d2b+0x22>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b72:	4b23      	ldr	r3, [pc, #140]	@ (8007c00 <__d2b+0xa8>)
 8007b74:	4823      	ldr	r0, [pc, #140]	@ (8007c04 <__d2b+0xac>)
 8007b76:	f000 fb05 	bl	8008184 <__assert_func>
 8007b7a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b82:	b10d      	cbz	r5, 8007b88 <__d2b+0x30>
 8007b84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	f1b8 0300 	subs.w	r3, r8, #0
 8007b8e:	d024      	beq.n	8007bda <__d2b+0x82>
 8007b90:	4668      	mov	r0, sp
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	f7ff fd85 	bl	80076a2 <__lo0bits>
 8007b98:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b9c:	b1d8      	cbz	r0, 8007bd6 <__d2b+0x7e>
 8007b9e:	f1c0 0320 	rsb	r3, r0, #32
 8007ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	40c2      	lsrs	r2, r0
 8007baa:	6163      	str	r3, [r4, #20]
 8007bac:	9201      	str	r2, [sp, #4]
 8007bae:	9b01      	ldr	r3, [sp, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	bf0c      	ite	eq
 8007bb4:	2201      	moveq	r2, #1
 8007bb6:	2202      	movne	r2, #2
 8007bb8:	61a3      	str	r3, [r4, #24]
 8007bba:	6122      	str	r2, [r4, #16]
 8007bbc:	b1ad      	cbz	r5, 8007bea <__d2b+0x92>
 8007bbe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007bc2:	4405      	add	r5, r0
 8007bc4:	6035      	str	r5, [r6, #0]
 8007bc6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bcc:	6018      	str	r0, [r3, #0]
 8007bce:	4620      	mov	r0, r4
 8007bd0:	b002      	add	sp, #8
 8007bd2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007bd6:	6161      	str	r1, [r4, #20]
 8007bd8:	e7e9      	b.n	8007bae <__d2b+0x56>
 8007bda:	a801      	add	r0, sp, #4
 8007bdc:	f7ff fd61 	bl	80076a2 <__lo0bits>
 8007be0:	9b01      	ldr	r3, [sp, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	6163      	str	r3, [r4, #20]
 8007be6:	3020      	adds	r0, #32
 8007be8:	e7e7      	b.n	8007bba <__d2b+0x62>
 8007bea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007bee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bf2:	6030      	str	r0, [r6, #0]
 8007bf4:	6918      	ldr	r0, [r3, #16]
 8007bf6:	f7ff fd35 	bl	8007664 <__hi0bits>
 8007bfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bfe:	e7e4      	b.n	8007bca <__d2b+0x72>
 8007c00:	0800846c 	.word	0x0800846c
 8007c04:	0800847d 	.word	0x0800847d

08007c08 <__sfputc_r>:
 8007c08:	6893      	ldr	r3, [r2, #8]
 8007c0a:	b410      	push	{r4}
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	6093      	str	r3, [r2, #8]
 8007c12:	da07      	bge.n	8007c24 <__sfputc_r+0x1c>
 8007c14:	6994      	ldr	r4, [r2, #24]
 8007c16:	42a3      	cmp	r3, r4
 8007c18:	db01      	blt.n	8007c1e <__sfputc_r+0x16>
 8007c1a:	290a      	cmp	r1, #10
 8007c1c:	d102      	bne.n	8007c24 <__sfputc_r+0x1c>
 8007c1e:	bc10      	pop	{r4}
 8007c20:	f7fe bbfb 	b.w	800641a <__swbuf_r>
 8007c24:	6813      	ldr	r3, [r2, #0]
 8007c26:	1c58      	adds	r0, r3, #1
 8007c28:	6010      	str	r0, [r2, #0]
 8007c2a:	7019      	strb	r1, [r3, #0]
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	bc10      	pop	{r4}
 8007c30:	4770      	bx	lr

08007c32 <__sfputs_r>:
 8007c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c34:	4606      	mov	r6, r0
 8007c36:	460f      	mov	r7, r1
 8007c38:	4614      	mov	r4, r2
 8007c3a:	18d5      	adds	r5, r2, r3
 8007c3c:	42ac      	cmp	r4, r5
 8007c3e:	d101      	bne.n	8007c44 <__sfputs_r+0x12>
 8007c40:	2000      	movs	r0, #0
 8007c42:	e007      	b.n	8007c54 <__sfputs_r+0x22>
 8007c44:	463a      	mov	r2, r7
 8007c46:	4630      	mov	r0, r6
 8007c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c4c:	f7ff ffdc 	bl	8007c08 <__sfputc_r>
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d1f3      	bne.n	8007c3c <__sfputs_r+0xa>
 8007c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c58 <_vfiprintf_r>:
 8007c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5c:	460d      	mov	r5, r1
 8007c5e:	4614      	mov	r4, r2
 8007c60:	4698      	mov	r8, r3
 8007c62:	4606      	mov	r6, r0
 8007c64:	b09d      	sub	sp, #116	@ 0x74
 8007c66:	b118      	cbz	r0, 8007c70 <_vfiprintf_r+0x18>
 8007c68:	6a03      	ldr	r3, [r0, #32]
 8007c6a:	b90b      	cbnz	r3, 8007c70 <_vfiprintf_r+0x18>
 8007c6c:	f7fe fae4 	bl	8006238 <__sinit>
 8007c70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c72:	07d9      	lsls	r1, r3, #31
 8007c74:	d405      	bmi.n	8007c82 <_vfiprintf_r+0x2a>
 8007c76:	89ab      	ldrh	r3, [r5, #12]
 8007c78:	059a      	lsls	r2, r3, #22
 8007c7a:	d402      	bmi.n	8007c82 <_vfiprintf_r+0x2a>
 8007c7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c7e:	f7fe fcde 	bl	800663e <__retarget_lock_acquire_recursive>
 8007c82:	89ab      	ldrh	r3, [r5, #12]
 8007c84:	071b      	lsls	r3, r3, #28
 8007c86:	d501      	bpl.n	8007c8c <_vfiprintf_r+0x34>
 8007c88:	692b      	ldr	r3, [r5, #16]
 8007c8a:	b99b      	cbnz	r3, 8007cb4 <_vfiprintf_r+0x5c>
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f7fe fc02 	bl	8006498 <__swsetup_r>
 8007c94:	b170      	cbz	r0, 8007cb4 <_vfiprintf_r+0x5c>
 8007c96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c98:	07dc      	lsls	r4, r3, #31
 8007c9a:	d504      	bpl.n	8007ca6 <_vfiprintf_r+0x4e>
 8007c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca0:	b01d      	add	sp, #116	@ 0x74
 8007ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca6:	89ab      	ldrh	r3, [r5, #12]
 8007ca8:	0598      	lsls	r0, r3, #22
 8007caa:	d4f7      	bmi.n	8007c9c <_vfiprintf_r+0x44>
 8007cac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cae:	f7fe fcc7 	bl	8006640 <__retarget_lock_release_recursive>
 8007cb2:	e7f3      	b.n	8007c9c <_vfiprintf_r+0x44>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cb8:	2320      	movs	r3, #32
 8007cba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cbe:	2330      	movs	r3, #48	@ 0x30
 8007cc0:	f04f 0901 	mov.w	r9, #1
 8007cc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cc8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007e74 <_vfiprintf_r+0x21c>
 8007ccc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007cd0:	4623      	mov	r3, r4
 8007cd2:	469a      	mov	sl, r3
 8007cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cd8:	b10a      	cbz	r2, 8007cde <_vfiprintf_r+0x86>
 8007cda:	2a25      	cmp	r2, #37	@ 0x25
 8007cdc:	d1f9      	bne.n	8007cd2 <_vfiprintf_r+0x7a>
 8007cde:	ebba 0b04 	subs.w	fp, sl, r4
 8007ce2:	d00b      	beq.n	8007cfc <_vfiprintf_r+0xa4>
 8007ce4:	465b      	mov	r3, fp
 8007ce6:	4622      	mov	r2, r4
 8007ce8:	4629      	mov	r1, r5
 8007cea:	4630      	mov	r0, r6
 8007cec:	f7ff ffa1 	bl	8007c32 <__sfputs_r>
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	f000 80a7 	beq.w	8007e44 <_vfiprintf_r+0x1ec>
 8007cf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cf8:	445a      	add	r2, fp
 8007cfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 809f 	beq.w	8007e44 <_vfiprintf_r+0x1ec>
 8007d06:	2300      	movs	r3, #0
 8007d08:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d10:	f10a 0a01 	add.w	sl, sl, #1
 8007d14:	9304      	str	r3, [sp, #16]
 8007d16:	9307      	str	r3, [sp, #28]
 8007d18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d1e:	4654      	mov	r4, sl
 8007d20:	2205      	movs	r2, #5
 8007d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d26:	4853      	ldr	r0, [pc, #332]	@ (8007e74 <_vfiprintf_r+0x21c>)
 8007d28:	f7fe fc8b 	bl	8006642 <memchr>
 8007d2c:	9a04      	ldr	r2, [sp, #16]
 8007d2e:	b9d8      	cbnz	r0, 8007d68 <_vfiprintf_r+0x110>
 8007d30:	06d1      	lsls	r1, r2, #27
 8007d32:	bf44      	itt	mi
 8007d34:	2320      	movmi	r3, #32
 8007d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d3a:	0713      	lsls	r3, r2, #28
 8007d3c:	bf44      	itt	mi
 8007d3e:	232b      	movmi	r3, #43	@ 0x2b
 8007d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d44:	f89a 3000 	ldrb.w	r3, [sl]
 8007d48:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d4a:	d015      	beq.n	8007d78 <_vfiprintf_r+0x120>
 8007d4c:	4654      	mov	r4, sl
 8007d4e:	2000      	movs	r0, #0
 8007d50:	f04f 0c0a 	mov.w	ip, #10
 8007d54:	9a07      	ldr	r2, [sp, #28]
 8007d56:	4621      	mov	r1, r4
 8007d58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d5c:	3b30      	subs	r3, #48	@ 0x30
 8007d5e:	2b09      	cmp	r3, #9
 8007d60:	d94b      	bls.n	8007dfa <_vfiprintf_r+0x1a2>
 8007d62:	b1b0      	cbz	r0, 8007d92 <_vfiprintf_r+0x13a>
 8007d64:	9207      	str	r2, [sp, #28]
 8007d66:	e014      	b.n	8007d92 <_vfiprintf_r+0x13a>
 8007d68:	eba0 0308 	sub.w	r3, r0, r8
 8007d6c:	fa09 f303 	lsl.w	r3, r9, r3
 8007d70:	4313      	orrs	r3, r2
 8007d72:	46a2      	mov	sl, r4
 8007d74:	9304      	str	r3, [sp, #16]
 8007d76:	e7d2      	b.n	8007d1e <_vfiprintf_r+0xc6>
 8007d78:	9b03      	ldr	r3, [sp, #12]
 8007d7a:	1d19      	adds	r1, r3, #4
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	9103      	str	r1, [sp, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	bfbb      	ittet	lt
 8007d84:	425b      	neglt	r3, r3
 8007d86:	f042 0202 	orrlt.w	r2, r2, #2
 8007d8a:	9307      	strge	r3, [sp, #28]
 8007d8c:	9307      	strlt	r3, [sp, #28]
 8007d8e:	bfb8      	it	lt
 8007d90:	9204      	strlt	r2, [sp, #16]
 8007d92:	7823      	ldrb	r3, [r4, #0]
 8007d94:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d96:	d10a      	bne.n	8007dae <_vfiprintf_r+0x156>
 8007d98:	7863      	ldrb	r3, [r4, #1]
 8007d9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d9c:	d132      	bne.n	8007e04 <_vfiprintf_r+0x1ac>
 8007d9e:	9b03      	ldr	r3, [sp, #12]
 8007da0:	3402      	adds	r4, #2
 8007da2:	1d1a      	adds	r2, r3, #4
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	9203      	str	r2, [sp, #12]
 8007da8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007dac:	9305      	str	r3, [sp, #20]
 8007dae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007e78 <_vfiprintf_r+0x220>
 8007db2:	2203      	movs	r2, #3
 8007db4:	4650      	mov	r0, sl
 8007db6:	7821      	ldrb	r1, [r4, #0]
 8007db8:	f7fe fc43 	bl	8006642 <memchr>
 8007dbc:	b138      	cbz	r0, 8007dce <_vfiprintf_r+0x176>
 8007dbe:	2240      	movs	r2, #64	@ 0x40
 8007dc0:	9b04      	ldr	r3, [sp, #16]
 8007dc2:	eba0 000a 	sub.w	r0, r0, sl
 8007dc6:	4082      	lsls	r2, r0
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	3401      	adds	r4, #1
 8007dcc:	9304      	str	r3, [sp, #16]
 8007dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dd2:	2206      	movs	r2, #6
 8007dd4:	4829      	ldr	r0, [pc, #164]	@ (8007e7c <_vfiprintf_r+0x224>)
 8007dd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007dda:	f7fe fc32 	bl	8006642 <memchr>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	d03f      	beq.n	8007e62 <_vfiprintf_r+0x20a>
 8007de2:	4b27      	ldr	r3, [pc, #156]	@ (8007e80 <_vfiprintf_r+0x228>)
 8007de4:	bb1b      	cbnz	r3, 8007e2e <_vfiprintf_r+0x1d6>
 8007de6:	9b03      	ldr	r3, [sp, #12]
 8007de8:	3307      	adds	r3, #7
 8007dea:	f023 0307 	bic.w	r3, r3, #7
 8007dee:	3308      	adds	r3, #8
 8007df0:	9303      	str	r3, [sp, #12]
 8007df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007df4:	443b      	add	r3, r7
 8007df6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007df8:	e76a      	b.n	8007cd0 <_vfiprintf_r+0x78>
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	2001      	movs	r0, #1
 8007dfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e02:	e7a8      	b.n	8007d56 <_vfiprintf_r+0xfe>
 8007e04:	2300      	movs	r3, #0
 8007e06:	f04f 0c0a 	mov.w	ip, #10
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	3401      	adds	r4, #1
 8007e0e:	9305      	str	r3, [sp, #20]
 8007e10:	4620      	mov	r0, r4
 8007e12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e16:	3a30      	subs	r2, #48	@ 0x30
 8007e18:	2a09      	cmp	r2, #9
 8007e1a:	d903      	bls.n	8007e24 <_vfiprintf_r+0x1cc>
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d0c6      	beq.n	8007dae <_vfiprintf_r+0x156>
 8007e20:	9105      	str	r1, [sp, #20]
 8007e22:	e7c4      	b.n	8007dae <_vfiprintf_r+0x156>
 8007e24:	4604      	mov	r4, r0
 8007e26:	2301      	movs	r3, #1
 8007e28:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e2c:	e7f0      	b.n	8007e10 <_vfiprintf_r+0x1b8>
 8007e2e:	ab03      	add	r3, sp, #12
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	462a      	mov	r2, r5
 8007e34:	4630      	mov	r0, r6
 8007e36:	4b13      	ldr	r3, [pc, #76]	@ (8007e84 <_vfiprintf_r+0x22c>)
 8007e38:	a904      	add	r1, sp, #16
 8007e3a:	f7fd fdb5 	bl	80059a8 <_printf_float>
 8007e3e:	4607      	mov	r7, r0
 8007e40:	1c78      	adds	r0, r7, #1
 8007e42:	d1d6      	bne.n	8007df2 <_vfiprintf_r+0x19a>
 8007e44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e46:	07d9      	lsls	r1, r3, #31
 8007e48:	d405      	bmi.n	8007e56 <_vfiprintf_r+0x1fe>
 8007e4a:	89ab      	ldrh	r3, [r5, #12]
 8007e4c:	059a      	lsls	r2, r3, #22
 8007e4e:	d402      	bmi.n	8007e56 <_vfiprintf_r+0x1fe>
 8007e50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e52:	f7fe fbf5 	bl	8006640 <__retarget_lock_release_recursive>
 8007e56:	89ab      	ldrh	r3, [r5, #12]
 8007e58:	065b      	lsls	r3, r3, #25
 8007e5a:	f53f af1f 	bmi.w	8007c9c <_vfiprintf_r+0x44>
 8007e5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e60:	e71e      	b.n	8007ca0 <_vfiprintf_r+0x48>
 8007e62:	ab03      	add	r3, sp, #12
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	462a      	mov	r2, r5
 8007e68:	4630      	mov	r0, r6
 8007e6a:	4b06      	ldr	r3, [pc, #24]	@ (8007e84 <_vfiprintf_r+0x22c>)
 8007e6c:	a904      	add	r1, sp, #16
 8007e6e:	f7fe f839 	bl	8005ee4 <_printf_i>
 8007e72:	e7e4      	b.n	8007e3e <_vfiprintf_r+0x1e6>
 8007e74:	080084d6 	.word	0x080084d6
 8007e78:	080084dc 	.word	0x080084dc
 8007e7c:	080084e0 	.word	0x080084e0
 8007e80:	080059a9 	.word	0x080059a9
 8007e84:	08007c33 	.word	0x08007c33

08007e88 <__sflush_r>:
 8007e88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	0716      	lsls	r6, r2, #28
 8007e90:	4605      	mov	r5, r0
 8007e92:	460c      	mov	r4, r1
 8007e94:	d454      	bmi.n	8007f40 <__sflush_r+0xb8>
 8007e96:	684b      	ldr	r3, [r1, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	dc02      	bgt.n	8007ea2 <__sflush_r+0x1a>
 8007e9c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	dd48      	ble.n	8007f34 <__sflush_r+0xac>
 8007ea2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ea4:	2e00      	cmp	r6, #0
 8007ea6:	d045      	beq.n	8007f34 <__sflush_r+0xac>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007eae:	682f      	ldr	r7, [r5, #0]
 8007eb0:	6a21      	ldr	r1, [r4, #32]
 8007eb2:	602b      	str	r3, [r5, #0]
 8007eb4:	d030      	beq.n	8007f18 <__sflush_r+0x90>
 8007eb6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007eb8:	89a3      	ldrh	r3, [r4, #12]
 8007eba:	0759      	lsls	r1, r3, #29
 8007ebc:	d505      	bpl.n	8007eca <__sflush_r+0x42>
 8007ebe:	6863      	ldr	r3, [r4, #4]
 8007ec0:	1ad2      	subs	r2, r2, r3
 8007ec2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ec4:	b10b      	cbz	r3, 8007eca <__sflush_r+0x42>
 8007ec6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ec8:	1ad2      	subs	r2, r2, r3
 8007eca:	2300      	movs	r3, #0
 8007ecc:	4628      	mov	r0, r5
 8007ece:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ed0:	6a21      	ldr	r1, [r4, #32]
 8007ed2:	47b0      	blx	r6
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	d106      	bne.n	8007ee8 <__sflush_r+0x60>
 8007eda:	6829      	ldr	r1, [r5, #0]
 8007edc:	291d      	cmp	r1, #29
 8007ede:	d82b      	bhi.n	8007f38 <__sflush_r+0xb0>
 8007ee0:	4a28      	ldr	r2, [pc, #160]	@ (8007f84 <__sflush_r+0xfc>)
 8007ee2:	40ca      	lsrs	r2, r1
 8007ee4:	07d6      	lsls	r6, r2, #31
 8007ee6:	d527      	bpl.n	8007f38 <__sflush_r+0xb0>
 8007ee8:	2200      	movs	r2, #0
 8007eea:	6062      	str	r2, [r4, #4]
 8007eec:	6922      	ldr	r2, [r4, #16]
 8007eee:	04d9      	lsls	r1, r3, #19
 8007ef0:	6022      	str	r2, [r4, #0]
 8007ef2:	d504      	bpl.n	8007efe <__sflush_r+0x76>
 8007ef4:	1c42      	adds	r2, r0, #1
 8007ef6:	d101      	bne.n	8007efc <__sflush_r+0x74>
 8007ef8:	682b      	ldr	r3, [r5, #0]
 8007efa:	b903      	cbnz	r3, 8007efe <__sflush_r+0x76>
 8007efc:	6560      	str	r0, [r4, #84]	@ 0x54
 8007efe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f00:	602f      	str	r7, [r5, #0]
 8007f02:	b1b9      	cbz	r1, 8007f34 <__sflush_r+0xac>
 8007f04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f08:	4299      	cmp	r1, r3
 8007f0a:	d002      	beq.n	8007f12 <__sflush_r+0x8a>
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	f7ff fa03 	bl	8007318 <_free_r>
 8007f12:	2300      	movs	r3, #0
 8007f14:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f16:	e00d      	b.n	8007f34 <__sflush_r+0xac>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	47b0      	blx	r6
 8007f1e:	4602      	mov	r2, r0
 8007f20:	1c50      	adds	r0, r2, #1
 8007f22:	d1c9      	bne.n	8007eb8 <__sflush_r+0x30>
 8007f24:	682b      	ldr	r3, [r5, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0c6      	beq.n	8007eb8 <__sflush_r+0x30>
 8007f2a:	2b1d      	cmp	r3, #29
 8007f2c:	d001      	beq.n	8007f32 <__sflush_r+0xaa>
 8007f2e:	2b16      	cmp	r3, #22
 8007f30:	d11d      	bne.n	8007f6e <__sflush_r+0xe6>
 8007f32:	602f      	str	r7, [r5, #0]
 8007f34:	2000      	movs	r0, #0
 8007f36:	e021      	b.n	8007f7c <__sflush_r+0xf4>
 8007f38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f3c:	b21b      	sxth	r3, r3
 8007f3e:	e01a      	b.n	8007f76 <__sflush_r+0xee>
 8007f40:	690f      	ldr	r7, [r1, #16]
 8007f42:	2f00      	cmp	r7, #0
 8007f44:	d0f6      	beq.n	8007f34 <__sflush_r+0xac>
 8007f46:	0793      	lsls	r3, r2, #30
 8007f48:	bf18      	it	ne
 8007f4a:	2300      	movne	r3, #0
 8007f4c:	680e      	ldr	r6, [r1, #0]
 8007f4e:	bf08      	it	eq
 8007f50:	694b      	ldreq	r3, [r1, #20]
 8007f52:	1bf6      	subs	r6, r6, r7
 8007f54:	600f      	str	r7, [r1, #0]
 8007f56:	608b      	str	r3, [r1, #8]
 8007f58:	2e00      	cmp	r6, #0
 8007f5a:	ddeb      	ble.n	8007f34 <__sflush_r+0xac>
 8007f5c:	4633      	mov	r3, r6
 8007f5e:	463a      	mov	r2, r7
 8007f60:	4628      	mov	r0, r5
 8007f62:	6a21      	ldr	r1, [r4, #32]
 8007f64:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007f68:	47e0      	blx	ip
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	dc07      	bgt.n	8007f7e <__sflush_r+0xf6>
 8007f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f76:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7a:	81a3      	strh	r3, [r4, #12]
 8007f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f7e:	4407      	add	r7, r0
 8007f80:	1a36      	subs	r6, r6, r0
 8007f82:	e7e9      	b.n	8007f58 <__sflush_r+0xd0>
 8007f84:	20400001 	.word	0x20400001

08007f88 <_fflush_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	690b      	ldr	r3, [r1, #16]
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	b913      	cbnz	r3, 8007f98 <_fflush_r+0x10>
 8007f92:	2500      	movs	r5, #0
 8007f94:	4628      	mov	r0, r5
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	b118      	cbz	r0, 8007fa2 <_fflush_r+0x1a>
 8007f9a:	6a03      	ldr	r3, [r0, #32]
 8007f9c:	b90b      	cbnz	r3, 8007fa2 <_fflush_r+0x1a>
 8007f9e:	f7fe f94b 	bl	8006238 <__sinit>
 8007fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0f3      	beq.n	8007f92 <_fflush_r+0xa>
 8007faa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fac:	07d0      	lsls	r0, r2, #31
 8007fae:	d404      	bmi.n	8007fba <_fflush_r+0x32>
 8007fb0:	0599      	lsls	r1, r3, #22
 8007fb2:	d402      	bmi.n	8007fba <_fflush_r+0x32>
 8007fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fb6:	f7fe fb42 	bl	800663e <__retarget_lock_acquire_recursive>
 8007fba:	4628      	mov	r0, r5
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	f7ff ff63 	bl	8007e88 <__sflush_r>
 8007fc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	07da      	lsls	r2, r3, #31
 8007fc8:	d4e4      	bmi.n	8007f94 <_fflush_r+0xc>
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	059b      	lsls	r3, r3, #22
 8007fce:	d4e1      	bmi.n	8007f94 <_fflush_r+0xc>
 8007fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fd2:	f7fe fb35 	bl	8006640 <__retarget_lock_release_recursive>
 8007fd6:	e7dd      	b.n	8007f94 <_fflush_r+0xc>

08007fd8 <__swhatbuf_r>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	460c      	mov	r4, r1
 8007fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe0:	4615      	mov	r5, r2
 8007fe2:	2900      	cmp	r1, #0
 8007fe4:	461e      	mov	r6, r3
 8007fe6:	b096      	sub	sp, #88	@ 0x58
 8007fe8:	da0c      	bge.n	8008004 <__swhatbuf_r+0x2c>
 8007fea:	89a3      	ldrh	r3, [r4, #12]
 8007fec:	2100      	movs	r1, #0
 8007fee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ff2:	bf14      	ite	ne
 8007ff4:	2340      	movne	r3, #64	@ 0x40
 8007ff6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	6031      	str	r1, [r6, #0]
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	b016      	add	sp, #88	@ 0x58
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	466a      	mov	r2, sp
 8008006:	f000 f87d 	bl	8008104 <_fstat_r>
 800800a:	2800      	cmp	r0, #0
 800800c:	dbed      	blt.n	8007fea <__swhatbuf_r+0x12>
 800800e:	9901      	ldr	r1, [sp, #4]
 8008010:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008014:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008018:	4259      	negs	r1, r3
 800801a:	4159      	adcs	r1, r3
 800801c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008020:	e7eb      	b.n	8007ffa <__swhatbuf_r+0x22>

08008022 <__smakebuf_r>:
 8008022:	898b      	ldrh	r3, [r1, #12]
 8008024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008026:	079d      	lsls	r5, r3, #30
 8008028:	4606      	mov	r6, r0
 800802a:	460c      	mov	r4, r1
 800802c:	d507      	bpl.n	800803e <__smakebuf_r+0x1c>
 800802e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008032:	6023      	str	r3, [r4, #0]
 8008034:	6123      	str	r3, [r4, #16]
 8008036:	2301      	movs	r3, #1
 8008038:	6163      	str	r3, [r4, #20]
 800803a:	b003      	add	sp, #12
 800803c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800803e:	466a      	mov	r2, sp
 8008040:	ab01      	add	r3, sp, #4
 8008042:	f7ff ffc9 	bl	8007fd8 <__swhatbuf_r>
 8008046:	9f00      	ldr	r7, [sp, #0]
 8008048:	4605      	mov	r5, r0
 800804a:	4639      	mov	r1, r7
 800804c:	4630      	mov	r0, r6
 800804e:	f7ff f9d5 	bl	80073fc <_malloc_r>
 8008052:	b948      	cbnz	r0, 8008068 <__smakebuf_r+0x46>
 8008054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008058:	059a      	lsls	r2, r3, #22
 800805a:	d4ee      	bmi.n	800803a <__smakebuf_r+0x18>
 800805c:	f023 0303 	bic.w	r3, r3, #3
 8008060:	f043 0302 	orr.w	r3, r3, #2
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	e7e2      	b.n	800802e <__smakebuf_r+0xc>
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800806e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008072:	81a3      	strh	r3, [r4, #12]
 8008074:	9b01      	ldr	r3, [sp, #4]
 8008076:	6020      	str	r0, [r4, #0]
 8008078:	b15b      	cbz	r3, 8008092 <__smakebuf_r+0x70>
 800807a:	4630      	mov	r0, r6
 800807c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008080:	f000 f852 	bl	8008128 <_isatty_r>
 8008084:	b128      	cbz	r0, 8008092 <__smakebuf_r+0x70>
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	f023 0303 	bic.w	r3, r3, #3
 800808c:	f043 0301 	orr.w	r3, r3, #1
 8008090:	81a3      	strh	r3, [r4, #12]
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	431d      	orrs	r5, r3
 8008096:	81a5      	strh	r5, [r4, #12]
 8008098:	e7cf      	b.n	800803a <__smakebuf_r+0x18>

0800809a <_putc_r>:
 800809a:	b570      	push	{r4, r5, r6, lr}
 800809c:	460d      	mov	r5, r1
 800809e:	4614      	mov	r4, r2
 80080a0:	4606      	mov	r6, r0
 80080a2:	b118      	cbz	r0, 80080ac <_putc_r+0x12>
 80080a4:	6a03      	ldr	r3, [r0, #32]
 80080a6:	b90b      	cbnz	r3, 80080ac <_putc_r+0x12>
 80080a8:	f7fe f8c6 	bl	8006238 <__sinit>
 80080ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080ae:	07d8      	lsls	r0, r3, #31
 80080b0:	d405      	bmi.n	80080be <_putc_r+0x24>
 80080b2:	89a3      	ldrh	r3, [r4, #12]
 80080b4:	0599      	lsls	r1, r3, #22
 80080b6:	d402      	bmi.n	80080be <_putc_r+0x24>
 80080b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080ba:	f7fe fac0 	bl	800663e <__retarget_lock_acquire_recursive>
 80080be:	68a3      	ldr	r3, [r4, #8]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	60a3      	str	r3, [r4, #8]
 80080c6:	da05      	bge.n	80080d4 <_putc_r+0x3a>
 80080c8:	69a2      	ldr	r2, [r4, #24]
 80080ca:	4293      	cmp	r3, r2
 80080cc:	db12      	blt.n	80080f4 <_putc_r+0x5a>
 80080ce:	b2eb      	uxtb	r3, r5
 80080d0:	2b0a      	cmp	r3, #10
 80080d2:	d00f      	beq.n	80080f4 <_putc_r+0x5a>
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	6022      	str	r2, [r4, #0]
 80080da:	701d      	strb	r5, [r3, #0]
 80080dc:	b2ed      	uxtb	r5, r5
 80080de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080e0:	07da      	lsls	r2, r3, #31
 80080e2:	d405      	bmi.n	80080f0 <_putc_r+0x56>
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	059b      	lsls	r3, r3, #22
 80080e8:	d402      	bmi.n	80080f0 <_putc_r+0x56>
 80080ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080ec:	f7fe faa8 	bl	8006640 <__retarget_lock_release_recursive>
 80080f0:	4628      	mov	r0, r5
 80080f2:	bd70      	pop	{r4, r5, r6, pc}
 80080f4:	4629      	mov	r1, r5
 80080f6:	4622      	mov	r2, r4
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7fe f98e 	bl	800641a <__swbuf_r>
 80080fe:	4605      	mov	r5, r0
 8008100:	e7ed      	b.n	80080de <_putc_r+0x44>
	...

08008104 <_fstat_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	2300      	movs	r3, #0
 8008108:	4d06      	ldr	r5, [pc, #24]	@ (8008124 <_fstat_r+0x20>)
 800810a:	4604      	mov	r4, r0
 800810c:	4608      	mov	r0, r1
 800810e:	4611      	mov	r1, r2
 8008110:	602b      	str	r3, [r5, #0]
 8008112:	f7f9 fe6d 	bl	8001df0 <_fstat>
 8008116:	1c43      	adds	r3, r0, #1
 8008118:	d102      	bne.n	8008120 <_fstat_r+0x1c>
 800811a:	682b      	ldr	r3, [r5, #0]
 800811c:	b103      	cbz	r3, 8008120 <_fstat_r+0x1c>
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	bd38      	pop	{r3, r4, r5, pc}
 8008122:	bf00      	nop
 8008124:	20000a84 	.word	0x20000a84

08008128 <_isatty_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	2300      	movs	r3, #0
 800812c:	4d05      	ldr	r5, [pc, #20]	@ (8008144 <_isatty_r+0x1c>)
 800812e:	4604      	mov	r4, r0
 8008130:	4608      	mov	r0, r1
 8008132:	602b      	str	r3, [r5, #0]
 8008134:	f7f9 fe6b 	bl	8001e0e <_isatty>
 8008138:	1c43      	adds	r3, r0, #1
 800813a:	d102      	bne.n	8008142 <_isatty_r+0x1a>
 800813c:	682b      	ldr	r3, [r5, #0]
 800813e:	b103      	cbz	r3, 8008142 <_isatty_r+0x1a>
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	bd38      	pop	{r3, r4, r5, pc}
 8008144:	20000a84 	.word	0x20000a84

08008148 <_sbrk_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	2300      	movs	r3, #0
 800814c:	4d05      	ldr	r5, [pc, #20]	@ (8008164 <_sbrk_r+0x1c>)
 800814e:	4604      	mov	r4, r0
 8008150:	4608      	mov	r0, r1
 8008152:	602b      	str	r3, [r5, #0]
 8008154:	f7f9 fe72 	bl	8001e3c <_sbrk>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d102      	bne.n	8008162 <_sbrk_r+0x1a>
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	b103      	cbz	r3, 8008162 <_sbrk_r+0x1a>
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	bd38      	pop	{r3, r4, r5, pc}
 8008164:	20000a84 	.word	0x20000a84

08008168 <memcpy>:
 8008168:	440a      	add	r2, r1
 800816a:	4291      	cmp	r1, r2
 800816c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008170:	d100      	bne.n	8008174 <memcpy+0xc>
 8008172:	4770      	bx	lr
 8008174:	b510      	push	{r4, lr}
 8008176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800817a:	4291      	cmp	r1, r2
 800817c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008180:	d1f9      	bne.n	8008176 <memcpy+0xe>
 8008182:	bd10      	pop	{r4, pc}

08008184 <__assert_func>:
 8008184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008186:	4614      	mov	r4, r2
 8008188:	461a      	mov	r2, r3
 800818a:	4b09      	ldr	r3, [pc, #36]	@ (80081b0 <__assert_func+0x2c>)
 800818c:	4605      	mov	r5, r0
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68d8      	ldr	r0, [r3, #12]
 8008192:	b14c      	cbz	r4, 80081a8 <__assert_func+0x24>
 8008194:	4b07      	ldr	r3, [pc, #28]	@ (80081b4 <__assert_func+0x30>)
 8008196:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800819a:	9100      	str	r1, [sp, #0]
 800819c:	462b      	mov	r3, r5
 800819e:	4906      	ldr	r1, [pc, #24]	@ (80081b8 <__assert_func+0x34>)
 80081a0:	f000 f842 	bl	8008228 <fiprintf>
 80081a4:	f000 f852 	bl	800824c <abort>
 80081a8:	4b04      	ldr	r3, [pc, #16]	@ (80081bc <__assert_func+0x38>)
 80081aa:	461c      	mov	r4, r3
 80081ac:	e7f3      	b.n	8008196 <__assert_func+0x12>
 80081ae:	bf00      	nop
 80081b0:	20000018 	.word	0x20000018
 80081b4:	080084f1 	.word	0x080084f1
 80081b8:	080084fe 	.word	0x080084fe
 80081bc:	0800852c 	.word	0x0800852c

080081c0 <_calloc_r>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	fba1 5402 	umull	r5, r4, r1, r2
 80081c6:	b934      	cbnz	r4, 80081d6 <_calloc_r+0x16>
 80081c8:	4629      	mov	r1, r5
 80081ca:	f7ff f917 	bl	80073fc <_malloc_r>
 80081ce:	4606      	mov	r6, r0
 80081d0:	b928      	cbnz	r0, 80081de <_calloc_r+0x1e>
 80081d2:	4630      	mov	r0, r6
 80081d4:	bd70      	pop	{r4, r5, r6, pc}
 80081d6:	220c      	movs	r2, #12
 80081d8:	2600      	movs	r6, #0
 80081da:	6002      	str	r2, [r0, #0]
 80081dc:	e7f9      	b.n	80081d2 <_calloc_r+0x12>
 80081de:	462a      	mov	r2, r5
 80081e0:	4621      	mov	r1, r4
 80081e2:	f7fe f9af 	bl	8006544 <memset>
 80081e6:	e7f4      	b.n	80081d2 <_calloc_r+0x12>

080081e8 <__ascii_mbtowc>:
 80081e8:	b082      	sub	sp, #8
 80081ea:	b901      	cbnz	r1, 80081ee <__ascii_mbtowc+0x6>
 80081ec:	a901      	add	r1, sp, #4
 80081ee:	b142      	cbz	r2, 8008202 <__ascii_mbtowc+0x1a>
 80081f0:	b14b      	cbz	r3, 8008206 <__ascii_mbtowc+0x1e>
 80081f2:	7813      	ldrb	r3, [r2, #0]
 80081f4:	600b      	str	r3, [r1, #0]
 80081f6:	7812      	ldrb	r2, [r2, #0]
 80081f8:	1e10      	subs	r0, r2, #0
 80081fa:	bf18      	it	ne
 80081fc:	2001      	movne	r0, #1
 80081fe:	b002      	add	sp, #8
 8008200:	4770      	bx	lr
 8008202:	4610      	mov	r0, r2
 8008204:	e7fb      	b.n	80081fe <__ascii_mbtowc+0x16>
 8008206:	f06f 0001 	mvn.w	r0, #1
 800820a:	e7f8      	b.n	80081fe <__ascii_mbtowc+0x16>

0800820c <__ascii_wctomb>:
 800820c:	4603      	mov	r3, r0
 800820e:	4608      	mov	r0, r1
 8008210:	b141      	cbz	r1, 8008224 <__ascii_wctomb+0x18>
 8008212:	2aff      	cmp	r2, #255	@ 0xff
 8008214:	d904      	bls.n	8008220 <__ascii_wctomb+0x14>
 8008216:	228a      	movs	r2, #138	@ 0x8a
 8008218:	f04f 30ff 	mov.w	r0, #4294967295
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	4770      	bx	lr
 8008220:	2001      	movs	r0, #1
 8008222:	700a      	strb	r2, [r1, #0]
 8008224:	4770      	bx	lr
	...

08008228 <fiprintf>:
 8008228:	b40e      	push	{r1, r2, r3}
 800822a:	b503      	push	{r0, r1, lr}
 800822c:	4601      	mov	r1, r0
 800822e:	ab03      	add	r3, sp, #12
 8008230:	4805      	ldr	r0, [pc, #20]	@ (8008248 <fiprintf+0x20>)
 8008232:	f853 2b04 	ldr.w	r2, [r3], #4
 8008236:	6800      	ldr	r0, [r0, #0]
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	f7ff fd0d 	bl	8007c58 <_vfiprintf_r>
 800823e:	b002      	add	sp, #8
 8008240:	f85d eb04 	ldr.w	lr, [sp], #4
 8008244:	b003      	add	sp, #12
 8008246:	4770      	bx	lr
 8008248:	20000018 	.word	0x20000018

0800824c <abort>:
 800824c:	2006      	movs	r0, #6
 800824e:	b508      	push	{r3, lr}
 8008250:	f000 f82c 	bl	80082ac <raise>
 8008254:	2001      	movs	r0, #1
 8008256:	f7f9 fd7c 	bl	8001d52 <_exit>

0800825a <_raise_r>:
 800825a:	291f      	cmp	r1, #31
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	4605      	mov	r5, r0
 8008260:	460c      	mov	r4, r1
 8008262:	d904      	bls.n	800826e <_raise_r+0x14>
 8008264:	2316      	movs	r3, #22
 8008266:	6003      	str	r3, [r0, #0]
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	bd38      	pop	{r3, r4, r5, pc}
 800826e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008270:	b112      	cbz	r2, 8008278 <_raise_r+0x1e>
 8008272:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008276:	b94b      	cbnz	r3, 800828c <_raise_r+0x32>
 8008278:	4628      	mov	r0, r5
 800827a:	f000 f831 	bl	80082e0 <_getpid_r>
 800827e:	4622      	mov	r2, r4
 8008280:	4601      	mov	r1, r0
 8008282:	4628      	mov	r0, r5
 8008284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008288:	f000 b818 	b.w	80082bc <_kill_r>
 800828c:	2b01      	cmp	r3, #1
 800828e:	d00a      	beq.n	80082a6 <_raise_r+0x4c>
 8008290:	1c59      	adds	r1, r3, #1
 8008292:	d103      	bne.n	800829c <_raise_r+0x42>
 8008294:	2316      	movs	r3, #22
 8008296:	6003      	str	r3, [r0, #0]
 8008298:	2001      	movs	r0, #1
 800829a:	e7e7      	b.n	800826c <_raise_r+0x12>
 800829c:	2100      	movs	r1, #0
 800829e:	4620      	mov	r0, r4
 80082a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082a4:	4798      	blx	r3
 80082a6:	2000      	movs	r0, #0
 80082a8:	e7e0      	b.n	800826c <_raise_r+0x12>
	...

080082ac <raise>:
 80082ac:	4b02      	ldr	r3, [pc, #8]	@ (80082b8 <raise+0xc>)
 80082ae:	4601      	mov	r1, r0
 80082b0:	6818      	ldr	r0, [r3, #0]
 80082b2:	f7ff bfd2 	b.w	800825a <_raise_r>
 80082b6:	bf00      	nop
 80082b8:	20000018 	.word	0x20000018

080082bc <_kill_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	2300      	movs	r3, #0
 80082c0:	4d06      	ldr	r5, [pc, #24]	@ (80082dc <_kill_r+0x20>)
 80082c2:	4604      	mov	r4, r0
 80082c4:	4608      	mov	r0, r1
 80082c6:	4611      	mov	r1, r2
 80082c8:	602b      	str	r3, [r5, #0]
 80082ca:	f7f9 fd32 	bl	8001d32 <_kill>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	d102      	bne.n	80082d8 <_kill_r+0x1c>
 80082d2:	682b      	ldr	r3, [r5, #0]
 80082d4:	b103      	cbz	r3, 80082d8 <_kill_r+0x1c>
 80082d6:	6023      	str	r3, [r4, #0]
 80082d8:	bd38      	pop	{r3, r4, r5, pc}
 80082da:	bf00      	nop
 80082dc:	20000a84 	.word	0x20000a84

080082e0 <_getpid_r>:
 80082e0:	f7f9 bd20 	b.w	8001d24 <_getpid>

080082e4 <_init>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	bf00      	nop
 80082e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ea:	bc08      	pop	{r3}
 80082ec:	469e      	mov	lr, r3
 80082ee:	4770      	bx	lr

080082f0 <_fini>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	bf00      	nop
 80082f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f6:	bc08      	pop	{r3}
 80082f8:	469e      	mov	lr, r3
 80082fa:	4770      	bx	lr
